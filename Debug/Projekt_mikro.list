
Projekt_mikro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a66c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014560  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ed6c  0801ed6c  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ed6c  0801ed6c  0002ed6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ed74  0801ed74  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ed74  0801ed74  0002ed74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ed78  0801ed78  0002ed78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0801ed7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009118  2000009c  0801ee18  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200091b4  0801ee18  000391b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6bd  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004143  00000000  00000000  0004b789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0004f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00050bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb94  00000000  00000000  00051c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001888d  00000000  00000000  0006d82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f14b  00000000  00000000  000860b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00125204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005784  00000000  00000000  001252c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  0012aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7f4 	.word	0x0800a7f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800a7f4 	.word	0x0800a7f4

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b96e 	b.w	8000634 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468c      	mov	ip, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	f040 8083 	bne.w	8000486 <__udivmoddi4+0x116>
 8000380:	428a      	cmp	r2, r1
 8000382:	4617      	mov	r7, r2
 8000384:	d947      	bls.n	8000416 <__udivmoddi4+0xa6>
 8000386:	fab2 f282 	clz	r2, r2
 800038a:	b142      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038c:	f1c2 0020 	rsb	r0, r2, #32
 8000390:	fa24 f000 	lsr.w	r0, r4, r0
 8000394:	4091      	lsls	r1, r2
 8000396:	4097      	lsls	r7, r2
 8000398:	ea40 0c01 	orr.w	ip, r0, r1
 800039c:	4094      	lsls	r4, r2
 800039e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fbbc f6f8 	udiv	r6, ip, r8
 80003a8:	fa1f fe87 	uxth.w	lr, r7
 80003ac:	fb08 c116 	mls	r1, r8, r6, ip
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f10e 	mul.w	r1, r6, lr
 80003b8:	4299      	cmp	r1, r3
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x60>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 30ff 	add.w	r0, r6, #4294967295
 80003c2:	f080 8119 	bcs.w	80005f8 <__udivmoddi4+0x288>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 8116 	bls.w	80005f8 <__udivmoddi4+0x288>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x8c>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ee:	f080 8105 	bcs.w	80005fc <__udivmoddi4+0x28c>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f240 8102 	bls.w	80005fc <__udivmoddi4+0x28c>
 80003f8:	3802      	subs	r0, #2
 80003fa:	443c      	add	r4, r7
 80003fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	2600      	movs	r6, #0
 8000406:	b11d      	cbz	r5, 8000410 <__udivmoddi4+0xa0>
 8000408:	40d4      	lsrs	r4, r2
 800040a:	2300      	movs	r3, #0
 800040c:	e9c5 4300 	strd	r4, r3, [r5]
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	b902      	cbnz	r2, 800041a <__udivmoddi4+0xaa>
 8000418:	deff      	udf	#255	; 0xff
 800041a:	fab2 f282 	clz	r2, r2
 800041e:	2a00      	cmp	r2, #0
 8000420:	d150      	bne.n	80004c4 <__udivmoddi4+0x154>
 8000422:	1bcb      	subs	r3, r1, r7
 8000424:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000428:	fa1f f887 	uxth.w	r8, r7
 800042c:	2601      	movs	r6, #1
 800042e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000432:	0c21      	lsrs	r1, r4, #16
 8000434:	fb0e 331c 	mls	r3, lr, ip, r3
 8000438:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043c:	fb08 f30c 	mul.w	r3, r8, ip
 8000440:	428b      	cmp	r3, r1
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0xe4>
 8000444:	1879      	adds	r1, r7, r1
 8000446:	f10c 30ff 	add.w	r0, ip, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0xe2>
 800044c:	428b      	cmp	r3, r1
 800044e:	f200 80e9 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 8000452:	4684      	mov	ip, r0
 8000454:	1ac9      	subs	r1, r1, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb1 f0fe 	udiv	r0, r1, lr
 800045c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000460:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000464:	fb08 f800 	mul.w	r8, r8, r0
 8000468:	45a0      	cmp	r8, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x10c>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x10a>
 8000474:	45a0      	cmp	r8, r4
 8000476:	f200 80d9 	bhi.w	800062c <__udivmoddi4+0x2bc>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 0408 	sub.w	r4, r4, r8
 8000480:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000484:	e7bf      	b.n	8000406 <__udivmoddi4+0x96>
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x12e>
 800048a:	2d00      	cmp	r5, #0
 800048c:	f000 80b1 	beq.w	80005f2 <__udivmoddi4+0x282>
 8000490:	2600      	movs	r6, #0
 8000492:	e9c5 0100 	strd	r0, r1, [r5]
 8000496:	4630      	mov	r0, r6
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f683 	clz	r6, r3
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d14a      	bne.n	800053c <__udivmoddi4+0x1cc>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0x140>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80b8 	bhi.w	8000620 <__udivmoddi4+0x2b0>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0103 	sbc.w	r1, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	468c      	mov	ip, r1
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	d0a8      	beq.n	8000410 <__udivmoddi4+0xa0>
 80004be:	e9c5 4c00 	strd	r4, ip, [r5]
 80004c2:	e7a5      	b.n	8000410 <__udivmoddi4+0xa0>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f603 	lsr.w	r6, r0, r3
 80004cc:	4097      	lsls	r7, r2
 80004ce:	fa01 f002 	lsl.w	r0, r1, r2
 80004d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d6:	40d9      	lsrs	r1, r3
 80004d8:	4330      	orrs	r0, r6
 80004da:	0c03      	lsrs	r3, r0, #16
 80004dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004e0:	fa1f f887 	uxth.w	r8, r7
 80004e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb06 f108 	mul.w	r1, r6, r8
 80004f0:	4299      	cmp	r1, r3
 80004f2:	fa04 f402 	lsl.w	r4, r4, r2
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x19c>
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004fe:	f080 808d 	bcs.w	800061c <__udivmoddi4+0x2ac>
 8000502:	4299      	cmp	r1, r3
 8000504:	f240 808a 	bls.w	800061c <__udivmoddi4+0x2ac>
 8000508:	3e02      	subs	r6, #2
 800050a:	443b      	add	r3, r7
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b281      	uxth	r1, r0
 8000510:	fbb3 f0fe 	udiv	r0, r3, lr
 8000514:	fb0e 3310 	mls	r3, lr, r0, r3
 8000518:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051c:	fb00 f308 	mul.w	r3, r0, r8
 8000520:	428b      	cmp	r3, r1
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x1c4>
 8000524:	1879      	adds	r1, r7, r1
 8000526:	f100 3cff 	add.w	ip, r0, #4294967295
 800052a:	d273      	bcs.n	8000614 <__udivmoddi4+0x2a4>
 800052c:	428b      	cmp	r3, r1
 800052e:	d971      	bls.n	8000614 <__udivmoddi4+0x2a4>
 8000530:	3802      	subs	r0, #2
 8000532:	4439      	add	r1, r7
 8000534:	1acb      	subs	r3, r1, r3
 8000536:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800053a:	e778      	b.n	800042e <__udivmoddi4+0xbe>
 800053c:	f1c6 0c20 	rsb	ip, r6, #32
 8000540:	fa03 f406 	lsl.w	r4, r3, r6
 8000544:	fa22 f30c 	lsr.w	r3, r2, ip
 8000548:	431c      	orrs	r4, r3
 800054a:	fa20 f70c 	lsr.w	r7, r0, ip
 800054e:	fa01 f306 	lsl.w	r3, r1, r6
 8000552:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000556:	fa21 f10c 	lsr.w	r1, r1, ip
 800055a:	431f      	orrs	r7, r3
 800055c:	0c3b      	lsrs	r3, r7, #16
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fa1f f884 	uxth.w	r8, r4
 8000566:	fb0e 1119 	mls	r1, lr, r9, r1
 800056a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800056e:	fb09 fa08 	mul.w	sl, r9, r8
 8000572:	458a      	cmp	sl, r1
 8000574:	fa02 f206 	lsl.w	r2, r2, r6
 8000578:	fa00 f306 	lsl.w	r3, r0, r6
 800057c:	d908      	bls.n	8000590 <__udivmoddi4+0x220>
 800057e:	1861      	adds	r1, r4, r1
 8000580:	f109 30ff 	add.w	r0, r9, #4294967295
 8000584:	d248      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 8000586:	458a      	cmp	sl, r1
 8000588:	d946      	bls.n	8000618 <__udivmoddi4+0x2a8>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4421      	add	r1, r4
 8000590:	eba1 010a 	sub.w	r1, r1, sl
 8000594:	b2bf      	uxth	r7, r7
 8000596:	fbb1 f0fe 	udiv	r0, r1, lr
 800059a:	fb0e 1110 	mls	r1, lr, r0, r1
 800059e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005a2:	fb00 f808 	mul.w	r8, r0, r8
 80005a6:	45b8      	cmp	r8, r7
 80005a8:	d907      	bls.n	80005ba <__udivmoddi4+0x24a>
 80005aa:	19e7      	adds	r7, r4, r7
 80005ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80005b0:	d22e      	bcs.n	8000610 <__udivmoddi4+0x2a0>
 80005b2:	45b8      	cmp	r8, r7
 80005b4:	d92c      	bls.n	8000610 <__udivmoddi4+0x2a0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4427      	add	r7, r4
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	eba7 0708 	sub.w	r7, r7, r8
 80005c2:	fba0 8902 	umull	r8, r9, r0, r2
 80005c6:	454f      	cmp	r7, r9
 80005c8:	46c6      	mov	lr, r8
 80005ca:	4649      	mov	r1, r9
 80005cc:	d31a      	bcc.n	8000604 <__udivmoddi4+0x294>
 80005ce:	d017      	beq.n	8000600 <__udivmoddi4+0x290>
 80005d0:	b15d      	cbz	r5, 80005ea <__udivmoddi4+0x27a>
 80005d2:	ebb3 020e 	subs.w	r2, r3, lr
 80005d6:	eb67 0701 	sbc.w	r7, r7, r1
 80005da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005de:	40f2      	lsrs	r2, r6
 80005e0:	ea4c 0202 	orr.w	r2, ip, r2
 80005e4:	40f7      	lsrs	r7, r6
 80005e6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ea:	2600      	movs	r6, #0
 80005ec:	4631      	mov	r1, r6
 80005ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e70b      	b.n	8000410 <__udivmoddi4+0xa0>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e9      	b.n	80003d0 <__udivmoddi4+0x60>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6fd      	b.n	80003fc <__udivmoddi4+0x8c>
 8000600:	4543      	cmp	r3, r8
 8000602:	d2e5      	bcs.n	80005d0 <__udivmoddi4+0x260>
 8000604:	ebb8 0e02 	subs.w	lr, r8, r2
 8000608:	eb69 0104 	sbc.w	r1, r9, r4
 800060c:	3801      	subs	r0, #1
 800060e:	e7df      	b.n	80005d0 <__udivmoddi4+0x260>
 8000610:	4608      	mov	r0, r1
 8000612:	e7d2      	b.n	80005ba <__udivmoddi4+0x24a>
 8000614:	4660      	mov	r0, ip
 8000616:	e78d      	b.n	8000534 <__udivmoddi4+0x1c4>
 8000618:	4681      	mov	r9, r0
 800061a:	e7b9      	b.n	8000590 <__udivmoddi4+0x220>
 800061c:	4666      	mov	r6, ip
 800061e:	e775      	b.n	800050c <__udivmoddi4+0x19c>
 8000620:	4630      	mov	r0, r6
 8000622:	e74a      	b.n	80004ba <__udivmoddi4+0x14a>
 8000624:	f1ac 0c02 	sub.w	ip, ip, #2
 8000628:	4439      	add	r1, r7
 800062a:	e713      	b.n	8000454 <__udivmoddi4+0xe4>
 800062c:	3802      	subs	r0, #2
 800062e:	443c      	add	r4, r7
 8000630:	e724      	b.n	800047c <__udivmoddi4+0x10c>
 8000632:	bf00      	nop

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <GFX_SetFont+0x1c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000104 	.word	0x20000104

08000658 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ILI_Color color)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af02      	add	r7, sp, #8
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	460b      	mov	r3, r1
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	4613      	mov	r3, r2
 800066c:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b7e      	cmp	r3, #126	; 0x7e
 8000672:	d862      	bhi.n	800073a <GFX_DrawChar+0xe2>

		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000674:	2300      	movs	r3, #0
 8000676:	75fb      	strb	r3, [r7, #23]
 8000678:	e057      	b.n	800072a <GFX_DrawChar+0xd2>
		{
	        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <GFX_DrawChar+0xec>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	3b20      	subs	r3, #32
 8000682:	4930      	ldr	r1, [pc, #192]	; (8000744 <GFX_DrawChar+0xec>)
 8000684:	6809      	ldr	r1, [r1, #0]
 8000686:	3101      	adds	r1, #1
 8000688:	7809      	ldrb	r1, [r1, #0]
 800068a:	fb01 f103 	mul.w	r1, r1, r3
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	440b      	add	r3, r1
 8000692:	3302      	adds	r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	75bb      	strb	r3, [r7, #22]

	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800069a:	2300      	movs	r3, #0
 800069c:	757b      	strb	r3, [r7, #21]
 800069e:	e03a      	b.n	8000716 <GFX_DrawChar+0xbe>
	        {
	            if(line & 1) // Check last pixel in line
 80006a0:	7dbb      	ldrb	r3, [r7, #22]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d02c      	beq.n	8000704 <GFX_DrawChar+0xac>
	            {
	            	if(size == 1)
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <GFX_DrawChar+0xf0>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d10e      	bne.n	80006d0 <GFX_DrawChar+0x78>
	            	{
	            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2d8      	uxtb	r0, r3
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	7d7b      	ldrb	r3, [r7, #21]
 80006c2:	4413      	add	r3, r2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	88ba      	ldrh	r2, [r7, #4]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f002 fa85 	bl	8002bd8 <setPixel>
 80006ce:	e019      	b.n	8000704 <GFX_DrawChar+0xac>
	            	}
	            	else
	            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <GFX_DrawChar+0xf0>)
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	fb02 f203 	mul.w	r2, r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	18d0      	adds	r0, r2, r3
 80006de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006e2:	4a19      	ldr	r2, [pc, #100]	; (8000748 <GFX_DrawChar+0xf0>)
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	fb02 f203 	mul.w	r2, r2, r3
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	18d1      	adds	r1, r2, r3
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <GFX_DrawChar+0xf0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <GFX_DrawChar+0xf0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b29c      	uxth	r4, r3
 80006fa:	88bb      	ldrh	r3, [r7, #4]
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	4623      	mov	r3, r4
 8000700:	f000 f8fa 	bl	80008f8 <GFX_DrawFillRectangle>
	        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000704:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	3301      	adds	r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	757b      	strb	r3, [r7, #21]
 8000710:	7dbb      	ldrb	r3, [r7, #22]
 8000712:	085b      	lsrs	r3, r3, #1
 8000714:	75bb      	strb	r3, [r7, #22]
 8000716:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <GFX_DrawChar+0xec>)
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	7812      	ldrb	r2, [r2, #0]
 8000720:	4293      	cmp	r3, r2
 8000722:	dbbd      	blt.n	80006a0 <GFX_DrawChar+0x48>
		for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	3301      	adds	r3, #1
 8000728:	75fb      	strb	r3, [r7, #23]
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <GFX_DrawChar+0xec>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	7dfa      	ldrb	r2, [r7, #23]
 8000734:	429a      	cmp	r2, r3
 8000736:	d3a0      	bcc.n	800067a <GFX_DrawChar+0x22>
 8000738:	e000      	b.n	800073c <GFX_DrawChar+0xe4>
	if(chr > 0x7E) return; // chr > '~'
 800073a:	bf00      	nop
	            }
	        }
	    }

}
 800073c:	371c      	adds	r7, #28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	bf00      	nop
 8000744:	20000104 	.word	0x20000104
 8000748:	20000000 	.word	0x20000000

0800074c <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, ILI_Color color)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8000764:	e015      	b.n	8000792 <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	7cfa      	ldrb	r2, [r7, #19]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	6978      	ldr	r0, [r7, #20]
 800076e:	f7ff ff73 	bl	8000658 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <GFX_DrawString+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <GFX_DrawString+0x60>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	fb03 f302 	mul.w	r3, r3, r2
 8000784:	3301      	adds	r3, #1
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	4413      	add	r3, r2
 800078a:	617b      	str	r3, [r7, #20]


		znak = *str; // Next char
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1e3      	bne.n	8000766 <GFX_DrawString+0x1a>
	}
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000104 	.word	0x20000104
 80007ac:	20000000 	.word	0x20000000

080007b0 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ILI_Color color)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	1acb      	subs	r3, r1, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bfb8      	it	lt
 80007d6:	425b      	neglt	r3, r3
 80007d8:	429a      	cmp	r2, r3
 80007da:	bfcc      	ite	gt
 80007dc:	2301      	movgt	r3, #1
 80007de:	2300      	movle	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80007e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00b      	beq.n	8000804 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	623b      	str	r3, [r7, #32]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	dd0b      	ble.n	8000824 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	61fb      	str	r3, [r7, #28]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b29a      	uxth	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	bfb8      	it	lt
 800083c:	425b      	neglt	r3, r3
 800083e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000840:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000844:	0fda      	lsrs	r2, r3, #31
 8000846:	4413      	add	r3, r2
 8000848:	105b      	asrs	r3, r3, #1
 800084a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	da02      	bge.n	800085a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000858:	e02e      	b.n	80008b8 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 800085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000860:	e02a      	b.n	80008b8 <GFX_WriteLine+0x108>
	        if (steep) {
 8000862:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000866:	2b00      	cmp	r3, #0
 8000868:	d008      	beq.n	800087c <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	b2d1      	uxtb	r1, r2
 8000872:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f9af 	bl	8002bd8 <setPixel>
 800087a:	e007      	b.n	800088c <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	b2d1      	uxtb	r1, r2
 8000884:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000886:	4618      	mov	r0, r3
 8000888:	f002 f9a6 	bl	8002bd8 <setPixel>
	        }
	        err -= dy;
 800088c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800088e:	8abb      	ldrh	r3, [r7, #20]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	b29b      	uxth	r3, r3
 8000894:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8000896:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800089a:	2b00      	cmp	r3, #0
 800089c:	da09      	bge.n	80008b2 <GFX_WriteLine+0x102>
	            y_start += ystep;
 800089e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	4413      	add	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80008a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80008aa:	8afb      	ldrh	r3, [r7, #22]
 80008ac:	4413      	add	r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	ddd0      	ble.n	8000862 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3730      	adds	r7, #48	; 0x30
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ILI_Color color)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af02      	add	r7, sp, #8
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	4613      	mov	r3, r2
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff ff60 	bl	80007b0 <GFX_WriteLine>
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ILI_Color color)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	460b      	mov	r3, r1
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	4613      	mov	r3, r2
 800090c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e008      	b.n	8000926 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000914:	88ba      	ldrh	r2, [r7, #4]
 8000916:	8c3b      	ldrh	r3, [r7, #32]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ffd5 	bl	80008ca <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3301      	adds	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	88fa      	ldrh	r2, [r7, #6]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	429a      	cmp	r2, r3
 8000930:	dbf0      	blt.n	8000914 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000932:	bf00      	nop
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <EF_SetFont+0x1c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000108 	.word	0x20000108

0800095c <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EF_GetFontHeight+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	781b      	ldrb	r3, [r3, #0]
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	20000108 	.word	0x20000108

08000974 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <EF_GetFontStartChar+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	785b      	ldrb	r3, [r3, #1]
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20000108 	.word	0x20000108

0800098c <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <EF_GetFontEndChar+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	789b      	ldrb	r3, [r3, #2]
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000108 	.word	0x20000108

080009a4 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EF_GetFontSpaceWidth+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	78db      	ldrb	r3, [r3, #3]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000108 	.word	0x20000108

080009bc <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2bc5      	cmp	r3, #197	; 0xc5
 80009d0:	d052      	beq.n	8000a78 <EF_DecodePolish+0xbc>
 80009d2:	2bc5      	cmp	r3, #197	; 0xc5
 80009d4:	f300 80e7 	bgt.w	8000ba6 <EF_DecodePolish+0x1ea>
 80009d8:	2bc3      	cmp	r3, #195	; 0xc3
 80009da:	d002      	beq.n	80009e2 <EF_DecodePolish+0x26>
 80009dc:	2bc4      	cmp	r3, #196	; 0xc4
 80009de:	d00a      	beq.n	80009f6 <EF_DecodePolish+0x3a>
 80009e0:	e0e1      	b.n	8000ba6 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	2b93      	cmp	r3, #147	; 0x93
 80009e6:	d002      	beq.n	80009ee <EF_DecodePolish+0x32>
 80009e8:	2bb3      	cmp	r3, #179	; 0xb3
 80009ea:	d002      	beq.n	80009f2 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80009ec:	e0db      	b.n	8000ba6 <EF_DecodePolish+0x1ea>
			return 0x84;
 80009ee:	2384      	movs	r3, #132	; 0x84
 80009f0:	e0da      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			return 0x8D;
 80009f2:	238d      	movs	r3, #141	; 0x8d
 80009f4:	e0d8      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	3b84      	subs	r3, #132	; 0x84
 80009fa:	2b15      	cmp	r3, #21
 80009fc:	f200 80d0 	bhi.w	8000ba0 <EF_DecodePolish+0x1e4>
 8000a00:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <EF_DecodePolish+0x4c>)
 8000a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a06:	bf00      	nop
 8000a08:	08000a61 	.word	0x08000a61
 8000a0c:	08000a6d 	.word	0x08000a6d
 8000a10:	08000a69 	.word	0x08000a69
 8000a14:	08000a75 	.word	0x08000a75
 8000a18:	08000ba1 	.word	0x08000ba1
 8000a1c:	08000ba1 	.word	0x08000ba1
 8000a20:	08000ba1 	.word	0x08000ba1
 8000a24:	08000ba1 	.word	0x08000ba1
 8000a28:	08000ba1 	.word	0x08000ba1
 8000a2c:	08000ba1 	.word	0x08000ba1
 8000a30:	08000ba1 	.word	0x08000ba1
 8000a34:	08000ba1 	.word	0x08000ba1
 8000a38:	08000ba1 	.word	0x08000ba1
 8000a3c:	08000ba1 	.word	0x08000ba1
 8000a40:	08000ba1 	.word	0x08000ba1
 8000a44:	08000ba1 	.word	0x08000ba1
 8000a48:	08000ba1 	.word	0x08000ba1
 8000a4c:	08000ba1 	.word	0x08000ba1
 8000a50:	08000ba1 	.word	0x08000ba1
 8000a54:	08000ba1 	.word	0x08000ba1
 8000a58:	08000a65 	.word	0x08000a65
 8000a5c:	08000a71 	.word	0x08000a71
		{
		case 0x84: // Ą
			return 0x7F;
 8000a60:	237f      	movs	r3, #127	; 0x7f
 8000a62:	e0a1      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8000a64:	2381      	movs	r3, #129	; 0x81
 8000a66:	e09f      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	e09d      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8000a6c:	2388      	movs	r3, #136	; 0x88
 8000a6e:	e09b      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8000a70:	238a      	movs	r3, #138	; 0x8a
 8000a72:	e099      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8000a74:	2389      	movs	r3, #137	; 0x89
 8000a76:	e097      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	3b81      	subs	r3, #129	; 0x81
 8000a7c:	2b3b      	cmp	r3, #59	; 0x3b
 8000a7e:	f200 8091 	bhi.w	8000ba4 <EF_DecodePolish+0x1e8>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <EF_DecodePolish+0xcc>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000b79 	.word	0x08000b79
 8000a8c:	08000b8d 	.word	0x08000b8d
 8000a90:	08000b7d 	.word	0x08000b7d
 8000a94:	08000b91 	.word	0x08000b91
 8000a98:	08000ba5 	.word	0x08000ba5
 8000a9c:	08000ba5 	.word	0x08000ba5
 8000aa0:	08000ba5 	.word	0x08000ba5
 8000aa4:	08000ba5 	.word	0x08000ba5
 8000aa8:	08000ba5 	.word	0x08000ba5
 8000aac:	08000ba5 	.word	0x08000ba5
 8000ab0:	08000ba5 	.word	0x08000ba5
 8000ab4:	08000ba5 	.word	0x08000ba5
 8000ab8:	08000ba5 	.word	0x08000ba5
 8000abc:	08000ba5 	.word	0x08000ba5
 8000ac0:	08000ba5 	.word	0x08000ba5
 8000ac4:	08000ba5 	.word	0x08000ba5
 8000ac8:	08000ba5 	.word	0x08000ba5
 8000acc:	08000ba5 	.word	0x08000ba5
 8000ad0:	08000ba5 	.word	0x08000ba5
 8000ad4:	08000ba5 	.word	0x08000ba5
 8000ad8:	08000ba5 	.word	0x08000ba5
 8000adc:	08000ba5 	.word	0x08000ba5
 8000ae0:	08000ba5 	.word	0x08000ba5
 8000ae4:	08000ba5 	.word	0x08000ba5
 8000ae8:	08000ba5 	.word	0x08000ba5
 8000aec:	08000b81 	.word	0x08000b81
 8000af0:	08000b95 	.word	0x08000b95
 8000af4:	08000ba5 	.word	0x08000ba5
 8000af8:	08000ba5 	.word	0x08000ba5
 8000afc:	08000ba5 	.word	0x08000ba5
 8000b00:	08000ba5 	.word	0x08000ba5
 8000b04:	08000ba5 	.word	0x08000ba5
 8000b08:	08000ba5 	.word	0x08000ba5
 8000b0c:	08000ba5 	.word	0x08000ba5
 8000b10:	08000ba5 	.word	0x08000ba5
 8000b14:	08000ba5 	.word	0x08000ba5
 8000b18:	08000ba5 	.word	0x08000ba5
 8000b1c:	08000ba5 	.word	0x08000ba5
 8000b20:	08000ba5 	.word	0x08000ba5
 8000b24:	08000ba5 	.word	0x08000ba5
 8000b28:	08000ba5 	.word	0x08000ba5
 8000b2c:	08000ba5 	.word	0x08000ba5
 8000b30:	08000ba5 	.word	0x08000ba5
 8000b34:	08000ba5 	.word	0x08000ba5
 8000b38:	08000ba5 	.word	0x08000ba5
 8000b3c:	08000ba5 	.word	0x08000ba5
 8000b40:	08000ba5 	.word	0x08000ba5
 8000b44:	08000ba5 	.word	0x08000ba5
 8000b48:	08000ba5 	.word	0x08000ba5
 8000b4c:	08000ba5 	.word	0x08000ba5
 8000b50:	08000ba5 	.word	0x08000ba5
 8000b54:	08000ba5 	.word	0x08000ba5
 8000b58:	08000ba5 	.word	0x08000ba5
 8000b5c:	08000ba5 	.word	0x08000ba5
 8000b60:	08000ba5 	.word	0x08000ba5
 8000b64:	08000ba5 	.word	0x08000ba5
 8000b68:	08000b85 	.word	0x08000b85
 8000b6c:	08000b99 	.word	0x08000b99
 8000b70:	08000b89 	.word	0x08000b89
 8000b74:	08000b9d 	.word	0x08000b9d
		{
		case 0x81: // Ł
			return 0x82;
 8000b78:	2382      	movs	r3, #130	; 0x82
 8000b7a:	e015      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8000b7c:	2383      	movs	r3, #131	; 0x83
 8000b7e:	e013      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8000b80:	2385      	movs	r3, #133	; 0x85
 8000b82:	e011      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8000b84:	2386      	movs	r3, #134	; 0x86
 8000b86:	e00f      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8000b88:	2387      	movs	r3, #135	; 0x87
 8000b8a:	e00d      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8000b8c:	238b      	movs	r3, #139	; 0x8b
 8000b8e:	e00b      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8000b90:	238c      	movs	r3, #140	; 0x8c
 8000b92:	e009      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8000b94:	238e      	movs	r3, #142	; 0x8e
 8000b96:	e007      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8000b98:	238f      	movs	r3, #143	; 0x8f
 8000b9a:	e005      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8000b9c:	2390      	movs	r3, #144	; 0x90
 8000b9e:	e003      	b.n	8000ba8 <EF_DecodePolish+0x1ec>
		break;
 8000ba0:	bf00      	nop
 8000ba2:	e000      	b.n	8000ba6 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8000ba4:	bf00      	nop
	}

	return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4604      	mov	r4, r0
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4623      	mov	r3, r4
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80bb      	strh	r3, [r7, #4]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	807b      	strh	r3, [r7, #2]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8000bd2:	f7ff fecf 	bl	8000974 <EF_GetFontStartChar>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	1a9b      	subs	r3, r3, r2
 8000bde:	747b      	strb	r3, [r7, #17]



	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 8000be0:	f7ff fec8 	bl	8000974 <EF_GetFontStartChar>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d201      	bcs.n	8000bf2 <EF_PutChar+0x3e>
	{
		return 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e091      	b.n	8000d16 <EF_PutChar+0x162>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 8000bf2:	f7ff fecb 	bl	800098c <EF_GetFontEndChar>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	7c7b      	ldrb	r3, [r7, #17]
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d901      	bls.n	8000c04 <EF_PutChar+0x50>
	{
		return 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e088      	b.n	8000d16 <EF_PutChar+0x162>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8000c04:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <EF_PutChar+0x16c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	7c7b      	ldrb	r3, [r7, #17]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8000c12:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <EF_PutChar+0x16c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	4a41      	ldr	r2, [pc, #260]	; (8000d20 <EF_PutChar+0x16c>)
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	6851      	ldr	r1, [r2, #4]
 8000c1e:	7c7a      	ldrb	r2, [r7, #17]
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	440a      	add	r2, r1
 8000c24:	8852      	ldrh	r2, [r2, #2]
 8000c26:	4413      	add	r3, r2
 8000c28:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	83fb      	strh	r3, [r7, #30]
 8000c2e:	e064      	b.n	8000cfa <EF_PutChar+0x146>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	777b      	strb	r3, [r7, #29]
 8000c3a:	e051      	b.n	8000ce0 <EF_PutChar+0x12c>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8000c42:	7efb      	ldrb	r3, [r7, #27]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d905      	bls.n	8000c54 <EF_PutChar+0xa0>
			{
				CharBits = 8; // Full byte
 8000c48:	2308      	movs	r3, #8
 8000c4a:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8000c4c:	7efb      	ldrb	r3, [r7, #27]
 8000c4e:	3b08      	subs	r3, #8
 8000c50:	76fb      	strb	r3, [r7, #27]
 8000c52:	e001      	b.n	8000c58 <EF_PutChar+0xa4>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8000c54:	7efb      	ldrb	r3, [r7, #27]
 8000c56:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	74bb      	strb	r3, [r7, #18]
 8000c5c:	e036      	b.n	8000ccc <EF_PutChar+0x118>
			{
				// Check bit first from left
				if(line & 0x80)
 8000c5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da14      	bge.n	8000c90 <EF_PutChar+0xdc>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	7f7b      	ldrb	r3, [r7, #29]
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4413      	add	r3, r2
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	7cbb      	ldrb	r3, [r7, #18]
 8000c76:	4413      	add	r3, r2
 8000c78:	b2d8      	uxtb	r0, r3
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	8bfb      	ldrh	r3, [r7, #30]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4413      	add	r3, r2
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	883a      	ldrh	r2, [r7, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f001 ffa5 	bl	8002bd8 <setPixel>
 8000c8e:	e017      	b.n	8000cc0 <EF_PutChar+0x10c>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8000c90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d113      	bne.n	8000cc0 <EF_PutChar+0x10c>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8000c98:	88bb      	ldrh	r3, [r7, #4]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	7f7b      	ldrb	r3, [r7, #29]
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	7cbb      	ldrb	r3, [r7, #18]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b2d8      	uxtb	r0, r3
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	8bfb      	ldrh	r3, [r7, #30]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f001 ff8c 	bl	8002bd8 <setPixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8000cc0:	7cbb      	ldrb	r3, [r7, #18]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	74bb      	strb	r3, [r7, #18]
 8000cc6:	7cfb      	ldrb	r3, [r7, #19]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	74fb      	strb	r3, [r7, #19]
 8000ccc:	7cba      	ldrb	r2, [r7, #18]
 8000cce:	7f3b      	ldrb	r3, [r7, #28]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3c4      	bcc.n	8000c5e <EF_PutChar+0xaa>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8000cda:	7f7b      	ldrb	r3, [r7, #29]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	777b      	strb	r3, [r7, #29]
 8000ce0:	7f7a      	ldrb	r2, [r7, #29]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da00      	bge.n	8000cee <EF_PutChar+0x13a>
 8000cec:	3307      	adds	r3, #7
 8000cee:	10db      	asrs	r3, r3, #3
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dda3      	ble.n	8000c3c <EF_PutChar+0x88>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8000cf4:	8bfb      	ldrh	r3, [r7, #30]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	83fb      	strh	r3, [r7, #30]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <EF_PutChar+0x16c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	8bfa      	ldrh	r2, [r7, #30]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d393      	bcc.n	8000c30 <EF_PutChar+0x7c>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <EF_PutChar+0x16c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	7c7b      	ldrb	r3, [r7, #17]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	781b      	ldrb	r3, [r3, #0]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000108 	.word	0x20000108

08000d24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr,int l, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	460b      	mov	r3, r1
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	4613      	mov	r3, r2
 8000d38:	80bb      	strh	r3, [r7, #4]
	uint8_t Lenght = l; // Take a string length in bytes
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing
 8000d3e:	2300      	movs	r3, #0
 8000d40:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8000d42:	2300      	movs	r3, #0
 8000d44:	75fb      	strb	r3, [r7, #23]
 8000d46:	e063      	b.n	8000e10 <EF_PutString+0xec>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2bc5      	cmp	r3, #197	; 0xc5
 8000d52:	d817      	bhi.n	8000d84 <EF_PutString+0x60>
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2bc2      	cmp	r3, #194	; 0xc2
 8000d5e:	d911      	bls.n	8000d84 <EF_PutString+0x60>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	7818      	ldrb	r0, [r3, #0]
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	f7ff fe22 	bl	80009bc <EF_DecodePolish>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	e00d      	b.n	8000da0 <EF_PutString+0x7c>
		}
		else if(pStr[Loop]==0)
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <EF_PutString+0x72>
		{
			CharToPrint =' ';
 8000d90:	2320      	movs	r3, #32
 8000d92:	74fb      	strb	r3, [r7, #19]
 8000d94:	e004      	b.n	8000da0 <EF_PutString+0x7c>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	8abb      	ldrh	r3, [r7, #20]
 8000da4:	4413      	add	r3, r2
 8000da6:	b299      	uxth	r1, r3
 8000da8:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8000daa:	88ba      	ldrh	r2, [r7, #4]
 8000dac:	7cf8      	ldrb	r0, [r7, #19]
 8000dae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4623      	mov	r3, r4
 8000dba:	f7ff fefb 	bl	8000bb4 <EF_PutChar>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8000dc2:	7c7b      	ldrb	r3, [r7, #17]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	8abb      	ldrh	r3, [r7, #20]
 8000dc8:	4413      	add	r3, r2
 8000dca:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8000dcc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d113      	bne.n	8000dfc <EF_PutString+0xd8>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8000dd4:	88fa      	ldrh	r2, [r7, #6]
 8000dd6:	8abb      	ldrh	r3, [r7, #20]
 8000dd8:	18d4      	adds	r4, r2, r3
 8000dda:	88bd      	ldrh	r5, [r7, #4]
 8000ddc:	f7ff fde2 	bl	80009a4 <EF_GetFontSpaceWidth>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b29e      	uxth	r6, r3
 8000de4:	f7ff fdba 	bl	800095c <EF_GetFontHeight>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	4632      	mov	r2, r6
 8000df4:	4629      	mov	r1, r5
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff fd7e 	bl	80008f8 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8000dfc:	f7ff fdd2 	bl	80009a4 <EF_GetFontSpaceWidth>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	8abb      	ldrh	r3, [r7, #20]
 8000e06:	4413      	add	r3, r2
 8000e08:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	75fb      	strb	r3, [r7, #23]
 8000e10:	7dfa      	ldrb	r2, [r7, #23]
 8000e12:	7cbb      	ldrb	r3, [r7, #18]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d397      	bcc.n	8000d48 <EF_PutString+0x24>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8000e18:	8abb      	ldrh	r3, [r7, #20]
 8000e1a:	b2dc      	uxtb	r4, r3
 8000e1c:	f7ff fdc2 	bl	80009a4 <EF_GetFontSpaceWidth>
 8000e20:	4603      	mov	r3, r0
 8000e22:	1ae3      	subs	r3, r4, r3
 8000e24:	b2db      	uxtb	r3, r3
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e30 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2110      	movs	r1, #16
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <Write_MFRC522+0x58>)
 8000e54:	f004 fa3e 	bl	80052d4 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000e58:	f107 010f 	add.w	r1, r7, #15
 8000e5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e60:	2201      	movs	r2, #1
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <Write_MFRC522+0x5c>)
 8000e64:	f004 ff19 	bl	8005c9a <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8000e68:	1db9      	adds	r1, r7, #6
 8000e6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4806      	ldr	r0, [pc, #24]	; (8000e8c <Write_MFRC522+0x5c>)
 8000e72:	f004 ff12 	bl	8005c9a <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2110      	movs	r1, #16
 8000e7a:	4803      	ldr	r0, [pc, #12]	; (8000e88 <Write_MFRC522+0x58>)
 8000e7c:	f004 fa2a 	bl	80052d4 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	20002f6c 	.word	0x20002f6c

08000e90 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <Read_MFRC522+0x60>)
 8000eb6:	f004 fa0d 	bl	80052d4 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000eba:	f107 010e 	add.w	r1, r7, #14
 8000ebe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <Read_MFRC522+0x64>)
 8000ec6:	f004 fee8 	bl	8005c9a <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8000eca:	f107 010f 	add.w	r1, r7, #15
 8000ece:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <Read_MFRC522+0x64>)
 8000ed6:	f005 f81c 	bl	8005f12 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2110      	movs	r1, #16
 8000ede:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <Read_MFRC522+0x60>)
 8000ee0:	f004 f9f8 	bl	80052d4 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	20002f6c 	.word	0x20002f6c

08000ef8 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffc0 	bl	8000e90 <Read_MFRC522>
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff85 	bl	8000e30 <Write_MFRC522>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	460a      	mov	r2, r1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71bb      	strb	r3, [r7, #6]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffa5 	bl	8000e90 <Read_MFRC522>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000f4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	b25a      	sxtb	r2, r3
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4013      	ands	r3, r2
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff65 	bl	8000e30 <Write_MFRC522>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8000f72:	2103      	movs	r1, #3
 8000f74:	2014      	movs	r0, #20
 8000f76:	f7ff ffbf 	bl	8000ef8 <SetBitMask>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000f82:	210f      	movs	r1, #15
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff ff53 	bl	8000e30 <Write_MFRC522>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 8000f92:	f7ff fff4 	bl	8000f7e <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	202a      	movs	r0, #42	; 0x2a
 8000f9a:	f7ff ff49 	bl	8000e30 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8000f9e:	21a9      	movs	r1, #169	; 0xa9
 8000fa0:	202b      	movs	r0, #43	; 0x2b
 8000fa2:	f7ff ff45 	bl	8000e30 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	202d      	movs	r0, #45	; 0x2d
 8000faa:	f7ff ff41 	bl	8000e30 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8000fae:	21e8      	movs	r1, #232	; 0xe8
 8000fb0:	202c      	movs	r0, #44	; 0x2c
 8000fb2:	f7ff ff3d 	bl	8000e30 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	2015      	movs	r0, #21
 8000fba:	f7ff ff39 	bl	8000e30 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8000fbe:	213d      	movs	r1, #61	; 0x3d
 8000fc0:	2011      	movs	r0, #17
 8000fc2:	f7ff ff35 	bl	8000e30 <Write_MFRC522>

  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);
  // turn antenna on
  AntennaOn();
 8000fc6:	f7ff ffd2 	bl	8000f6e <AntennaOn>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af02      	add	r7, sp, #8
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	6039      	str	r1, [r7, #0]
 8000fd8:	71fb      	strb	r3, [r7, #7]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8000fda:	2107      	movs	r1, #7
 8000fdc:	200d      	movs	r0, #13
 8000fde:	f7ff ff27 	bl	8000e30 <Write_MFRC522>

  TagType[0] = reqMode;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f000 f80f 	bl	8001018 <MFRC522_ToCard>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <MFRC522_Request+0x3c>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	2b10      	cmp	r3, #16
 8001008:	d001      	beq.n	800100e <MFRC522_Request+0x40>
    status = MI_ERR;
 800100a:	2302      	movs	r3, #2
 800100c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	4613      	mov	r3, r2
 8001028:	73bb      	strb	r3, [r7, #14]
  u_char status = MI_ERR;
 800102a:	2302      	movs	r3, #2
 800102c:	77fb      	strb	r3, [r7, #31]
  u_char irqEn = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	77bb      	strb	r3, [r7, #30]
  u_char waitIRq = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	777b      	strb	r3, [r7, #29]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b0c      	cmp	r3, #12
 800103a:	d006      	beq.n	800104a <MFRC522_ToCard+0x32>
 800103c:	2b0e      	cmp	r3, #14
 800103e:	d109      	bne.n	8001054 <MFRC522_ToCard+0x3c>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001040:	2312      	movs	r3, #18
 8001042:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8001044:	2310      	movs	r3, #16
 8001046:	777b      	strb	r3, [r7, #29]
        break;
 8001048:	e005      	b.n	8001056 <MFRC522_ToCard+0x3e>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 800104a:	2377      	movs	r3, #119	; 0x77
 800104c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 800104e:	2330      	movs	r3, #48	; 0x30
 8001050:	777b      	strb	r3, [r7, #29]
        break;
 8001052:	e000      	b.n	8001056 <MFRC522_ToCard+0x3e>
      }
    default:
      break;
 8001054:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8001056:	7fbb      	ldrb	r3, [r7, #30]
 8001058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff fee5 	bl	8000e30 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff ff60 	bl	8000f2e <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	200a      	movs	r0, #10
 8001072:	f7ff ff41 	bl	8000ef8 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8001076:	2100      	movs	r1, #0
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff fed9 	bl	8000e30 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	e00a      	b.n	800109a <MFRC522_ToCard+0x82>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	2009      	movs	r0, #9
 8001090:	f7ff fece 	bl	8000e30 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	3301      	adds	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3f0      	bcc.n	8001084 <MFRC522_ToCard+0x6c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff fec2 	bl	8000e30 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d103      	bne.n	80010ba <MFRC522_ToCard+0xa2>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	200d      	movs	r0, #13
 80010b6:	f7ff ff1f 	bl	8000ef8 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80010ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010be:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80010c0:	2004      	movs	r0, #4
 80010c2:	f7ff fee5 	bl	8000e90 <Read_MFRC522>
 80010c6:	4603      	mov	r3, r0
 80010c8:	773b      	strb	r3, [r7, #28]
    i--;
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <MFRC522_ToCard+0xd4>
 80010d6:	7f3b      	ldrb	r3, [r7, #28]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d105      	bne.n	80010ec <MFRC522_ToCard+0xd4>
 80010e0:	7f3a      	ldrb	r2, [r7, #28]
 80010e2:	7f7b      	ldrb	r3, [r7, #29]
 80010e4:	4013      	ands	r3, r2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0e9      	beq.n	80010c0 <MFRC522_ToCard+0xa8>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	200d      	movs	r0, #13
 80010f0:	f7ff ff1d 	bl	8000f2e <ClearBitMask>

  if (i != 0)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d052      	beq.n	80011a0 <MFRC522_ToCard+0x188>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80010fa:	2006      	movs	r0, #6
 80010fc:	f7ff fec8 	bl	8000e90 <Read_MFRC522>
 8001100:	4603      	mov	r3, r0
 8001102:	f003 031b 	and.w	r3, r3, #27
 8001106:	2b00      	cmp	r3, #0
 8001108:	d148      	bne.n	800119c <MFRC522_ToCard+0x184>
    {
      status = MI_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01)
 800110e:	7f3a      	ldrb	r2, [r7, #28]
 8001110:	7fbb      	ldrb	r3, [r7, #30]
 8001112:	4013      	ands	r3, r2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MFRC522_ToCard+0x10a>
      {
        status = MI_NOTAGERR;             // ??
 800111e:	2301      	movs	r3, #1
 8001120:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d13b      	bne.n	80011a0 <MFRC522_ToCard+0x188>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8001128:	200a      	movs	r0, #10
 800112a:	f7ff feb1 	bl	8000e90 <Read_MFRC522>
 800112e:	4603      	mov	r3, r0
 8001130:	773b      	strb	r3, [r7, #28]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001132:	200c      	movs	r0, #12
 8001134:	f7ff feac 	bl	8000e90 <Read_MFRC522>
 8001138:	4603      	mov	r3, r0
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <MFRC522_ToCard+0x140>
        {
          *backLen = (n-1)*8 + lastBits;
 8001146:	7f3b      	ldrb	r3, [r7, #28]
 8001148:	3b01      	subs	r3, #1
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	4413      	add	r3, r2
 8001150:	461a      	mov	r2, r3
 8001152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e004      	b.n	8001162 <MFRC522_ToCard+0x14a>
        }
        else
        {
          *backLen = n*8;
 8001158:	7f3b      	ldrb	r3, [r7, #28]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	461a      	mov	r2, r3
 800115e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001160:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001162:	7f3b      	ldrb	r3, [r7, #28]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <MFRC522_ToCard+0x154>
        {
          n = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	773b      	strb	r3, [r7, #28]
        }
        if (n > MAX_LEN)
 800116c:	7f3b      	ldrb	r3, [r7, #28]
 800116e:	2b10      	cmp	r3, #16
 8001170:	d901      	bls.n	8001176 <MFRC522_ToCard+0x15e>
        {
          n = MAX_LEN;
 8001172:	2310      	movs	r3, #16
 8001174:	773b      	strb	r3, [r7, #28]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	e00a      	b.n	8001192 <MFRC522_ToCard+0x17a>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	18d4      	adds	r4, r2, r3
 8001182:	2009      	movs	r0, #9
 8001184:	f7ff fe84 	bl	8000e90 <Read_MFRC522>
 8001188:	4603      	mov	r3, r0
 800118a:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	3301      	adds	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	7f3b      	ldrb	r3, [r7, #28]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	429a      	cmp	r2, r3
 8001198:	d3f0      	bcc.n	800117c <MFRC522_ToCard+0x164>
 800119a:	e001      	b.n	80011a0 <MFRC522_ToCard+0x188>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 800119c:	2302      	movs	r3, #2
 800119e:	77fb      	strb	r3, [r7, #31]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 80011a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}

080011aa <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af02      	add	r7, sp, #8
 80011b0:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	737b      	strb	r3, [r7, #13]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80011b6:	2100      	movs	r1, #0
 80011b8:	200d      	movs	r0, #13
 80011ba:	f7ff fe39 	bl	8000e30 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2293      	movs	r2, #147	; 0x93
 80011c2:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	2220      	movs	r2, #32
 80011ca:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2202      	movs	r2, #2
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	200c      	movs	r0, #12
 80011da:	f7ff ff1d 	bl	8001018 <MFRC522_ToCard>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d118      	bne.n	800121a <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	73bb      	strb	r3, [r7, #14]
 80011ec:	e009      	b.n	8001202 <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 80011ee:	7bbb      	ldrb	r3, [r7, #14]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	7b7b      	ldrb	r3, [r7, #13]
 80011f8:	4053      	eors	r3, r2
 80011fa:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	3301      	adds	r3, #1
 8001200:	73bb      	strb	r3, [r7, #14]
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d9f2      	bls.n	80011ee <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	7b7a      	ldrb	r2, [r7, #13]
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8001216:	2302      	movs	r3, #2
 8001218:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <MX_ADC1_Init+0xa0>)
 800123a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MX_ADC1_Init+0x9c>)
 800123e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001242:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_ADC1_Init+0x9c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001250:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001268:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001276:	2201      	movs	r2, #1
 8001278:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_ADC1_Init+0x9c>)
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_ADC1_Init+0x9c>)
 8001284:	2201      	movs	r2, #1
 8001286:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_ADC1_Init+0x9c>)
 800128a:	f002 fc19 	bl	8003ac0 <HAL_ADC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001294:	f001 faac 	bl	80027f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001298:	230a      	movs	r3, #10
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_ADC1_Init+0x9c>)
 80012aa:	f002 fe9b 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80012b4:	f001 fa9c 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000010c 	.word	0x2000010c
 80012c4:	40012000 	.word	0x40012000

080012c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <HAL_ADC_MspInit+0xe8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d15e      	bne.n	80013a8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <HAL_ADC_MspInit+0xec>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a30      	ldr	r2, [pc, #192]	; (80013b4 <HAL_ADC_MspInit+0xec>)
 80012f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_ADC_MspInit+0xec>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_ADC_MspInit+0xec>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <HAL_ADC_MspInit+0xec>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_ADC_MspInit+0xec>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4820      	ldr	r0, [pc, #128]	; (80013b8 <HAL_ADC_MspInit+0xf0>)
 8001336:	f003 fe31 	bl	8004f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 800133c:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <HAL_ADC_MspInit+0xf8>)
 800133e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001358:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 800135c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001360:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001368:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 800137e:	f003 f9fd 	bl	800477c <HAL_DMA_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001388:	f001 fa32 	bl	80027f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001390:	639a      	str	r2, [r3, #56]	; 0x38
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_ADC_MspInit+0xf4>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2012      	movs	r0, #18
 800139e:	f003 f9b6 	bl	800470e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013a2:	2012      	movs	r0, #18
 80013a4:	f003 f9cf 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40012000 	.word	0x40012000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020800 	.word	0x40020800
 80013bc:	20000154 	.word	0x20000154
 80013c0:	40026410 	.word	0x40026410

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_DMA_Init+0x78>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a1a      	ldr	r2, [pc, #104]	; (800143c <MX_DMA_Init+0x78>)
 80013d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_DMA_Init+0x78>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_DMA_Init+0x78>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_DMA_Init+0x78>)
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_DMA_Init+0x78>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2010      	movs	r0, #16
 8001408:	f003 f981 	bl	800470e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800140c:	2010      	movs	r0, #16
 800140e:	f003 f99a 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2011      	movs	r0, #17
 8001418:	f003 f979 	bl	800470e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800141c:	2011      	movs	r0, #17
 800141e:	f003 f992 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2038      	movs	r0, #56	; 0x38
 8001428:	f003 f971 	bl	800470e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800142c:	2038      	movs	r0, #56	; 0x38
 800142e:	f003 f98a 	bl	8004746 <HAL_NVIC_EnableIRQ>

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b69      	ldr	r3, [pc, #420]	; (8001600 <MX_GPIO_Init+0x1c0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a68      	ldr	r2, [pc, #416]	; (8001600 <MX_GPIO_Init+0x1c0>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <MX_GPIO_Init+0x1c0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b62      	ldr	r3, [pc, #392]	; (8001600 <MX_GPIO_Init+0x1c0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a61      	ldr	r2, [pc, #388]	; (8001600 <MX_GPIO_Init+0x1c0>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b5f      	ldr	r3, [pc, #380]	; (8001600 <MX_GPIO_Init+0x1c0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <MX_GPIO_Init+0x1c0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a5a      	ldr	r2, [pc, #360]	; (8001600 <MX_GPIO_Init+0x1c0>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b54      	ldr	r3, [pc, #336]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a53      	ldr	r2, [pc, #332]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b46      	ldr	r3, [pc, #280]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a45      	ldr	r2, [pc, #276]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b43      	ldr	r3, [pc, #268]	; (8001600 <MX_GPIO_Init+0x1c0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dc_oled_Pin|cs_oled_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2112      	movs	r1, #18
 8001502:	4840      	ldr	r0, [pc, #256]	; (8001604 <MX_GPIO_Init+0x1c4>)
 8001504:	f003 fee6 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	483e      	ldr	r0, [pc, #248]	; (8001608 <MX_GPIO_Init+0x1c8>)
 800150e:	f003 fee1 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rfid_rst_GPIO_Port, rfid_rst_Pin, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2120      	movs	r1, #32
 8001516:	483c      	ldr	r0, [pc, #240]	; (8001608 <MX_GPIO_Init+0x1c8>)
 8001518:	f003 fedc 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rst_oled_GPIO_Port, rst_oled_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	483a      	ldr	r0, [pc, #232]	; (800160c <MX_GPIO_Init+0x1cc>)
 8001522:	f003 fed7 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(analizator_GPIO_Port, analizator_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152c:	4837      	ldr	r0, [pc, #220]	; (800160c <MX_GPIO_Init+0x1cc>)
 800152e:	f003 fed1 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, out0_Pin|out1_Pin|out2_Pin|out3_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	210f      	movs	r1, #15
 8001536:	4836      	ldr	r0, [pc, #216]	; (8001610 <MX_GPIO_Init+0x1d0>)
 8001538:	f003 fecc 	bl	80052d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = dc_oled_Pin|cs_oled_Pin;
 800153c:	2312      	movs	r3, #18
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	482c      	ldr	r0, [pc, #176]	; (8001604 <MX_GPIO_Init+0x1c4>)
 8001554:	f003 fd22 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|rfid_rst_Pin;
 8001558:	2330      	movs	r3, #48	; 0x30
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4826      	ldr	r0, [pc, #152]	; (8001608 <MX_GPIO_Init+0x1c8>)
 8001570:	f003 fd14 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = rst_oled_Pin|analizator_Pin;
 8001574:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	481f      	ldr	r0, [pc, #124]	; (800160c <MX_GPIO_Init+0x1cc>)
 800158e:	f003 fd05 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin;
 8001592:	230f      	movs	r3, #15
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4819      	ldr	r0, [pc, #100]	; (8001610 <MX_GPIO_Init+0x1d0>)
 80015aa:	f003 fcf7 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = in0_Pin;
 80015ae:	2310      	movs	r3, #16
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(in0_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4813      	ldr	r0, [pc, #76]	; (8001610 <MX_GPIO_Init+0x1d0>)
 80015c2:	f003 fceb 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = in2_Pin|in3_Pin;
 80015c6:	23c0      	movs	r3, #192	; 0xc0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ce:	2302      	movs	r3, #2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_GPIO_Init+0x1d0>)
 80015da:	f003 fcdf 	bl	8004f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = in1_Pin;
 80015de:	2310      	movs	r3, #16
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e6:	2302      	movs	r3, #2
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(in1_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <MX_GPIO_Init+0x1d4>)
 80015f2:	f003 fcd3 	bl	8004f9c <HAL_GPIO_Init>

}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	; 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020800 	.word	0x40020800
 800160c:	40021000 	.word	0x40021000
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40020400 	.word	0x40020400

08001618 <keypad_init>:
 *      Author: Marcin
 */
#include"main.h"
#include"keypad.h"
void keypad_init(keypad_t* keypad,char* map)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]

	for(int i=0;i<4;i++)
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	e018      	b.n	800165a <keypad_init+0x42>
	{
		for(int j=0;j<4;j++)
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	e00f      	b.n	800164e <keypad_init+0x36>
		{
			keypad->keypad[i][j]=*map;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7819      	ldrb	r1, [r3, #0]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	441a      	add	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
			map++;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	603b      	str	r3, [r7, #0]
		for(int j=0;j<4;j++)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b03      	cmp	r3, #3
 8001652:	ddec      	ble.n	800162e <keypad_init+0x16>
	for(int i=0;i<4;i++)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b03      	cmp	r3, #3
 800165e:	dde3      	ble.n	8001628 <keypad_init+0x10>
		}
	}
	keypad->timer=HAL_GetTick();
 8001660:	f002 f9fe 	bl	8003a60 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
	keypad->cnt=0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	keypad->flag=0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	keypad->key=0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	keypad->pins[0].GPIO_Port=out0_GPIO_Port;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <keypad_init+0xd8>)
 8001686:	611a      	str	r2, [r3, #16]
	keypad->pins[0].Pin=out0_Pin;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	829a      	strh	r2, [r3, #20]
	keypad->pins[1].GPIO_Port=out1_GPIO_Port;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <keypad_init+0xd8>)
 8001692:	619a      	str	r2, [r3, #24]
	keypad->pins[1].Pin=out1_Pin;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	839a      	strh	r2, [r3, #28]
	keypad->pins[2].GPIO_Port=out2_GPIO_Port;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <keypad_init+0xd8>)
 800169e:	621a      	str	r2, [r3, #32]
	keypad->pins[2].Pin=out2_Pin;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	849a      	strh	r2, [r3, #36]	; 0x24
	keypad->pins[3].GPIO_Port=out3_GPIO_Port;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <keypad_init+0xd8>)
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
	keypad->pins[3].Pin=out3_Pin;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2208      	movs	r2, #8
 80016b0:	859a      	strh	r2, [r3, #44]	; 0x2c
	keypad->pins[4].GPIO_Port=in0_GPIO_Port;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <keypad_init+0xd8>)
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
	keypad->pins[4].Pin=in0_Pin;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2210      	movs	r2, #16
 80016bc:	869a      	strh	r2, [r3, #52]	; 0x34
	keypad->pins[5].GPIO_Port=in1_GPIO_Port;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <keypad_init+0xdc>)
 80016c2:	639a      	str	r2, [r3, #56]	; 0x38
	keypad->pins[5].Pin=in1_Pin;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2210      	movs	r2, #16
 80016c8:	879a      	strh	r2, [r3, #60]	; 0x3c
	keypad->pins[6].GPIO_Port=in2_GPIO_Port;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <keypad_init+0xd8>)
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
	keypad->pins[6].Pin=in2_Pin;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	keypad->pins[7].GPIO_Port=in3_GPIO_Port;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <keypad_init+0xd8>)
 80016dc:	649a      	str	r2, [r3, #72]	; 0x48
	keypad->pins[7].Pin=in3_Pin;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40020400 	.word	0x40020400

080016f8 <keypad_getKey>:
char keypad_getKey(keypad_t* keypad)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	keypad->flag=2;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	return keypad->key;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <debounce_task>:
void debounce_task(keypad_t* keypad)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	if(!HAL_GPIO_ReadPin(keypad->pins[4].GPIO_Port, keypad->pins[4].Pin)&&!HAL_GPIO_ReadPin(keypad->pins[5].GPIO_Port, keypad->pins[5].Pin)&&!HAL_GPIO_ReadPin(keypad->pins[6].GPIO_Port, keypad->pins[6].Pin)&&!HAL_GPIO_ReadPin(keypad->pins[7].GPIO_Port, keypad->pins[7].Pin))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f003 fdb9 	bl	80052a4 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d12c      	bne.n	8001792 <debounce_task+0x78>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f003 fdae 	bl	80052a4 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d121      	bne.n	8001792 <debounce_task+0x78>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f003 fda2 	bl	80052a4 <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d115      	bne.n	8001792 <debounce_task+0x78>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f003 fd96 	bl	80052a4 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <debounce_task+0x78>
	{
		keypad->timer=HAL_GetTick();
 800177e:	f002 f96f 	bl	8003a60 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
		keypad->state=idle;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			{
				keypad->key=0;
			}
		}
	}
}
 8001790:	e06a      	b.n	8001868 <debounce_task+0x14e>
		if(HAL_GetTick()-keypad->timer>100)
 8001792:	f002 f965 	bl	8003a60 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d962      	bls.n	8001868 <debounce_task+0x14e>
			if(keypad->flag==0)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d158      	bne.n	8001860 <debounce_task+0x146>
				if(HAL_GPIO_ReadPin(keypad->pins[4].GPIO_Port, keypad->pins[4].Pin))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f003 fd73 	bl	80052a4 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00b      	beq.n	80017dc <debounce_task+0xc2>
					keypad->key=keypad->keypad[keypad->cnt%4][0];
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80017ca:	f003 0203 	and.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80017da:	e03c      	b.n	8001856 <debounce_task+0x13c>
				else if(HAL_GPIO_ReadPin(keypad->pins[5].GPIO_Port, keypad->pins[5].Pin))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4610      	mov	r0, r2
 80017e8:	f003 fd5c 	bl	80052a4 <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <debounce_task+0xf2>
					keypad->key=keypad->keypad[keypad->cnt%4][1];
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	785a      	ldrb	r2, [r3, #1]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800180a:	e024      	b.n	8001856 <debounce_task+0x13c>
				else if(HAL_GPIO_ReadPin(keypad->pins[6].GPIO_Port, keypad->pins[6].Pin))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f003 fd43 	bl	80052a4 <HAL_GPIO_ReadPin>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00c      	beq.n	800183e <debounce_task+0x124>
					keypad->key=keypad->keypad[keypad->cnt%4][2];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	789a      	ldrb	r2, [r3, #2]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800183c:	e00b      	b.n	8001856 <debounce_task+0x13c>
					keypad->key=keypad->keypad[keypad->cnt%4][3];
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	78da      	ldrb	r2, [r3, #3]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				keypad->flag=1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
 800185e:	e003      	b.n	8001868 <debounce_task+0x14e>
				keypad->key=0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <idle_task>:
void idle_task(keypad_t* keypad)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-keypad->timer>10)
 8001878:	f002 f8f2 	bl	8003a60 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b0a      	cmp	r3, #10
 8001886:	d972      	bls.n	800196e <idle_task+0xfe>
	{
		if(HAL_GPIO_ReadPin(keypad->pins[4].GPIO_Port, keypad->pins[4].Pin)||HAL_GPIO_ReadPin(keypad->pins[5].GPIO_Port, keypad->pins[5].Pin)||HAL_GPIO_ReadPin(keypad->pins[6].GPIO_Port, keypad->pins[6].Pin)||HAL_GPIO_ReadPin(keypad->pins[7].GPIO_Port, keypad->pins[7].Pin))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f003 fd06 	bl	80052a4 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d122      	bne.n	80018e4 <idle_task+0x74>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f003 fcfb 	bl	80052a4 <HAL_GPIO_ReadPin>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d117      	bne.n	80018e4 <idle_task+0x74>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f003 fcef 	bl	80052a4 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10b      	bne.n	80018e4 <idle_task+0x74>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4610      	mov	r0, r2
 80018da:	f003 fce3 	bl	80052a4 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <idle_task+0x88>
		{
			keypad->timer=HAL_GetTick();
 80018e4:	f002 f8bc 	bl	8003a60 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
			keypad->state=debounce;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018f6:	e03a      	b.n	800196e <idle_task+0xfe>
		}
		else
		{
			HAL_GPIO_WritePin(keypad->pins[keypad->cnt%4].GPIO_Port, keypad->pins[keypad->cnt%4].Pin, GPIO_PIN_RESET);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80018fe:	f003 0203 	and.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3202      	adds	r2, #2
 8001906:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	3302      	adds	r3, #2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	889b      	ldrh	r3, [r3, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	f003 fcd7 	bl	80052d4 <HAL_GPIO_WritePin>
			keypad->cnt++;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800192c:	3301      	adds	r3, #1
 800192e:	b2da      	uxtb	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			HAL_GPIO_WritePin(keypad->pins[keypad->cnt%4].GPIO_Port, keypad->pins[keypad->cnt%4].Pin, GPIO_PIN_SET);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3202      	adds	r2, #2
 8001944:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	3302      	adds	r3, #2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	889b      	ldrh	r3, [r3, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	4619      	mov	r1, r3
 8001960:	f003 fcb8 	bl	80052d4 <HAL_GPIO_WritePin>
			keypad->timer=HAL_GetTick();
 8001964:	f002 f87c 	bl	8003a60 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
	}




	keypad->flag=0;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <keypad_task>:
void keypad_task(keypad_t* keypad)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	switch(keypad->state)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <keypad_task+0x18>
 8001990:	2b01      	cmp	r3, #1
 8001992:	d004      	beq.n	800199e <keypad_task+0x20>
	{
		debounce_task(keypad);
		break;
	}
	}
}
 8001994:	e007      	b.n	80019a6 <keypad_task+0x28>
		idle_task(keypad);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff6a 	bl	8001870 <idle_task>
		break;
 800199c:	e003      	b.n	80019a6 <keypad_task+0x28>
		debounce_task(keypad);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff febb 	bl	800171a <debounce_task>
		break;
 80019a4:	bf00      	nop
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b6:	f001 ffed 	bl	8003994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ba:	f000 f913 	bl	8001be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019be:	f7ff fd3f 	bl	8001440 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c2:	f7ff fcff 	bl	80013c4 <MX_DMA_Init>
  MX_SPI2_Init();
 80019c6:	f000 ff4f 	bl	8002868 <MX_SPI2_Init>
  MX_SPI1_Init();
 80019ca:	f000 ff17 	bl	80027fc <MX_SPI1_Init>
  MX_SPI5_Init();
 80019ce:	f000 ff81 	bl	80028d4 <MX_SPI5_Init>
  MX_TIM2_Init();
 80019d2:	f001 fbe7 	bl	80031a4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80019d6:	f7ff fc25 	bl	8001224 <MX_ADC1_Init>
  MX_TIM3_Init();
 80019da:	f001 fc63 	bl	80032a4 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80019de:	f000 f969 	bl	8001cb4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  MFRC522_Init();
 80019e2:	f7ff fad4 	bl	8000f8e <MFRC522_Init>


  WS2812B_Init(&hspi2);
 80019e6:	4872      	ldr	r0, [pc, #456]	; (8001bb0 <main+0x200>)
 80019e8:	f001 fd84 	bl	80034f4 <WS2812B_Init>

  for(int i=0;i<255;i++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e011      	b.n	8001a16 <main+0x66>
  {
	  led_data[i]=gamma8(sine8(i));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 ff82 	bl	8003900 <sine8>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 ff8e 	bl	8003920 <gamma8>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4619      	mov	r1, r3
 8001a08:	4a6a      	ldr	r2, [pc, #424]	; (8001bb4 <main+0x204>)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0;i<255;i++)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3301      	adds	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2bfe      	cmp	r3, #254	; 0xfe
 8001a1a:	ddea      	ble.n	80019f2 <main+0x42>
  }
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_4, led_data, 256);
 8001a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a20:	4a64      	ldr	r2, [pc, #400]	; (8001bb4 <main+0x204>)
 8001a22:	210c      	movs	r1, #12
 8001a24:	4864      	ldr	r0, [pc, #400]	; (8001bb8 <main+0x208>)
 8001a26:	f005 f9f1 	bl	8006e0c <HAL_TIM_PWM_Start_DMA>
  WS2812B_SetDiodeRGB(0, 0, gamma8(40), 0);
 8001a2a:	2028      	movs	r0, #40	; 0x28
 8001a2c:	f001 ff78 	bl	8003920 <gamma8>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f001 fd83 	bl	8003544 <WS2812B_SetDiodeRGB>
  WS2812B_SetDiodeRGB(1, 0, gamma8(40), 0);
 8001a3e:	2028      	movs	r0, #40	; 0x28
 8001a40:	f001 ff6e 	bl	8003920 <gamma8>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f001 fd79 	bl	8003544 <WS2812B_SetDiodeRGB>
  WS2812B_SetDiodeRGB(2, 0, gamma8(40), 0);
 8001a52:	2028      	movs	r0, #40	; 0x28
 8001a54:	f001 ff64 	bl	8003920 <gamma8>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2002      	movs	r0, #2
 8001a62:	f001 fd6f 	bl	8003544 <WS2812B_SetDiodeRGB>
  WS2812B_SetDiodeRGB(11, 0, gamma8(40), 0);
 8001a66:	2028      	movs	r0, #40	; 0x28
 8001a68:	f001 ff5a 	bl	8003920 <gamma8>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	200b      	movs	r0, #11
 8001a76:	f001 fd65 	bl	8003544 <WS2812B_SetDiodeRGB>
  WS2812B_SetDiodeRGB(10, 0, gamma8(40), 0);
 8001a7a:	2028      	movs	r0, #40	; 0x28
 8001a7c:	f001 ff50 	bl	8003920 <gamma8>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f001 fd5b 	bl	8003544 <WS2812B_SetDiodeRGB>
  ssd1331_init(&hspi5);
 8001a8e:	484b      	ldr	r0, [pc, #300]	; (8001bbc <main+0x20c>)
 8001a90:	f001 f968 	bl	8002d64 <ssd1331_init>
  for(int i=0;i<64;i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	e031      	b.n	8001afe <main+0x14e>
  {
	  for(int j=0;j<96;j++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	e028      	b.n	8001af2 <main+0x142>
	  {
		  setPixel(j, i, RGB(gamma8(255-(i*4)),gamma8(0+(i*4)),0));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b2dd      	uxtb	r5, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	b2de      	uxtb	r6, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 ff33 	bl	8003920 <gamma8>
 8001aba:	4603      	mov	r3, r0
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	02db      	lsls	r3, r3, #11
 8001ac2:	b21c      	sxth	r4, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 ff27 	bl	8003920 <gamma8>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	015b      	lsls	r3, r3, #5
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	4323      	orrs	r3, r4
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4631      	mov	r1, r6
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f001 f876 	bl	8002bd8 <setPixel>
	  for(int j=0;j<96;j++)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3301      	adds	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b5f      	cmp	r3, #95	; 0x5f
 8001af6:	ddd3      	ble.n	8001aa0 <main+0xf0>
  for(int i=0;i<64;i++)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b3f      	cmp	r3, #63	; 0x3f
 8001b02:	ddca      	ble.n	8001a9a <main+0xea>
	  }
  }

  buffer_to_template();
 8001b04:	f001 f804 	bl	8002b10 <buffer_to_template>
  ssd1331_clear();
 8001b08:	f001 f89c 	bl	8002c44 <ssd1331_clear>
  GFX_SetFont(font_8x5);
 8001b0c:	482c      	ldr	r0, [pc, #176]	; (8001bc0 <main+0x210>)
 8001b0e:	f7fe fd93 	bl	8000638 <GFX_SetFont>
  EF_SetFont(&timesNewRoman_14ptFontInfo);
 8001b12:	482c      	ldr	r0, [pc, #176]	; (8001bc4 <main+0x214>)
 8001b14:	f7fe ff12 	bl	800093c <EF_SetFont>
  EF_PutString((uint8_t*)"password:",sizeof("password:"), 0, 0, GREEN, 0, BLACK);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2200      	movs	r2, #0
 8001b2a:	210a      	movs	r1, #10
 8001b2c:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <main+0x218>)
 8001b2e:	f7ff f8f9 	bl	8000d24 <EF_PutString>
  GFX_DrawString(0, 19, "*****", GREEN);
 8001b32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001b36:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <main+0x21c>)
 8001b38:	2113      	movs	r1, #19
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7fe fe06 	bl	800074c <GFX_DrawString>
  ssd1331_display(0);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f001 f8ad 	bl	8002ca0 <ssd1331_display>

  WS2812B_Refresh();
 8001b46:	f001 fd39 	bl	80035bc <WS2812B_Refresh>
  keypad_init( &key, (char*)keypad);
 8001b4a:	4921      	ldr	r1, [pc, #132]	; (8001bd0 <main+0x220>)
 8001b4c:	4821      	ldr	r0, [pc, #132]	; (8001bd4 <main+0x224>)
 8001b4e:	f7ff fd63 	bl	8001618 <keypad_init>
  uint32_t time=0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
  arm_rfft_fast_init_f32(&FFT, 1024);
 8001b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b5a:	481f      	ldr	r0, [pc, #124]	; (8001bd8 <main+0x228>)
 8001b5c:	f006 fac2 	bl	80080e4 <arm_rfft_fast_init_f32>

  while (1)
  {


	  if(HAL_GetTick()-time>delay)
 8001b60:	f001 ff7e 	bl	8003a60 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <main+0x22c>)
 8001b6c:	8812      	ldrh	r2, [r2, #0]
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d9f6      	bls.n	8001b60 <main+0x1b0>
	  {
		  switch(lock_state)
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <main+0x230>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d816      	bhi.n	8001ba8 <main+0x1f8>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <main+0x1d0>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001b9d 	.word	0x08001b9d
 8001b84:	08001ba3 	.word	0x08001ba3
 8001b88:	08001b91 	.word	0x08001b91
 8001b8c:	08001b97 	.word	0x08001b97
		  {
		  case lock_idle:
		  {
			  lock_idle_task();
 8001b90:	f000 f8e0 	bl	8001d54 <lock_idle_task>
			  break;
 8001b94:	e008      	b.n	8001ba8 <main+0x1f8>
		  }
		  case lock_error:
		  {
			  lock_error_task();
 8001b96:	f000 fa65 	bl	8002064 <lock_error_task>
			  break;
 8001b9a:	e005      	b.n	8001ba8 <main+0x1f8>
		  }
		  case lock_keypad_ok:
		  {
			  lock_keypad_ok_task();
 8001b9c:	f000 fb40 	bl	8002220 <lock_keypad_ok_task>
			  break;
 8001ba0:	e002      	b.n	8001ba8 <main+0x1f8>
		  }
		  case lock_ok:
		  {
			  lock_ok_task();
 8001ba2:	f000 fcc7 	bl	8002534 <lock_ok_task>
			  break;
 8001ba6:	bf00      	nop
		  }
		  }
		  time=HAL_GetTick();
 8001ba8:	f001 ff5a 	bl	8003a60 <HAL_GetTick>
 8001bac:	6038      	str	r0, [r7, #0]
	  if(HAL_GetTick()-time>delay)
 8001bae:	e7d7      	b.n	8001b60 <main+0x1b0>
 8001bb0:	20002ebc 	.word	0x20002ebc
 8001bb4:	20002a3c 	.word	0x20002a3c
 8001bb8:	20009130 	.word	0x20009130
 8001bbc:	20002f14 	.word	0x20002f14
 8001bc0:	0800b3d0 	.word	0x0800b3d0
 8001bc4:	0800b3c4 	.word	0x0800b3c4
 8001bc8:	0800a80c 	.word	0x0800a80c
 8001bcc:	0800a818 	.word	0x0800a818
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	20002e48 	.word	0x20002e48
 8001bd8:	200019bc 	.word	0x200019bc
 8001bdc:	20000026 	.word	0x20000026
 8001be0:	20000014 	.word	0x20000014

08001be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b094      	sub	sp, #80	; 0x50
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	2230      	movs	r2, #48	; 0x30
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f007 fa74 	bl	80090e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <SystemClock_Config+0xc8>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a26      	ldr	r2, [pc, #152]	; (8001cac <SystemClock_Config+0xc8>)
 8001c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <SystemClock_Config+0xc8>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <SystemClock_Config+0xcc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <SystemClock_Config+0xcc>)
 8001c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <SystemClock_Config+0xcc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c54:	2304      	movs	r3, #4
 8001c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c58:	2364      	movs	r3, #100	; 0x64
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c60:	2304      	movs	r3, #4
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fb4d 	bl	8005308 <HAL_RCC_OscConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c74:	f000 fdbc 	bl	80027f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c78:	230f      	movs	r3, #15
 8001c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	2103      	movs	r1, #3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fdaf 	bl	80057f8 <HAL_RCC_ClockConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ca0:	f000 fda6 	bl	80027f0 <Error_Handler>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	200f      	movs	r0, #15
 8001cbe:	f002 fd26 	bl	800470e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001cc2:	200f      	movs	r0, #15
 8001cc4:	f002 fd3f 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2024      	movs	r0, #36	; 0x24
 8001cce:	f002 fd1e 	bl	800470e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001cd2:	2024      	movs	r0, #36	; 0x24
 8001cd4:	f002 fd37 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* SPI5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2055      	movs	r0, #85	; 0x55
 8001cde:	f002 fd16 	bl	800470e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001ce2:	2055      	movs	r0, #85	; 0x55
 8001ce4:	f002 fd2f 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	201c      	movs	r0, #28
 8001cee:	f002 fd0e 	bl	800470e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cf2:	201c      	movs	r0, #28
 8001cf4:	f002 fd27 	bl	8004746 <HAL_NVIC_EnableIRQ>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <check_password>:

/* USER CODE BEGIN 4 */
int8_t check_password(char* password,char* password_to_check)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	int8_t pass=1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<5;i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	e015      	b.n	8001d3c <check_password+0x40>
	{
		if(*password!=*password_to_check)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d006      	beq.n	8001d2a <check_password+0x2e>
		{
			pass--;
 8001d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	73fb      	strb	r3, [r7, #15]
			break;
 8001d28:	e00b      	b.n	8001d42 <check_password+0x46>
		}
		password++;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
		password_to_check++;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	603b      	str	r3, [r7, #0]
	for(int i=0;i<5;i++)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	dde6      	ble.n	8001d10 <check_password+0x14>
	}
	return pass;
 8001d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <lock_idle_task>:
void lock_idle_task()
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af04      	add	r7, sp, #16
	keypad_task(&key);
 8001d5a:	48b8      	ldr	r0, [pc, #736]	; (800203c <lock_idle_task+0x2e8>)
 8001d5c:	f7ff fe0f 	bl	800197e <keypad_task>
	uint8_t check_keypad=0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
	if(key.flag==1)
 8001d64:	4bb5      	ldr	r3, [pc, #724]	; (800203c <lock_idle_task+0x2e8>)
 8001d66:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d12a      	bne.n	8001dc6 <lock_idle_task+0x72>
	 {
		keypad_password[keypad_password_cnt]= keypad_getKey(&key);
 8001d70:	4bb3      	ldr	r3, [pc, #716]	; (8002040 <lock_idle_task+0x2ec>)
 8001d72:	681c      	ldr	r4, [r3, #0]
 8001d74:	48b1      	ldr	r0, [pc, #708]	; (800203c <lock_idle_task+0x2e8>)
 8001d76:	f7ff fcbf 	bl	80016f8 <keypad_getKey>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4bb1      	ldr	r3, [pc, #708]	; (8002044 <lock_idle_task+0x2f0>)
 8001d80:	551a      	strb	r2, [r3, r4]
		keypad_password_cnt++;
 8001d82:	4baf      	ldr	r3, [pc, #700]	; (8002040 <lock_idle_task+0x2ec>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	4aad      	ldr	r2, [pc, #692]	; (8002040 <lock_idle_task+0x2ec>)
 8001d8a:	6013      	str	r3, [r2, #0]
		if(Number_of_attemps==2)
 8001d8c:	4bae      	ldr	r3, [pc, #696]	; (8002048 <lock_idle_task+0x2f4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d10a      	bne.n	8001daa <lock_idle_task+0x56>
		{
			GFX_DrawString(45, 19, (char*)keypad_password, GREEN);
 8001d94:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d98:	4aaa      	ldr	r2, [pc, #680]	; (8002044 <lock_idle_task+0x2f0>)
 8001d9a:	2113      	movs	r1, #19
 8001d9c:	202d      	movs	r0, #45	; 0x2d
 8001d9e:	f7fe fcd5 	bl	800074c <GFX_DrawString>
			ssd1331_display(0);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 ff7c 	bl	8002ca0 <ssd1331_display>
 8001da8:	e00d      	b.n	8001dc6 <lock_idle_task+0x72>
		}
		else if(Number_of_attemps==1)
 8001daa:	4ba7      	ldr	r3, [pc, #668]	; (8002048 <lock_idle_task+0x2f4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d109      	bne.n	8001dc6 <lock_idle_task+0x72>
		{
			GFX_DrawString(45, 29, (char*)keypad_password, GREEN);
 8001db2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001db6:	4aa3      	ldr	r2, [pc, #652]	; (8002044 <lock_idle_task+0x2f0>)
 8001db8:	211d      	movs	r1, #29
 8001dba:	202d      	movs	r0, #45	; 0x2d
 8001dbc:	f7fe fcc6 	bl	800074c <GFX_DrawString>
			ssd1331_display(0);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 ff6d 	bl	8002ca0 <ssd1331_display>
		}
	 }
	if(keypad_password_cnt==5)
 8001dc6:	4b9e      	ldr	r3, [pc, #632]	; (8002040 <lock_idle_task+0x2ec>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	f040 8132 	bne.w	8002034 <lock_idle_task+0x2e0>
	{
		check_keypad=check_password((char*)password, (char*)keypad_password);
 8001dd0:	499c      	ldr	r1, [pc, #624]	; (8002044 <lock_idle_task+0x2f0>)
 8001dd2:	489e      	ldr	r0, [pc, #632]	; (800204c <lock_idle_task+0x2f8>)
 8001dd4:	f7ff ff92 	bl	8001cfc <check_password>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
		if(!check_keypad)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8097 	bne.w	8001f12 <lock_idle_task+0x1be>
		{
			Number_of_attemps--;
 8001de4:	4b98      	ldr	r3, [pc, #608]	; (8002048 <lock_idle_task+0x2f4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b96      	ldr	r3, [pc, #600]	; (8002048 <lock_idle_task+0x2f4>)
 8001dee:	701a      	strb	r2, [r3, #0]
			if(Number_of_attemps==1)
 8001df0:	4b95      	ldr	r3, [pc, #596]	; (8002048 <lock_idle_task+0x2f4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d155      	bne.n	8001ea4 <lock_idle_task+0x150>
			{
				  WS2812B_SetDiodeRGB(0, 0, gamma8(40), 0);
 8001df8:	2028      	movs	r0, #40	; 0x28
 8001dfa:	f001 fd91 	bl	8003920 <gamma8>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	2300      	movs	r3, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f001 fb9c 	bl	8003544 <WS2812B_SetDiodeRGB>
				  WS2812B_SetDiodeRGB(1, 0, gamma8(40), 0);
 8001e0c:	2028      	movs	r0, #40	; 0x28
 8001e0e:	f001 fd87 	bl	8003920 <gamma8>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	2300      	movs	r3, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f001 fb92 	bl	8003544 <WS2812B_SetDiodeRGB>
				  WS2812B_SetDiodeRGB(2, 0, 0, 0);
 8001e20:	2300      	movs	r3, #0
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2002      	movs	r0, #2
 8001e28:	f001 fb8c 	bl	8003544 <WS2812B_SetDiodeRGB>
				  WS2812B_SetDiodeRGB(11, 0, gamma8(40), 0);
 8001e2c:	2028      	movs	r0, #40	; 0x28
 8001e2e:	f001 fd77 	bl	8003920 <gamma8>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	2300      	movs	r3, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	200b      	movs	r0, #11
 8001e3c:	f001 fb82 	bl	8003544 <WS2812B_SetDiodeRGB>
				  WS2812B_SetDiodeRGB(10, 0, 0, 0);
 8001e40:	2300      	movs	r3, #0
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	200a      	movs	r0, #10
 8001e48:	f001 fb7c 	bl	8003544 <WS2812B_SetDiodeRGB>
				  WS2812B_Refresh();
 8001e4c:	f001 fbb6 	bl	80035bc <WS2812B_Refresh>
				  keypad_password_cnt=0;
 8001e50:	4b7b      	ldr	r3, [pc, #492]	; (8002040 <lock_idle_task+0x2ec>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
				  GFX_DrawString(0, 19, "*****", RED);
 8001e56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e5a:	4a7d      	ldr	r2, [pc, #500]	; (8002050 <lock_idle_task+0x2fc>)
 8001e5c:	2113      	movs	r1, #19
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7fe fc74 	bl	800074c <GFX_DrawString>
				  GFX_DrawString(0, 29, "*****", GREEN);
 8001e64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e68:	4a79      	ldr	r2, [pc, #484]	; (8002050 <lock_idle_task+0x2fc>)
 8001e6a:	211d      	movs	r1, #29
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7fe fc6d 	bl	800074c <GFX_DrawString>
				  GFX_DrawString(45, 19, (char*)keypad_password, RED);
 8001e72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e76:	4a73      	ldr	r2, [pc, #460]	; (8002044 <lock_idle_task+0x2f0>)
 8001e78:	2113      	movs	r1, #19
 8001e7a:	202d      	movs	r0, #45	; 0x2d
 8001e7c:	f7fe fc66 	bl	800074c <GFX_DrawString>
				  for(int i=0;i<5;i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e007      	b.n	8001e96 <lock_idle_task+0x142>
				  {
					  keypad_password[i]=0;
 8001e86:	4a6f      	ldr	r2, [pc, #444]	; (8002044 <lock_idle_task+0x2f0>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
				  for(int i=0;i<5;i++)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	ddf4      	ble.n	8001e86 <lock_idle_task+0x132>
				  }
				  ssd1331_display(0);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 feff 	bl	8002ca0 <ssd1331_display>
				HAL_Delay(100);
			}
			lock_state=lock_keypad_ok;
		}
	}
}
 8001ea2:	e0c7      	b.n	8002034 <lock_idle_task+0x2e0>
				delay=150;
 8001ea4:	4b6b      	ldr	r3, [pc, #428]	; (8002054 <lock_idle_task+0x300>)
 8001ea6:	2296      	movs	r2, #150	; 0x96
 8001ea8:	801a      	strh	r2, [r3, #0]
				lock_state=lock_error;
 8001eaa:	4b6b      	ldr	r3, [pc, #428]	; (8002058 <lock_idle_task+0x304>)
 8001eac:	2203      	movs	r2, #3
 8001eae:	701a      	strb	r2, [r3, #0]
				GFX_DrawString(0, 29, "*****", RED);
 8001eb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001eb4:	4a66      	ldr	r2, [pc, #408]	; (8002050 <lock_idle_task+0x2fc>)
 8001eb6:	211d      	movs	r1, #29
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7fe fc47 	bl	800074c <GFX_DrawString>
				GFX_DrawString(45, 29, (char*)keypad_password, RED);
 8001ebe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ec2:	4a60      	ldr	r2, [pc, #384]	; (8002044 <lock_idle_task+0x2f0>)
 8001ec4:	211d      	movs	r1, #29
 8001ec6:	202d      	movs	r0, #45	; 0x2d
 8001ec8:	f7fe fc40 	bl	800074c <GFX_DrawString>
				EF_PutString((uint8_t*)"ERROR!!", sizeof("ERROR!!"), 0, 49, RED, 0, BLACK);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2331      	movs	r3, #49	; 0x31
 8001edc:	2200      	movs	r2, #0
 8001ede:	2108      	movs	r1, #8
 8001ee0:	485e      	ldr	r0, [pc, #376]	; (800205c <lock_idle_task+0x308>)
 8001ee2:	f7fe ff1f 	bl	8000d24 <EF_PutString>
				EF_PutString((uint8_t*)"password:",sizeof("password:"), 0, 0, RED, 0, BLACK);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9302      	str	r3, [sp, #8]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	210a      	movs	r1, #10
 8001efa:	4859      	ldr	r0, [pc, #356]	; (8002060 <lock_idle_task+0x30c>)
 8001efc:	f7fe ff12 	bl	8000d24 <EF_PutString>
				ssd1331_display(0);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 fecd 	bl	8002ca0 <ssd1331_display>
				TIM2->PSC=999;
 8001f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f10:	e090      	b.n	8002034 <lock_idle_task+0x2e0>
			WS2812B_SetDiodeRGB(9, 0, gamma8(40), 0);
 8001f12:	2028      	movs	r0, #40	; 0x28
 8001f14:	f001 fd04 	bl	8003920 <gamma8>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2009      	movs	r0, #9
 8001f22:	f001 fb0f 	bl	8003544 <WS2812B_SetDiodeRGB>
			WS2812B_SetDiodeRGB(10, 0, gamma8(40), 0);
 8001f26:	2028      	movs	r0, #40	; 0x28
 8001f28:	f001 fcfa 	bl	8003920 <gamma8>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	200a      	movs	r0, #10
 8001f36:	f001 fb05 	bl	8003544 <WS2812B_SetDiodeRGB>
			WS2812B_SetDiodeRGB(3, 0, gamma8(40), 0);
 8001f3a:	2028      	movs	r0, #40	; 0x28
 8001f3c:	f001 fcf0 	bl	8003920 <gamma8>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f001 fafb 	bl	8003544 <WS2812B_SetDiodeRGB>
			WS2812B_SetDiodeRGB(2, 0, gamma8(40), 0);
 8001f4e:	2028      	movs	r0, #40	; 0x28
 8001f50:	f001 fce6 	bl	8003920 <gamma8>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f001 faf1 	bl	8003544 <WS2812B_SetDiodeRGB>
			WS2812B_Refresh();
 8001f62:	f001 fb2b 	bl	80035bc <WS2812B_Refresh>
			if(Number_of_attemps==2)
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <lock_idle_task+0x2f4>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d10d      	bne.n	8001f8a <lock_idle_task+0x236>
				GFX_DrawString(0, 19, "*****", BLACK);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	4a37      	ldr	r2, [pc, #220]	; (8002050 <lock_idle_task+0x2fc>)
 8001f72:	2113      	movs	r1, #19
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7fe fbe9 	bl	800074c <GFX_DrawString>
				GFX_DrawString(0, 19, (char*)password, GREEN);
 8001f7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f7e:	4a33      	ldr	r2, [pc, #204]	; (800204c <lock_idle_task+0x2f8>)
 8001f80:	2113      	movs	r1, #19
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7fe fbe2 	bl	800074c <GFX_DrawString>
 8001f88:	e010      	b.n	8001fac <lock_idle_task+0x258>
			else if(Number_of_attemps==1)
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <lock_idle_task+0x2f4>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10c      	bne.n	8001fac <lock_idle_task+0x258>
				GFX_DrawString(0, 29, "*****", BLACK);
 8001f92:	2300      	movs	r3, #0
 8001f94:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <lock_idle_task+0x2fc>)
 8001f96:	211d      	movs	r1, #29
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7fe fbd7 	bl	800074c <GFX_DrawString>
				GFX_DrawString(0, 29, (char*)password, GREEN);
 8001f9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fa2:	4a2a      	ldr	r2, [pc, #168]	; (800204c <lock_idle_task+0x2f8>)
 8001fa4:	211d      	movs	r1, #29
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7fe fbd0 	bl	800074c <GFX_DrawString>
			for(int i=0;i<10;i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	e03a      	b.n	8002028 <lock_idle_task+0x2d4>
				if(!(i%2))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d115      	bne.n	8001fe8 <lock_idle_task+0x294>
					if(Number_of_attemps==2)
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <lock_idle_task+0x2f4>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d106      	bne.n	8001fd2 <lock_idle_task+0x27e>
						GFX_DrawString(45, 19, (char*)keypad_password, BLACK);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <lock_idle_task+0x2f0>)
 8001fc8:	2113      	movs	r1, #19
 8001fca:	202d      	movs	r0, #45	; 0x2d
 8001fcc:	f7fe fbbe 	bl	800074c <GFX_DrawString>
 8001fd0:	e021      	b.n	8002016 <lock_idle_task+0x2c2>
					else if(Number_of_attemps==1)
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <lock_idle_task+0x2f4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d11d      	bne.n	8002016 <lock_idle_task+0x2c2>
						GFX_DrawString(45, 29, (char*)keypad_password, BLACK);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <lock_idle_task+0x2f0>)
 8001fde:	211d      	movs	r1, #29
 8001fe0:	202d      	movs	r0, #45	; 0x2d
 8001fe2:	f7fe fbb3 	bl	800074c <GFX_DrawString>
 8001fe6:	e016      	b.n	8002016 <lock_idle_task+0x2c2>
					if(Number_of_attemps==2)
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <lock_idle_task+0x2f4>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d107      	bne.n	8002000 <lock_idle_task+0x2ac>
						GFX_DrawString(45, 19, (char*)keypad_password, GREEN);
 8001ff0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <lock_idle_task+0x2f0>)
 8001ff6:	2113      	movs	r1, #19
 8001ff8:	202d      	movs	r0, #45	; 0x2d
 8001ffa:	f7fe fba7 	bl	800074c <GFX_DrawString>
 8001ffe:	e00a      	b.n	8002016 <lock_idle_task+0x2c2>
					else if(Number_of_attemps==1)
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <lock_idle_task+0x2f4>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <lock_idle_task+0x2c2>
						GFX_DrawString(45, 29, (char*)keypad_password, GREEN);
 8002008:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <lock_idle_task+0x2f0>)
 800200e:	211d      	movs	r1, #29
 8002010:	202d      	movs	r0, #45	; 0x2d
 8002012:	f7fe fb9b 	bl	800074c <GFX_DrawString>
				ssd1331_display(0);
 8002016:	2000      	movs	r0, #0
 8002018:	f000 fe42 	bl	8002ca0 <ssd1331_display>
				HAL_Delay(100);
 800201c:	2064      	movs	r0, #100	; 0x64
 800201e:	f001 fd2b 	bl	8003a78 <HAL_Delay>
			for(int i=0;i<10;i++)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b09      	cmp	r3, #9
 800202c:	ddc1      	ble.n	8001fb2 <lock_idle_task+0x25e>
			lock_state=lock_keypad_ok;
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <lock_idle_task+0x304>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	20002e48 	.word	0x20002e48
 8002040:	200000b8 	.word	0x200000b8
 8002044:	200001b4 	.word	0x200001b4
 8002048:	20000025 	.word	0x20000025
 800204c:	20000018 	.word	0x20000018
 8002050:	0800a818 	.word	0x0800a818
 8002054:	20000026 	.word	0x20000026
 8002058:	20000014 	.word	0x20000014
 800205c:	0800a820 	.word	0x0800a820
 8002060:	0800a80c 	.word	0x0800a80c

08002064 <lock_error_task>:
void lock_error_task()
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	keypad_password_cnt++;
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <lock_error_task+0x1b8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a6b      	ldr	r2, [pc, #428]	; (800221c <lock_error_task+0x1b8>)
 8002070:	6013      	str	r3, [r2, #0]
	if(keypad_password_cnt%2)
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <lock_error_task+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d066      	beq.n	800214c <lock_error_task+0xe8>
	{
		WS2812B_SetDiodeRGB(9, gamma8(40), 0, 0);
 800207e:	2028      	movs	r0, #40	; 0x28
 8002080:	f001 fc4e 	bl	8003920 <gamma8>
 8002084:	4603      	mov	r3, r0
 8002086:	4619      	mov	r1, r3
 8002088:	2300      	movs	r3, #0
 800208a:	2200      	movs	r2, #0
 800208c:	2009      	movs	r0, #9
 800208e:	f001 fa59 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(10, gamma8(40), 0, 0);
 8002092:	2028      	movs	r0, #40	; 0x28
 8002094:	f001 fc44 	bl	8003920 <gamma8>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	2300      	movs	r3, #0
 800209e:	2200      	movs	r2, #0
 80020a0:	200a      	movs	r0, #10
 80020a2:	f001 fa4f 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(11, gamma8(40), 0, 0);
 80020a6:	2028      	movs	r0, #40	; 0x28
 80020a8:	f001 fc3a 	bl	8003920 <gamma8>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4619      	mov	r1, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	2200      	movs	r2, #0
 80020b4:	200b      	movs	r0, #11
 80020b6:	f001 fa45 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(0, gamma8(40), 0, 0);
 80020ba:	2028      	movs	r0, #40	; 0x28
 80020bc:	f001 fc30 	bl	8003920 <gamma8>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4619      	mov	r1, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	2200      	movs	r2, #0
 80020c8:	2000      	movs	r0, #0
 80020ca:	f001 fa3b 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(1, gamma8(40), 0, 0);
 80020ce:	2028      	movs	r0, #40	; 0x28
 80020d0:	f001 fc26 	bl	8003920 <gamma8>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4619      	mov	r1, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	2200      	movs	r2, #0
 80020dc:	2001      	movs	r0, #1
 80020de:	f001 fa31 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(2, gamma8(40), 0, 0);
 80020e2:	2028      	movs	r0, #40	; 0x28
 80020e4:	f001 fc1c 	bl	8003920 <gamma8>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4619      	mov	r1, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	2200      	movs	r2, #0
 80020f0:	2002      	movs	r0, #2
 80020f2:	f001 fa27 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(3, gamma8(40), 0, 0);
 80020f6:	2028      	movs	r0, #40	; 0x28
 80020f8:	f001 fc12 	bl	8003920 <gamma8>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	2300      	movs	r3, #0
 8002102:	2200      	movs	r2, #0
 8002104:	2003      	movs	r0, #3
 8002106:	f001 fa1d 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(4, 0, 0, 0);
 800210a:	2300      	movs	r3, #0
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2004      	movs	r0, #4
 8002112:	f001 fa17 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(5, 0, 0, 0);
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	2005      	movs	r0, #5
 800211e:	f001 fa11 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(6, 0, 0, 0);
 8002122:	2300      	movs	r3, #0
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2006      	movs	r0, #6
 800212a:	f001 fa0b 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(7, 0, 0, 0);
 800212e:	2300      	movs	r3, #0
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	2007      	movs	r0, #7
 8002136:	f001 fa05 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(8, 0, 0, 0);
 800213a:	2300      	movs	r3, #0
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2008      	movs	r0, #8
 8002142:	f001 f9ff 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_Refresh();
 8002146:	f001 fa39 	bl	80035bc <WS2812B_Refresh>
		WS2812B_SetDiodeRGB(0, 0, 0, 0);
		WS2812B_SetDiodeRGB(11, 0, 0, 0);
		WS2812B_SetDiodeRGB(10, 0, 0, 0);
		WS2812B_Refresh();
	}
}
 800214a:	e065      	b.n	8002218 <lock_error_task+0x1b4>
		WS2812B_SetDiodeRGB(4, gamma8(40), 0, 0);
 800214c:	2028      	movs	r0, #40	; 0x28
 800214e:	f001 fbe7 	bl	8003920 <gamma8>
 8002152:	4603      	mov	r3, r0
 8002154:	4619      	mov	r1, r3
 8002156:	2300      	movs	r3, #0
 8002158:	2200      	movs	r2, #0
 800215a:	2004      	movs	r0, #4
 800215c:	f001 f9f2 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(5, gamma8(40), 0, 0);
 8002160:	2028      	movs	r0, #40	; 0x28
 8002162:	f001 fbdd 	bl	8003920 <gamma8>
 8002166:	4603      	mov	r3, r0
 8002168:	4619      	mov	r1, r3
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	2005      	movs	r0, #5
 8002170:	f001 f9e8 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(6, gamma8(40), 0, 0);
 8002174:	2028      	movs	r0, #40	; 0x28
 8002176:	f001 fbd3 	bl	8003920 <gamma8>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	2300      	movs	r3, #0
 8002180:	2200      	movs	r2, #0
 8002182:	2006      	movs	r0, #6
 8002184:	f001 f9de 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(7, gamma8(40), 0, 0);
 8002188:	2028      	movs	r0, #40	; 0x28
 800218a:	f001 fbc9 	bl	8003920 <gamma8>
 800218e:	4603      	mov	r3, r0
 8002190:	4619      	mov	r1, r3
 8002192:	2300      	movs	r3, #0
 8002194:	2200      	movs	r2, #0
 8002196:	2007      	movs	r0, #7
 8002198:	f001 f9d4 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(8, gamma8(40), 0, 0);
 800219c:	2028      	movs	r0, #40	; 0x28
 800219e:	f001 fbbf 	bl	8003920 <gamma8>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4619      	mov	r1, r3
 80021a6:	2300      	movs	r3, #0
 80021a8:	2200      	movs	r2, #0
 80021aa:	2008      	movs	r0, #8
 80021ac:	f001 f9ca 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(9, gamma8(40), 0, 0);
 80021b0:	2028      	movs	r0, #40	; 0x28
 80021b2:	f001 fbb5 	bl	8003920 <gamma8>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	2200      	movs	r2, #0
 80021be:	2009      	movs	r0, #9
 80021c0:	f001 f9c0 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(3, gamma8(40), 0, 0);
 80021c4:	2028      	movs	r0, #40	; 0x28
 80021c6:	f001 fbab 	bl	8003920 <gamma8>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4619      	mov	r1, r3
 80021ce:	2300      	movs	r3, #0
 80021d0:	2200      	movs	r2, #0
 80021d2:	2003      	movs	r0, #3
 80021d4:	f001 f9b6 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(2, 0, 0, 0);
 80021d8:	2300      	movs	r3, #0
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2002      	movs	r0, #2
 80021e0:	f001 f9b0 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(1, 0, 0, 0);
 80021e4:	2300      	movs	r3, #0
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2001      	movs	r0, #1
 80021ec:	f001 f9aa 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(0, 0, 0, 0);
 80021f0:	2300      	movs	r3, #0
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	2000      	movs	r0, #0
 80021f8:	f001 f9a4 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(11, 0, 0, 0);
 80021fc:	2300      	movs	r3, #0
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	200b      	movs	r0, #11
 8002204:	f001 f99e 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_SetDiodeRGB(10, 0, 0, 0);
 8002208:	2300      	movs	r3, #0
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	200a      	movs	r0, #10
 8002210:	f001 f998 	bl	8003544 <WS2812B_SetDiodeRGB>
		WS2812B_Refresh();
 8002214:	f001 f9d2 	bl	80035bc <WS2812B_Refresh>
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200000b8 	.word	0x200000b8

08002220 <lock_keypad_ok_task>:
void lock_keypad_ok_task()
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b08b      	sub	sp, #44	; 0x2c
 8002224:	af04      	add	r7, sp, #16
	uint8_t check_rfid=0;
 8002226:	2300      	movs	r3, #0
 8002228:	74fb      	strb	r3, [r7, #19]
	u_char status, cardstr[MAX_LEN+1];
	status = MFRC522_Request(PICC_REQIDL, cardstr);
 800222a:	463b      	mov	r3, r7
 800222c:	4619      	mov	r1, r3
 800222e:	2026      	movs	r0, #38	; 0x26
 8002230:	f7fe fecd 	bl	8000fce <MFRC522_Request>
 8002234:	4603      	mov	r3, r0
 8002236:	74bb      	strb	r3, [r7, #18]
	if(Number_of_attemps==2)
 8002238:	4baf      	ldr	r3, [pc, #700]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d117      	bne.n	8002270 <lock_keypad_ok_task+0x50>
	{
		EF_PutString((uint8_t*)"rfid:",sizeof("rfid:"), 0, 27, GREEN, 0, BLACK);
 8002240:	2300      	movs	r3, #0
 8002242:	9302      	str	r3, [sp, #8]
 8002244:	2300      	movs	r3, #0
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	231b      	movs	r3, #27
 8002250:	2200      	movs	r2, #0
 8002252:	2106      	movs	r1, #6
 8002254:	48a9      	ldr	r0, [pc, #676]	; (80024fc <lock_keypad_ok_task+0x2dc>)
 8002256:	f7fe fd65 	bl	8000d24 <EF_PutString>
		GFX_DrawString(0, 43, "*****", GREEN);
 800225a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800225e:	4aa8      	ldr	r2, [pc, #672]	; (8002500 <lock_keypad_ok_task+0x2e0>)
 8002260:	212b      	movs	r1, #43	; 0x2b
 8002262:	2000      	movs	r0, #0
 8002264:	f7fe fa72 	bl	800074c <GFX_DrawString>
		ssd1331_display(0);
 8002268:	2000      	movs	r0, #0
 800226a:	f000 fd19 	bl	8002ca0 <ssd1331_display>
 800226e:	e01a      	b.n	80022a6 <lock_keypad_ok_task+0x86>
	}
	else if(Number_of_attemps)
 8002270:	4ba1      	ldr	r3, [pc, #644]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d016      	beq.n	80022a6 <lock_keypad_ok_task+0x86>
	{
		EF_PutString((uint8_t*)"rfid:",sizeof("rfid:"), 0, 37, GREEN, 0, BLACK);
 8002278:	2300      	movs	r3, #0
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2300      	movs	r3, #0
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2325      	movs	r3, #37	; 0x25
 8002288:	2200      	movs	r2, #0
 800228a:	2106      	movs	r1, #6
 800228c:	489b      	ldr	r0, [pc, #620]	; (80024fc <lock_keypad_ok_task+0x2dc>)
 800228e:	f7fe fd49 	bl	8000d24 <EF_PutString>
		GFX_DrawString(0, 53, "*****", GREEN);
 8002292:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002296:	4a9a      	ldr	r2, [pc, #616]	; (8002500 <lock_keypad_ok_task+0x2e0>)
 8002298:	2135      	movs	r1, #53	; 0x35
 800229a:	2000      	movs	r0, #0
 800229c:	f7fe fa56 	bl	800074c <GFX_DrawString>
		ssd1331_display(0);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f000 fcfd 	bl	8002ca0 <ssd1331_display>
	}
	if(status == MI_OK)
 80022a6:	7cbb      	ldrb	r3, [r7, #18]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 8120 	bne.w	80024ee <lock_keypad_ok_task+0x2ce>
	{
		status = MFRC522_Anticoll(cardstr);
 80022ae:	463b      	mov	r3, r7
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe ff7a 	bl	80011aa <MFRC522_Anticoll>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74bb      	strb	r3, [r7, #18]
		if(status==MI_OK)
 80022ba:	7cbb      	ldrb	r3, [r7, #18]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8116 	bne.w	80024ee <lock_keypad_ok_task+0x2ce>
		{
			UID[0] = cardstr[0];
 80022c2:	783a      	ldrb	r2, [r7, #0]
 80022c4:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 80022c6:	701a      	strb	r2, [r3, #0]
			UID[1] = cardstr[1];
 80022c8:	787a      	ldrb	r2, [r7, #1]
 80022ca:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 80022cc:	705a      	strb	r2, [r3, #1]
			UID[2] = cardstr[2];
 80022ce:	78ba      	ldrb	r2, [r7, #2]
 80022d0:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 80022d2:	709a      	strb	r2, [r3, #2]
			UID[3] = cardstr[3];
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 80022d8:	70da      	strb	r2, [r3, #3]
			UID[4] = cardstr[4];
 80022da:	793a      	ldrb	r2, [r7, #4]
 80022dc:	4b89      	ldr	r3, [pc, #548]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 80022de:	711a      	strb	r2, [r3, #4]
			check_rfid=check_password((char *)RFID_password, (char*)UID);
 80022e0:	4988      	ldr	r1, [pc, #544]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 80022e2:	4889      	ldr	r0, [pc, #548]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80022e4:	f7ff fd0a 	bl	8001cfc <check_password>
 80022e8:	4603      	mov	r3, r0
 80022ea:	74fb      	strb	r3, [r7, #19]
			if(!check_rfid)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d14d      	bne.n	800238e <lock_keypad_ok_task+0x16e>
			{
				delay=150;
 80022f2:	4b86      	ldr	r3, [pc, #536]	; (800250c <lock_keypad_ok_task+0x2ec>)
 80022f4:	2296      	movs	r2, #150	; 0x96
 80022f6:	801a      	strh	r2, [r3, #0]
				lock_state=lock_error;
 80022f8:	4b85      	ldr	r3, [pc, #532]	; (8002510 <lock_keypad_ok_task+0x2f0>)
 80022fa:	2203      	movs	r2, #3
 80022fc:	701a      	strb	r2, [r3, #0]
				ssd1331_clear();
 80022fe:	f000 fca1 	bl	8002c44 <ssd1331_clear>
				EF_PutString((uint8_t*)"rfid:",sizeof("rfid:"), 0, 0, RED, 0, BLACK);
 8002302:	2300      	movs	r3, #0
 8002304:	9302      	str	r3, [sp, #8]
 8002306:	2300      	movs	r3, #0
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2300      	movs	r3, #0
 8002312:	2200      	movs	r2, #0
 8002314:	2106      	movs	r1, #6
 8002316:	4879      	ldr	r0, [pc, #484]	; (80024fc <lock_keypad_ok_task+0x2dc>)
 8002318:	f7fe fd04 	bl	8000d24 <EF_PutString>
				sprintf(oled_data,"%x %x %x %x %x",UID[0],UID[1],UID[2],UID[3],UID[4]);
 800231c:	4b79      	ldr	r3, [pc, #484]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	4b77      	ldr	r3, [pc, #476]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461c      	mov	r4, r3
 800232c:	4b75      	ldr	r3, [pc, #468]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 800232e:	789b      	ldrb	r3, [r3, #2]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	4b73      	ldr	r3, [pc, #460]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 8002336:	78db      	ldrb	r3, [r3, #3]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	4b71      	ldr	r3, [pc, #452]	; (8002504 <lock_keypad_ok_task+0x2e4>)
 800233e:	791b      	ldrb	r3, [r3, #4]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	9101      	str	r1, [sp, #4]
 8002346:	9200      	str	r2, [sp, #0]
 8002348:	4623      	mov	r3, r4
 800234a:	4602      	mov	r2, r0
 800234c:	4971      	ldr	r1, [pc, #452]	; (8002514 <lock_keypad_ok_task+0x2f4>)
 800234e:	4872      	ldr	r0, [pc, #456]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 8002350:	f006 ff0e 	bl	8009170 <siprintf>
				GFX_DrawString(0, 20, oled_data, RED);
 8002354:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002358:	4a6f      	ldr	r2, [pc, #444]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 800235a:	2114      	movs	r1, #20
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe f9f5 	bl	800074c <GFX_DrawString>
				EF_PutString((uint8_t*)"ERROR!!",sizeof("ERROR!!"), 0, 30, RED, 0, BLACK);
 8002362:	2300      	movs	r3, #0
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	2300      	movs	r3, #0
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	231e      	movs	r3, #30
 8002372:	2200      	movs	r2, #0
 8002374:	2108      	movs	r1, #8
 8002376:	4869      	ldr	r0, [pc, #420]	; (800251c <lock_keypad_ok_task+0x2fc>)
 8002378:	f7fe fcd4 	bl	8000d24 <EF_PutString>
				ssd1331_display(0);
 800237c:	2000      	movs	r0, #0
 800237e:	f000 fc8f 	bl	8002ca0 <ssd1331_display>
				TIM2->PSC=999;
 8002382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
				lock_state=lock_ok;
			}
		}
	}

}
 800238c:	e0af      	b.n	80024ee <lock_keypad_ok_task+0x2ce>
				if(Number_of_attemps==2)
 800238e:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d124      	bne.n	80023e0 <lock_keypad_ok_task+0x1c0>
					GFX_DrawString(0, 43, "*****", BLACK);
 8002396:	2300      	movs	r3, #0
 8002398:	4a59      	ldr	r2, [pc, #356]	; (8002500 <lock_keypad_ok_task+0x2e0>)
 800239a:	212b      	movs	r1, #43	; 0x2b
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe f9d5 	bl	800074c <GFX_DrawString>
					sprintf(oled_data,"%x %x %x %x %x",RFID_password[0],RFID_password[1],RFID_password[2],RFID_password[3],RFID_password[4]);
 80023a2:	4b59      	ldr	r3, [pc, #356]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	4b57      	ldr	r3, [pc, #348]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	461c      	mov	r4, r3
 80023ae:	4b56      	ldr	r3, [pc, #344]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80023b0:	789b      	ldrb	r3, [r3, #2]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b54      	ldr	r3, [pc, #336]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80023b6:	78db      	ldrb	r3, [r3, #3]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4b53      	ldr	r3, [pc, #332]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	9101      	str	r1, [sp, #4]
 80023c2:	9200      	str	r2, [sp, #0]
 80023c4:	4623      	mov	r3, r4
 80023c6:	4602      	mov	r2, r0
 80023c8:	4952      	ldr	r1, [pc, #328]	; (8002514 <lock_keypad_ok_task+0x2f4>)
 80023ca:	4853      	ldr	r0, [pc, #332]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 80023cc:	f006 fed0 	bl	8009170 <siprintf>
					GFX_DrawString(0, 43, oled_data, GREEN);
 80023d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023d4:	4a50      	ldr	r2, [pc, #320]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 80023d6:	212b      	movs	r1, #43	; 0x2b
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe f9b7 	bl	800074c <GFX_DrawString>
 80023de:	e027      	b.n	8002430 <lock_keypad_ok_task+0x210>
				else if(Number_of_attemps==1)
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d123      	bne.n	8002430 <lock_keypad_ok_task+0x210>
					GFX_DrawString(0, 53, "*****", BLACK);
 80023e8:	2300      	movs	r3, #0
 80023ea:	4a45      	ldr	r2, [pc, #276]	; (8002500 <lock_keypad_ok_task+0x2e0>)
 80023ec:	2135      	movs	r1, #53	; 0x35
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe f9ac 	bl	800074c <GFX_DrawString>
					sprintf(oled_data,"%x %x %x %x %x",RFID_password[0],RFID_password[1],RFID_password[2],RFID_password[3],RFID_password[4]);
 80023f4:	4b44      	ldr	r3, [pc, #272]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	4b43      	ldr	r3, [pc, #268]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	461c      	mov	r4, r3
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	461a      	mov	r2, r3
 8002406:	4b40      	ldr	r3, [pc, #256]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 8002408:	78db      	ldrb	r3, [r3, #3]
 800240a:	4619      	mov	r1, r3
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <lock_keypad_ok_task+0x2e8>)
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	9101      	str	r1, [sp, #4]
 8002414:	9200      	str	r2, [sp, #0]
 8002416:	4623      	mov	r3, r4
 8002418:	4602      	mov	r2, r0
 800241a:	493e      	ldr	r1, [pc, #248]	; (8002514 <lock_keypad_ok_task+0x2f4>)
 800241c:	483e      	ldr	r0, [pc, #248]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 800241e:	f006 fea7 	bl	8009170 <siprintf>
					GFX_DrawString(0, 53, oled_data, GREEN);
 8002422:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002426:	4a3c      	ldr	r2, [pc, #240]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 8002428:	2135      	movs	r1, #53	; 0x35
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe f98e 	bl	800074c <GFX_DrawString>
				HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_4);
 8002430:	210c      	movs	r1, #12
 8002432:	483b      	ldr	r0, [pc, #236]	; (8002520 <lock_keypad_ok_task+0x300>)
 8002434:	f004 fe9a 	bl	800716c <HAL_TIM_PWM_Stop_DMA>
				TIM2->CCR4=0;
 8002438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800243c:	2200      	movs	r2, #0
 800243e:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, led_data, 256);
 8002440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002444:	4a37      	ldr	r2, [pc, #220]	; (8002524 <lock_keypad_ok_task+0x304>)
 8002446:	2100      	movs	r1, #0
 8002448:	4835      	ldr	r0, [pc, #212]	; (8002520 <lock_keypad_ok_task+0x300>)
 800244a:	f004 fcdf 	bl	8006e0c <HAL_TIM_PWM_Start_DMA>
				for(int i=0;i<10;i++)
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e03a      	b.n	80024ca <lock_keypad_ok_task+0x2aa>
					if(!(i%2))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d115      	bne.n	800248a <lock_keypad_ok_task+0x26a>
						if(Number_of_attemps==2)
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d106      	bne.n	8002474 <lock_keypad_ok_task+0x254>
							GFX_DrawString(0, 43, oled_data, BLACK);
 8002466:	2300      	movs	r3, #0
 8002468:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 800246a:	212b      	movs	r1, #43	; 0x2b
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe f96d 	bl	800074c <GFX_DrawString>
 8002472:	e021      	b.n	80024b8 <lock_keypad_ok_task+0x298>
						else if(Number_of_attemps==1)
 8002474:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d11d      	bne.n	80024b8 <lock_keypad_ok_task+0x298>
							GFX_DrawString(0, 53, oled_data, BLACK);
 800247c:	2300      	movs	r3, #0
 800247e:	4a26      	ldr	r2, [pc, #152]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 8002480:	2135      	movs	r1, #53	; 0x35
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe f962 	bl	800074c <GFX_DrawString>
 8002488:	e016      	b.n	80024b8 <lock_keypad_ok_task+0x298>
						if(Number_of_attemps==2)
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d107      	bne.n	80024a2 <lock_keypad_ok_task+0x282>
							GFX_DrawString(0, 43, oled_data, GREEN);
 8002492:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 8002498:	212b      	movs	r1, #43	; 0x2b
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe f956 	bl	800074c <GFX_DrawString>
 80024a0:	e00a      	b.n	80024b8 <lock_keypad_ok_task+0x298>
						else if(Number_of_attemps==1)
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <lock_keypad_ok_task+0x2d8>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d106      	bne.n	80024b8 <lock_keypad_ok_task+0x298>
							GFX_DrawString(0, 53, oled_data, GREEN);
 80024aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024ae:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <lock_keypad_ok_task+0x2f8>)
 80024b0:	2135      	movs	r1, #53	; 0x35
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7fe f94a 	bl	800074c <GFX_DrawString>
					HAL_Delay(100);
 80024b8:	2064      	movs	r0, #100	; 0x64
 80024ba:	f001 fadd 	bl	8003a78 <HAL_Delay>
					ssd1331_display(0);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 fbee 	bl	8002ca0 <ssd1331_display>
				for(int i=0;i<10;i++)
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b09      	cmp	r3, #9
 80024ce:	ddc1      	ble.n	8002454 <lock_keypad_ok_task+0x234>
				delay=25;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <lock_keypad_ok_task+0x2ec>)
 80024d2:	2219      	movs	r2, #25
 80024d4:	801a      	strh	r2, [r3, #0]
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*)fft_samples, 1024);
 80024d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024da:	4913      	ldr	r1, [pc, #76]	; (8002528 <lock_keypad_ok_task+0x308>)
 80024dc:	4813      	ldr	r0, [pc, #76]	; (800252c <lock_keypad_ok_task+0x30c>)
 80024de:	f001 fc73 	bl	8003dc8 <HAL_ADC_Start_DMA>
				HAL_TIM_Base_Start(&htim3);
 80024e2:	4813      	ldr	r0, [pc, #76]	; (8002530 <lock_keypad_ok_task+0x310>)
 80024e4:	f004 fbde 	bl	8006ca4 <HAL_TIM_Base_Start>
				lock_state=lock_ok;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <lock_keypad_ok_task+0x2f0>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000025 	.word	0x20000025
 80024fc:	0800a828 	.word	0x0800a828
 8002500:	0800a818 	.word	0x0800a818
 8002504:	20002e40 	.word	0x20002e40
 8002508:	20000020 	.word	0x20000020
 800250c:	20000026 	.word	0x20000026
 8002510:	20000014 	.word	0x20000014
 8002514:	0800a830 	.word	0x0800a830
 8002518:	20002ea8 	.word	0x20002ea8
 800251c:	0800a820 	.word	0x0800a820
 8002520:	20009130 	.word	0x20009130
 8002524:	20002a3c 	.word	0x20002a3c
 8002528:	200001bc 	.word	0x200001bc
 800252c:	2000010c 	.word	0x2000010c
 8002530:	200090e8 	.word	0x200090e8

08002534 <lock_ok_task>:
void lock_ok_task()
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b087      	sub	sp, #28
 8002538:	af02      	add	r7, sp, #8
	ws2812_clear();
 800253a:	f000 ffeb 	bl	8003514 <ws2812_clear>
	keypad_password_cnt++;
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <lock_ok_task+0x11c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	4a42      	ldr	r2, [pc, #264]	; (8002650 <lock_ok_task+0x11c>)
 8002546:	6013      	str	r3, [r2, #0]
	WS2812B_SetDiodeRGB(keypad_password_cnt%12, 0, gamma8(100), 0);
 8002548:	4b41      	ldr	r3, [pc, #260]	; (8002650 <lock_ok_task+0x11c>)
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	4b41      	ldr	r3, [pc, #260]	; (8002654 <lock_ok_task+0x120>)
 800254e:	fba3 2301 	umull	r2, r3, r3, r1
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	1aca      	subs	r2, r1, r3
 800255e:	b214      	sxth	r4, r2
 8002560:	2064      	movs	r0, #100	; 0x64
 8002562:	f001 f9dd 	bl	8003920 <gamma8>
 8002566:	4603      	mov	r3, r0
 8002568:	461a      	mov	r2, r3
 800256a:	2300      	movs	r3, #0
 800256c:	2100      	movs	r1, #0
 800256e:	4620      	mov	r0, r4
 8002570:	f000 ffe8 	bl	8003544 <WS2812B_SetDiodeRGB>
	WS2812B_SetDiodeRGB((keypad_password_cnt+6)%12, 0, gamma8(100), 0);
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <lock_ok_task+0x11c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	1d99      	adds	r1, r3, #6
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <lock_ok_task+0x120>)
 800257c:	fba3 2301 	umull	r2, r3, r3, r1
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	1aca      	subs	r2, r1, r3
 800258c:	b214      	sxth	r4, r2
 800258e:	2064      	movs	r0, #100	; 0x64
 8002590:	f001 f9c6 	bl	8003920 <gamma8>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	2300      	movs	r3, #0
 800259a:	2100      	movs	r1, #0
 800259c:	4620      	mov	r0, r4
 800259e:	f000 ffd1 	bl	8003544 <WS2812B_SetDiodeRGB>
	WS2812B_Refresh();
 80025a2:	f001 f80b 	bl	80035bc <WS2812B_Refresh>
	if(fft_is_ready==1)
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <lock_ok_task+0x124>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d14b      	bne.n	8002646 <lock_ok_task+0x112>
	{
		for(int i=0;i<1024;i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e010      	b.n	80025d6 <lock_ok_task+0xa2>
		{
			fft_in_buffer[i]=(float)fft_samples[i];
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <lock_ok_task+0x128>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <lock_ok_task+0x12c>)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0;i<1024;i++)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3301      	adds	r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025dc:	dbea      	blt.n	80025b4 <lock_ok_task+0x80>
		}
		fft_is_ready=0;
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <lock_ok_task+0x124>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
		CalculateFFT();
 80025e4:	f000 f878 	bl	80026d8 <CalculateFFT>
		temlate_to_buffer();
 80025e8:	f000 fab4 	bl	8002b54 <temlate_to_buffer>
	    analizator_GPIO_Port->ODR |= analizator_Pin;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <lock_ok_task+0x130>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <lock_ok_task+0x130>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6153      	str	r3, [r2, #20]
		for(int i=0;i<96;i++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	e011      	b.n	8002622 <lock_ok_task+0xee>
		{
			int a=63-oled_fft[i];
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <lock_ok_task+0x134>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800260a:	607b      	str	r3, [r7, #4]
			GFX_WriteLine(i, 0, i, a, BLACK);
 800260c:	2300      	movs	r3, #0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	2100      	movs	r1, #0
 8002616:	68b8      	ldr	r0, [r7, #8]
 8002618:	f7fe f8ca 	bl	80007b0 <GFX_WriteLine>
		for(int i=0;i<96;i++)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	3301      	adds	r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b5f      	cmp	r3, #95	; 0x5f
 8002626:	ddea      	ble.n	80025fe <lock_ok_task+0xca>
		}
	    analizator_GPIO_Port->ODR ^=analizator_Pin ;
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <lock_ok_task+0x130>)
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <lock_ok_task+0x130>)
 800262e:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8002632:	6153      	str	r3, [r2, #20]
		ssd1331_display(0);
 8002634:	2000      	movs	r0, #0
 8002636:	f000 fb33 	bl	8002ca0 <ssd1331_display>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)fft_samples, 1024);
 800263a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263e:	4907      	ldr	r1, [pc, #28]	; (800265c <lock_ok_task+0x128>)
 8002640:	480a      	ldr	r0, [pc, #40]	; (800266c <lock_ok_task+0x138>)
 8002642:	f001 fbc1 	bl	8003dc8 <HAL_ADC_Start_DMA>
	}

}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	200000b8 	.word	0x200000b8
 8002654:	aaaaaaab 	.word	0xaaaaaaab
 8002658:	200000c0 	.word	0x200000c0
 800265c:	200001bc 	.word	0x200001bc
 8002660:	200009bc 	.word	0x200009bc
 8002664:	40021000 	.word	0x40021000
 8002668:	200029d4 	.word	0x200029d4
 800266c:	2000010c 	.word	0x2000010c

08002670 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
		fft_cnt++;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_ADC_ConvCpltCallback+0x28>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_ADC_ConvCpltCallback+0x28>)
 8002680:	6013      	str	r3, [r2, #0]
		fft_is_ready=1;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
		int a=rand();
 8002688:	f006 fd32 	bl	80090f0 <rand>
 800268c:	60f8      	str	r0, [r7, #12]
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200000bc 	.word	0x200000bc
 800269c:	200000c0 	.word	0x200000c0

080026a0 <complexABS>:
float complexABS(float real, float compl)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80026aa:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 80026ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026b6:	edd7 7a00 	vldr	s15, [r7]
 80026ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c2:	eeb0 0a67 	vmov.f32	s0, s15
 80026c6:	f007 ff1d 	bl	800a504 <sqrtf>
 80026ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <CalculateFFT>:

void CalculateFFT(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 80026de:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&FFT, fft_in_buffer, fft_out_buffer, 0);
 80026e0:	2300      	movs	r3, #0
 80026e2:	4a3e      	ldr	r2, [pc, #248]	; (80027dc <CalculateFFT+0x104>)
 80026e4:	493e      	ldr	r1, [pc, #248]	; (80027e0 <CalculateFFT+0x108>)
 80026e6:	483f      	ldr	r0, [pc, #252]	; (80027e4 <CalculateFFT+0x10c>)
 80026e8:	f005 fd80 	bl	80081ec <arm_rfft_fast_f32>

	int Freqs[512];
	int FreqPoint = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	int Offset = 45; // variable noise floor offset
 80026f2:	232d      	movs	r3, #45	; 0x2d
 80026f4:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

		// calculate abs values and linear-to-dB
	for (int i = 0; i < 1024; i = i+2)
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80026fe:	e043      	b.n	8002788 <CalculateFFT+0xb0>
	{
		Freqs[FreqPoint] = (int)(20*log10f(complexABS(fft_in_buffer[i], fft_in_buffer[i+1]))) - Offset;
 8002700:	4a37      	ldr	r2, [pc, #220]	; (80027e0 <CalculateFFT+0x108>)
 8002702:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002712:	3301      	adds	r3, #1
 8002714:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <CalculateFFT+0x108>)
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	eef0 0a47 	vmov.f32	s1, s14
 8002722:	eeb0 0a67 	vmov.f32	s0, s15
 8002726:	f7ff ffbb 	bl	80026a0 <complexABS>
 800272a:	eef0 7a40 	vmov.f32	s15, s0
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	f007 feb1 	bl	800a498 <log10f>
 8002736:	eef0 7a40 	vmov.f32	s15, s0
 800273a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800273e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002746:	ee17 2a90 	vmov	r2, s15
 800274a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800274e:	1ad1      	subs	r1, r2, r3
 8002750:	463b      	mov	r3, r7
 8002752:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if(Freqs[FreqPoint] < 0)
 800275a:	463b      	mov	r3, r7
 800275c:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	2b00      	cmp	r3, #0
 8002766:	da05      	bge.n	8002774 <CalculateFFT+0x9c>
		{
			Freqs[FreqPoint] = 0;
 8002768:	463b      	mov	r3, r7
 800276a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 800276e:	2100      	movs	r1, #0
 8002770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		FreqPoint++;
 8002774:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002778:	3301      	adds	r3, #1
 800277a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	for (int i = 0; i < 1024; i = i+2)
 800277e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002782:	3302      	adds	r3, #2
 8002784:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002788:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800278c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002790:	dbb6      	blt.n	8002700 <CalculateFFT+0x28>
	}

	for(int i=0;i<512;i+=5)
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8002798:	e014      	b.n	80027c4 <CalculateFFT+0xec>
	{
		oled_fft[i/5]=Freqs[i];
 800279a:	463b      	mov	r3, r7
 800279c:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80027a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027a4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <CalculateFFT+0x110>)
 80027aa:	fb82 0203 	smull	r0, r2, r2, r3
 80027ae:	1052      	asrs	r2, r2, #1
 80027b0:	17db      	asrs	r3, r3, #31
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	b2c9      	uxtb	r1, r1
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <CalculateFFT+0x114>)
 80027b8:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<512;i+=5)
 80027ba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80027be:	3305      	adds	r3, #5
 80027c0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 80027c4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	dbe5      	blt.n	800279a <CalculateFFT+0xc2>
	}
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200019d4 	.word	0x200019d4
 80027e0:	200009bc 	.word	0x200009bc
 80027e4:	200019bc 	.word	0x200019bc
 80027e8:	66666667 	.word	0x66666667
 80027ec:	200029d4 	.word	0x200029d4

080027f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f4:	b672      	cpsid	i
}
 80027f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <Error_Handler+0x8>
	...

080027fc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002800:	4b17      	ldr	r3, [pc, #92]	; (8002860 <MX_SPI1_Init+0x64>)
 8002802:	4a18      	ldr	r2, [pc, #96]	; (8002864 <MX_SPI1_Init+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_SPI1_Init+0x64>)
 8002808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800280c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800280e:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_SPI1_Init+0x64>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <MX_SPI1_Init+0x64>)
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_SPI1_Init+0x64>)
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_SPI1_Init+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_SPI1_Init+0x64>)
 8002828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800282c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_SPI1_Init+0x64>)
 8002830:	2218      	movs	r2, #24
 8002832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <MX_SPI1_Init+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_SPI1_Init+0x64>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <MX_SPI1_Init+0x64>)
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_SPI1_Init+0x64>)
 8002848:	220a      	movs	r2, #10
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <MX_SPI1_Init+0x64>)
 800284e:	f003 f99b 	bl	8005b88 <HAL_SPI_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002858:	f7ff ffca 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20002f6c 	.word	0x20002f6c
 8002864:	40013000 	.word	0x40013000

08002868 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <MX_SPI2_Init+0x64>)
 800286e:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <MX_SPI2_Init+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <MX_SPI2_Init+0x64>)
 8002874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800287a:	4b14      	ldr	r3, [pc, #80]	; (80028cc <MX_SPI2_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <MX_SPI2_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_SPI2_Init+0x64>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_SPI2_Init+0x64>)
 800288e:	2200      	movs	r2, #0
 8002890:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_SPI2_Init+0x64>)
 8002894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002898:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_SPI2_Init+0x64>)
 800289c:	2210      	movs	r2, #16
 800289e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <MX_SPI2_Init+0x64>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_SPI2_Init+0x64>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <MX_SPI2_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_SPI2_Init+0x64>)
 80028b4:	220a      	movs	r2, #10
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <MX_SPI2_Init+0x64>)
 80028ba:	f003 f965 	bl	8005b88 <HAL_SPI_Init>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028c4:	f7ff ff94 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20002ebc 	.word	0x20002ebc
 80028d0:	40003800 	.word	0x40003800

080028d4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <MX_SPI5_Init+0x64>)
 80028da:	4a18      	ldr	r2, [pc, #96]	; (800293c <MX_SPI5_Init+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <MX_SPI5_Init+0x64>)
 80028e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <MX_SPI5_Init+0x64>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_SPI5_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_SPI5_Init+0x64>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <MX_SPI5_Init+0x64>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_SPI5_Init+0x64>)
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <MX_SPI5_Init+0x64>)
 8002908:	2200      	movs	r2, #0
 800290a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <MX_SPI5_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <MX_SPI5_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <MX_SPI5_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <MX_SPI5_Init+0x64>)
 8002920:	220a      	movs	r2, #10
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <MX_SPI5_Init+0x64>)
 8002926:	f003 f92f 	bl	8005b88 <HAL_SPI_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002930:	f7ff ff5e 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20002f14 	.word	0x20002f14
 800293c:	40015000 	.word	0x40015000

08002940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08e      	sub	sp, #56	; 0x38
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a63      	ldr	r2, [pc, #396]	; (8002aec <HAL_SPI_MspInit+0x1ac>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d12c      	bne.n	80029bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a61      	ldr	r2, [pc, #388]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 800296c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800299a:	23e0      	movs	r3, #224	; 0xe0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029aa:	2305      	movs	r3, #5
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b2:	4619      	mov	r1, r3
 80029b4:	484f      	ldr	r0, [pc, #316]	; (8002af4 <HAL_SPI_MspInit+0x1b4>)
 80029b6:	f002 faf1 	bl	8004f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80029ba:	e093      	b.n	8002ae4 <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a4d      	ldr	r2, [pc, #308]	; (8002af8 <HAL_SPI_MspInit+0x1b8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d15c      	bne.n	8002a80 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a41      	ldr	r2, [pc, #260]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80029fe:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a10:	2305      	movs	r3, #5
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4838      	ldr	r0, [pc, #224]	; (8002afc <HAL_SPI_MspInit+0x1bc>)
 8002a1c:	f002 fabe 	bl	8004f9c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002a20:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a22:	4a38      	ldr	r2, [pc, #224]	; (8002b04 <HAL_SPI_MspInit+0x1c4>)
 8002a24:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a2c:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a38:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a40:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a52:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a5a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a62:	4827      	ldr	r0, [pc, #156]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a64:	f001 fe8a 	bl	800477c <HAL_DMA_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_SPI_MspInit+0x132>
      Error_Handler();
 8002a6e:	f7ff febf 	bl	80027f0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a76:	649a      	str	r2, [r3, #72]	; 0x48
 8002a78:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <HAL_SPI_MspInit+0x1c0>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a7e:	e031      	b.n	8002ae4 <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI5)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <HAL_SPI_MspInit+0x1c8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d12c      	bne.n	8002ae4 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002ab0:	f043 0310 	orr.w	r3, r3, #16
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_SPI_MspInit+0x1b0>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002ac2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002ad4:	2306      	movs	r3, #6
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002adc:	4619      	mov	r1, r3
 8002ade:	480b      	ldr	r0, [pc, #44]	; (8002b0c <HAL_SPI_MspInit+0x1cc>)
 8002ae0:	f002 fa5c 	bl	8004f9c <HAL_GPIO_Init>
}
 8002ae4:	bf00      	nop
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013000 	.word	0x40013000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	40003800 	.word	0x40003800
 8002afc:	40020400 	.word	0x40020400
 8002b00:	20002fc4 	.word	0x20002fc4
 8002b04:	40026070 	.word	0x40026070
 8002b08:	40015000 	.word	0x40015000
 8002b0c:	40021000 	.word	0x40021000

08002b10 <buffer_to_template>:
SPI_HandleTypeDef *oled_spi;
uint8_t buffer[OLED_HEIGHT*OLED_WIDTH*2];
uint8_t template_buffer[OLED_HEIGHT*OLED_WIDTH*2];
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void buffer_to_template()
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
	for(int i=0;i<OLED_HEIGHT*OLED_WIDTH*2;i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	e00b      	b.n	8002b34 <buffer_to_template+0x24>
	{
		template_buffer[i]=buffer[i];
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <buffer_to_template+0x3c>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	7819      	ldrb	r1, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <buffer_to_template+0x40>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	460a      	mov	r2, r1
 8002b2c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<OLED_HEIGHT*OLED_WIDTH*2;i++)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3301      	adds	r3, #1
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b3a:	dbef      	blt.n	8002b1c <buffer_to_template+0xc>
	}
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20006028 	.word	0x20006028
 8002b50:	20003024 	.word	0x20003024

08002b54 <temlate_to_buffer>:
void temlate_to_buffer()
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
	for(int i=0;i<OLED_HEIGHT*OLED_WIDTH*2;i++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	e00b      	b.n	8002b78 <temlate_to_buffer+0x24>
	{
		buffer[i]=template_buffer[i];
 8002b60:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <temlate_to_buffer+0x3c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	7819      	ldrb	r1, [r3, #0]
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <temlate_to_buffer+0x40>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	460a      	mov	r2, r1
 8002b70:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<OLED_HEIGHT*OLED_WIDTH*2;i++)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3301      	adds	r3, #1
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b7e:	dbef      	blt.n	8002b60 <temlate_to_buffer+0xc>
	}
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20003024 	.word	0x20003024
 8002b94:	20006028 	.word	0x20006028

08002b98 <ssd1331_command>:
void ssd1331_command(uint8_t command)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	ssd1331_cs_low;
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <ssd1331_command+0x38>)
 8002ba4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ba8:	619a      	str	r2, [r3, #24]
	ssd1331_dc_low;
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <ssd1331_command+0x38>)
 8002bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bb0:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(oled_spi, &command, 1, ssd1331_TIMEOUT);
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <ssd1331_command+0x3c>)
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	1df9      	adds	r1, r7, #7
 8002bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f003 f86c 	bl	8005c9a <HAL_SPI_Transmit>
	ssd1331_cs_high;
 8002bc2:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <ssd1331_command+0x38>)
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	619a      	str	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	20006024 	.word	0x20006024

08002bd8 <setPixel>:
void setPixel(uint8_t x,uint8_t y,uint16_t color)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
 8002be2:	460b      	mov	r3, r1
 8002be4:	71bb      	strb	r3, [r7, #6]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80bb      	strh	r3, [r7, #4]
	if (x > OLED_WIDTH || y > OLED_HEIGHT||x<0||y<0)
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	2b60      	cmp	r3, #96	; 0x60
 8002bee:	d820      	bhi.n	8002c32 <setPixel+0x5a>
 8002bf0:	79bb      	ldrb	r3, [r7, #6]
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d81d      	bhi.n	8002c32 <setPixel+0x5a>
		{
			return;
		}

	    buffer[y*96*2+(x*2)]=(color>>8);
 8002bf6:	88bb      	ldrh	r3, [r7, #4]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	79ba      	ldrb	r2, [r7, #6]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	015b      	lsls	r3, r3, #5
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	b2c9      	uxtb	r1, r1
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <setPixel+0x68>)
 8002c12:	54d1      	strb	r1, [r2, r3]
	    buffer[y*96*2+(x*2)+1]=(color & 0xFF);
 8002c14:	79ba      	ldrb	r2, [r7, #6]
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	015b      	lsls	r3, r3, #5
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	4413      	add	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	3301      	adds	r3, #1
 8002c28:	88ba      	ldrh	r2, [r7, #4]
 8002c2a:	b2d1      	uxtb	r1, r2
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <setPixel+0x68>)
 8002c2e:	54d1      	strb	r1, [r2, r3]
 8002c30:	e000      	b.n	8002c34 <setPixel+0x5c>
			return;
 8002c32:	bf00      	nop

}
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20006028 	.word	0x20006028

08002c44 <ssd1331_clear>:

void ssd1331_clear()
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	memset(buffer,0x00,2*6144);
 8002c48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4802      	ldr	r0, [pc, #8]	; (8002c58 <ssd1331_clear+0x14>)
 8002c50:	f006 fa46 	bl	80090e0 <memset>

}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20006028 	.word	0x20006028

08002c5c <invert>:
void invert()
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
	for(int i=0;i<6144*2;i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	e00d      	b.n	8002c84 <invert+0x28>
	{
		buffer[i]=~buffer[i];
 8002c68:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <invert+0x40>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	b2d9      	uxtb	r1, r3
 8002c74:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <invert+0x40>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6144*2;i++)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3301      	adds	r3, #1
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c8a:	dbed      	blt.n	8002c68 <invert+0xc>
	}
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20006028 	.word	0x20006028

08002ca0 <ssd1331_display>:
void ssd1331_display(uint8_t invertflag)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
	if(invertflag)
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <ssd1331_display+0x14>
	{
		invert();
 8002cb0:	f7ff ffd4 	bl	8002c5c <invert>
	}
	ssd1331_command(SET_COLUMN_ADDRESS);
 8002cb4:	2015      	movs	r0, #21
 8002cb6:	f7ff ff6f 	bl	8002b98 <ssd1331_command>
	ssd1331_command(0);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7ff ff6c 	bl	8002b98 <ssd1331_command>
	ssd1331_command(OLED_WIDTH - 1);
 8002cc0:	205f      	movs	r0, #95	; 0x5f
 8002cc2:	f7ff ff69 	bl	8002b98 <ssd1331_command>
	    //set row point
	ssd1331_command(SET_ROW_ADDRESS);
 8002cc6:	2075      	movs	r0, #117	; 0x75
 8002cc8:	f7ff ff66 	bl	8002b98 <ssd1331_command>
	ssd1331_command(0);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f7ff ff63 	bl	8002b98 <ssd1331_command>
	ssd1331_command(OLED_HEIGHT - 1);
 8002cd2:	203f      	movs	r0, #63	; 0x3f
 8002cd4:	f7ff ff60 	bl	8002b98 <ssd1331_command>

	//uint8_t Datafirst;
	//uint8_t Datasecond;
	ssd1331_cs_low;
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <ssd1331_display+0xb8>)
 8002cda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cde:	619a      	str	r2, [r3, #24]
	ssd1331_dc_high;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <ssd1331_display+0xb8>)
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	619a      	str	r2, [r3, #24]
	uint32_t Length = OLED_WIDTH * OLED_HEIGHT*2,i=0;
 8002ce6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
	while (Length > 0U)
 8002cf0:	e01f      	b.n	8002d32 <ssd1331_display+0x92>
	    {
	      /* Wait until TXE flag is set to send data */
	      if(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE))
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <ssd1331_display+0xbc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d117      	bne.n	8002d32 <ssd1331_display+0x92>
	      {
	    	  // Write higher byte of color to DR
	        *((__IO uint8_t *)&oled_spi->Instance->DR) = (buffer[i]);
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <ssd1331_display+0xbc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	4915      	ldr	r1, [pc, #84]	; (8002d60 <ssd1331_display+0xc0>)
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	440a      	add	r2, r1
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	701a      	strb	r2, [r3, #0]
	         //Wait for transfer
	        while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_TXE) != SET)
 8002d14:	bf00      	nop
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <ssd1331_display+0xbc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d1f7      	bne.n	8002d16 <ssd1331_display+0x76>
	        {}
	         //Write lower byt of color to DR
	         //Decrease Lenght
	        Length--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
	        i++;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
	while (Length > 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1dc      	bne.n	8002cf2 <ssd1331_display+0x52>
	      }
	    }
		while(__HAL_SPI_GET_FLAG(oled_spi, SPI_FLAG_BSY) != RESET)
 8002d38:	bf00      	nop
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <ssd1331_display+0xbc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d0f7      	beq.n	8002d3a <ssd1331_display+0x9a>
			{

			}

	ssd1331_cs_high;
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <ssd1331_display+0xb8>)
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	619a      	str	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	20006024 	.word	0x20006024
 8002d60:	20006028 	.word	0x20006028

08002d64 <ssd1331_init>:




void ssd1331_init(SPI_HandleTypeDef* spi)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	ssd1331_rst_low;
 8002d6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ea8 <ssd1331_init+0x144>)
 8002d6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002d72:	619a      	str	r2, [r3, #24]
	HAL_Delay(15);
 8002d74:	200f      	movs	r0, #15
 8002d76:	f000 fe7f 	bl	8003a78 <HAL_Delay>
	ssd1331_rst_high;
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <ssd1331_init+0x144>)
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	619a      	str	r2, [r3, #24]
	HAL_Delay(150);
 8002d80:	2096      	movs	r0, #150	; 0x96
 8002d82:	f000 fe79 	bl	8003a78 <HAL_Delay>
	oled_spi=spi;
 8002d86:	4a49      	ldr	r2, [pc, #292]	; (8002eac <ssd1331_init+0x148>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6013      	str	r3, [r2, #0]
	__HAL_SPI_ENABLE(oled_spi);
 8002d8c:	4b47      	ldr	r3, [pc, #284]	; (8002eac <ssd1331_init+0x148>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b45      	ldr	r3, [pc, #276]	; (8002eac <ssd1331_init+0x148>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d9e:	601a      	str	r2, [r3, #0]
	ssd1331_command(DISPLAY_OFF);          //Display Off
 8002da0:	20ae      	movs	r0, #174	; 0xae
 8002da2:	f7ff fef9 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_CONTRAST_A);       //Set contrast for color A
 8002da6:	2081      	movs	r0, #129	; 0x81
 8002da8:	f7ff fef6 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0xFF);                     //145 0x91
 8002dac:	20ff      	movs	r0, #255	; 0xff
 8002dae:	f7ff fef3 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_CONTRAST_B);       //Set contrast for color B
 8002db2:	2082      	movs	r0, #130	; 0x82
 8002db4:	f7ff fef0 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0xFF);                     //80 0x50
 8002db8:	20ff      	movs	r0, #255	; 0xff
 8002dba:	f7ff feed 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_CONTRAST_C);       //Set contrast for color C
 8002dbe:	2083      	movs	r0, #131	; 0x83
 8002dc0:	f7ff feea 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0xFF);                     //125 0x7D
 8002dc4:	20ff      	movs	r0, #255	; 0xff
 8002dc6:	f7ff fee7 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(MASTER_CURRENT_CONTROL);//master current control
 8002dca:	2087      	movs	r0, #135	; 0x87
 8002dcc:	f7ff fee4 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x06);                     //6
 8002dd0:	2006      	movs	r0, #6
 8002dd2:	f7ff fee1 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_SPEED_A);//Set Second Pre-change Speed For ColorA
 8002dd6:	208a      	movs	r0, #138	; 0x8a
 8002dd8:	f7ff fede 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x99);                     //100
 8002ddc:	2099      	movs	r0, #153	; 0x99
 8002dde:	f7ff fedb 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_SPEED_B);//Set Second Pre-change Speed For ColorB
 8002de2:	208b      	movs	r0, #139	; 0x8b
 8002de4:	f7ff fed8 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x99);                     //120
 8002de8:	2099      	movs	r0, #153	; 0x99
 8002dea:	f7ff fed5 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_SPEED_C);//Set Second Pre-change Speed For ColorC
 8002dee:	208c      	movs	r0, #140	; 0x8c
 8002df0:	f7ff fed2 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x99);                     //100
 8002df4:	2099      	movs	r0, #153	; 0x99
 8002df6:	f7ff fecf 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_REMAP);            //set remap & data format
 8002dfa:	20a0      	movs	r0, #160	; 0xa0
 8002dfc:	f7ff fecc 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x72);                     //0x72
 8002e00:	2072      	movs	r0, #114	; 0x72
 8002e02:	f7ff fec9 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_DISPLAY_START_LINE);//Set display Start Line
 8002e06:	20a1      	movs	r0, #161	; 0xa1
 8002e08:	f7ff fec6 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x0);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7ff fec3 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_DISPLAY_OFFSET);   //Set display offset
 8002e12:	20a2      	movs	r0, #162	; 0xa2
 8002e14:	f7ff fec0 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x0);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff febd 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(NORMAL_DISPLAY);       //Set display mode
 8002e1e:	20a4      	movs	r0, #164	; 0xa4
 8002e20:	f7ff feba 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_MULTIPLEX_RATIO);  //Set multiplex ratio
 8002e24:	20a8      	movs	r0, #168	; 0xa8
 8002e26:	f7ff feb7 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x3F);
 8002e2a:	203f      	movs	r0, #63	; 0x3f
 8002e2c:	f7ff feb4 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_MASTER_CONFIGURE); //Set master configuration
 8002e30:	20ad      	movs	r0, #173	; 0xad
 8002e32:	f7ff feb1 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x8E);
 8002e36:	208e      	movs	r0, #142	; 0x8e
 8002e38:	f7ff feae 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(POWER_SAVE_MODE);      //Set Power Save Mode
 8002e3c:	20b0      	movs	r0, #176	; 0xb0
 8002e3e:	f7ff feab 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x00);                     //0x00
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7ff fea8 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(PHASE_PERIOD_ADJUSTMENT);//phase 1 and 2 period adjustment
 8002e48:	20b1      	movs	r0, #177	; 0xb1
 8002e4a:	f7ff fea5 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x31);                     //0x31
 8002e4e:	2031      	movs	r0, #49	; 0x31
 8002e50:	f7ff fea2 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(DISPLAY_CLOCK_DIV);    //display clock divider/oscillator frequency
 8002e54:	20b3      	movs	r0, #179	; 0xb3
 8002e56:	f7ff fe9f 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0xF0);
 8002e5a:	20f0      	movs	r0, #240	; 0xf0
 8002e5c:	f7ff fe9c 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_PRECHARGE_VOLTAGE);//Set Pre-Change Level
 8002e60:	20bb      	movs	r0, #187	; 0xbb
 8002e62:	f7ff fe99 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x3A);
 8002e66:	203a      	movs	r0, #58	; 0x3a
 8002e68:	f7ff fe96 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(SET_V_VOLTAGE);        //Set vcomH
 8002e6c:	20be      	movs	r0, #190	; 0xbe
 8002e6e:	f7ff fe93 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(0x3E);
 8002e72:	203e      	movs	r0, #62	; 0x3e
 8002e74:	f7ff fe90 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(DEACTIVE_SCROLLING);   //disable scrolling
 8002e78:	202e      	movs	r0, #46	; 0x2e
 8002e7a:	f7ff fe8d 	bl	8002b98 <ssd1331_command>
	    ssd1331_command(NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on
 8002e7e:	20af      	movs	r0, #175	; 0xaf
 8002e80:	f7ff fe8a 	bl	8002b98 <ssd1331_command>
	    HAL_Delay(1000);
 8002e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e88:	f000 fdf6 	bl	8003a78 <HAL_Delay>
	    ssd1331_clear();
 8002e8c:	f7ff feda 	bl	8002c44 <ssd1331_clear>
	    ssd1331_display(0);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7ff ff05 	bl	8002ca0 <ssd1331_display>
	    HAL_Delay(1000);
 8002e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9a:	f000 fded 	bl	8003a78 <HAL_Delay>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	20006024 	.word	0x20006024

08002eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_MspInit+0x4c>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <HAL_MspInit+0x4c>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_MspInit+0x4c>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_MspInit+0x4c>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <HAL_MspInit+0x4c>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_MspInit+0x4c>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800

08002f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <NMI_Handler+0x4>

08002f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f0a:	e7fe      	b.n	8002f0a <HardFault_Handler+0x4>

08002f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <MemManage_Handler+0x4>

08002f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f16:	e7fe      	b.n	8002f16 <BusFault_Handler+0x4>

08002f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <UsageFault_Handler+0x4>

08002f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f4c:	f000 fd74 	bl	8003a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <DMA1_Stream4_IRQHandler+0x10>)
 8002f5a:	f001 fda7 	bl	8004aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20002fc4 	.word	0x20002fc4

08002f68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <DMA1_Stream5_IRQHandler+0x10>)
 8002f6e:	f001 fd9d 	bl	8004aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20009028 	.word	0x20009028

08002f7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <DMA1_Stream6_IRQHandler+0x10>)
 8002f82:	f001 fd93 	bl	8004aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20009088 	.word	0x20009088

08002f90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <ADC_IRQHandler+0x10>)
 8002f96:	f000 fdd6 	bl	8003b46 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000010c 	.word	0x2000010c

08002fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <TIM2_IRQHandler+0x10>)
 8002faa:	f004 f9a5 	bl	80072f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20009130 	.word	0x20009130

08002fb8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <SPI2_IRQHandler+0x10>)
 8002fbe:	f003 fb51 	bl	8006664 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20002ebc 	.word	0x20002ebc

08002fcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <DMA2_Stream0_IRQHandler+0x10>)
 8002fd2:	f001 fd6b 	bl	8004aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000154 	.word	0x20000154

08002fe0 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <SPI5_IRQHandler+0x10>)
 8002fe6:	f003 fb3d 	bl	8006664 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20002f14 	.word	0x20002f14

08002ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	return 1;
 8002ff8:	2301      	movs	r3, #1
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_kill>:

int _kill(int pid, int sig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800300e:	f006 f83d 	bl	800908c <__errno>
 8003012:	4603      	mov	r3, r0
 8003014:	2216      	movs	r2, #22
 8003016:	601a      	str	r2, [r3, #0]
	return -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_exit>:

void _exit (int status)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003036:	e7fe      	b.n	8003036 <_exit+0x12>

08003038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e00a      	b.n	8003060 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800304a:	f3af 8000 	nop.w
 800304e:	4601      	mov	r1, r0
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	60ba      	str	r2, [r7, #8]
 8003056:	b2ca      	uxtb	r2, r1
 8003058:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	dbf0      	blt.n	800304a <_read+0x12>
	}

return len;
 8003068:	687b      	ldr	r3, [r7, #4]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e009      	b.n	8003098 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	dbf1      	blt.n	8003084 <_write+0x12>
	}
	return len;
 80030a0:	687b      	ldr	r3, [r7, #4]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <_close>:

int _close(int file)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
	return -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d2:	605a      	str	r2, [r3, #4]
	return 0;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_isatty>:

int _isatty(int file)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
	return 1;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
	return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <_sbrk+0x5c>)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <_sbrk+0x60>)
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <_sbrk+0x64>)
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <_sbrk+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003144:	f005 ffa2 	bl	800908c <__errno>
 8003148:	4603      	mov	r3, r0
 800314a:	220c      	movs	r2, #12
 800314c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	e009      	b.n	8003168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <_sbrk+0x64>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <_sbrk+0x64>)
 8003164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20020000 	.word	0x20020000
 8003174:	00001000 	.word	0x00001000
 8003178:	200000c4 	.word	0x200000c4
 800317c:	200091b8 	.word	0x200091b8

08003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <SystemInit+0x20>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <SystemInit+0x20>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08e      	sub	sp, #56	; 0x38
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b8:	f107 0320 	add.w	r3, r7, #32
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
 80031d0:	615a      	str	r2, [r3, #20]
 80031d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <MX_TIM2_Init+0xfc>)
 80031d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <MX_TIM2_Init+0xfc>)
 80031de:	f242 720f 	movw	r2, #9999	; 0x270f
 80031e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <MX_TIM2_Init+0xfc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <MX_TIM2_Init+0xfc>)
 80031ec:	22ff      	movs	r2, #255	; 0xff
 80031ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <MX_TIM2_Init+0xfc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f6:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <MX_TIM2_Init+0xfc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031fc:	4828      	ldr	r0, [pc, #160]	; (80032a0 <MX_TIM2_Init+0xfc>)
 80031fe:	f003 fd01 	bl	8006c04 <HAL_TIM_Base_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003208:	f7ff faf2 	bl	80027f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800320c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003216:	4619      	mov	r1, r3
 8003218:	4821      	ldr	r0, [pc, #132]	; (80032a0 <MX_TIM2_Init+0xfc>)
 800321a:	f004 fa37 	bl	800768c <HAL_TIM_ConfigClockSource>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003224:	f7ff fae4 	bl	80027f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003228:	481d      	ldr	r0, [pc, #116]	; (80032a0 <MX_TIM2_Init+0xfc>)
 800322a:	f003 fd95 	bl	8006d58 <HAL_TIM_PWM_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003234:	f7ff fadc 	bl	80027f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003240:	f107 0320 	add.w	r3, r7, #32
 8003244:	4619      	mov	r1, r3
 8003246:	4816      	ldr	r0, [pc, #88]	; (80032a0 <MX_TIM2_Init+0xfc>)
 8003248:	f004 feca 	bl	8007fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003252:	f7ff facd 	bl	80027f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003256:	2360      	movs	r3, #96	; 0x60
 8003258:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	2200      	movs	r2, #0
 800326a:	4619      	mov	r1, r3
 800326c:	480c      	ldr	r0, [pc, #48]	; (80032a0 <MX_TIM2_Init+0xfc>)
 800326e:	f004 f94b 	bl	8007508 <HAL_TIM_PWM_ConfigChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003278:	f7ff faba 	bl	80027f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	220c      	movs	r2, #12
 8003280:	4619      	mov	r1, r3
 8003282:	4807      	ldr	r0, [pc, #28]	; (80032a0 <MX_TIM2_Init+0xfc>)
 8003284:	f004 f940 	bl	8007508 <HAL_TIM_PWM_ConfigChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800328e:	f7ff faaf 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003292:	4803      	ldr	r0, [pc, #12]	; (80032a0 <MX_TIM2_Init+0xfc>)
 8003294:	f000 f8f6 	bl	8003484 <HAL_TIM_MspPostInit>

}
 8003298:	bf00      	nop
 800329a:	3738      	adds	r7, #56	; 0x38
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20009130 	.word	0x20009130

080032a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	f107 0308 	add.w	r3, r7, #8
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b8:	463b      	mov	r3, r7
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <MX_TIM3_Init+0x90>)
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <MX_TIM3_Init+0x94>)
 80032c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <MX_TIM3_Init+0x90>)
 80032c8:	2263      	movs	r2, #99	; 0x63
 80032ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <MX_TIM3_Init+0x90>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_TIM3_Init+0x90>)
 80032d4:	2213      	movs	r2, #19
 80032d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <MX_TIM3_Init+0x90>)
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <MX_TIM3_Init+0x90>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032e4:	4813      	ldr	r0, [pc, #76]	; (8003334 <MX_TIM3_Init+0x90>)
 80032e6:	f003 fc8d 	bl	8006c04 <HAL_TIM_Base_Init>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80032f0:	f7ff fa7e 	bl	80027f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032fa:	f107 0308 	add.w	r3, r7, #8
 80032fe:	4619      	mov	r1, r3
 8003300:	480c      	ldr	r0, [pc, #48]	; (8003334 <MX_TIM3_Init+0x90>)
 8003302:	f004 f9c3 	bl	800768c <HAL_TIM_ConfigClockSource>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800330c:	f7ff fa70 	bl	80027f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003310:	2320      	movs	r3, #32
 8003312:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003318:	463b      	mov	r3, r7
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	; (8003334 <MX_TIM3_Init+0x90>)
 800331e:	f004 fe5f 	bl	8007fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003328:	f7ff fa62 	bl	80027f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800332c:	bf00      	nop
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200090e8 	.word	0x200090e8
 8003338:	40000400 	.word	0x40000400

0800333c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d176      	bne.n	800343c <HAL_TIM_Base_MspInit+0x100>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_TIM_Base_MspInit+0x130>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a45      	ldr	r2, [pc, #276]	; (800346c <HAL_TIM_Base_MspInit+0x130>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_TIM_Base_MspInit+0x130>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 800336c:	4a41      	ldr	r2, [pc, #260]	; (8003474 <HAL_TIM_Base_MspInit+0x138>)
 800336e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003370:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 8003372:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003376:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003378:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 800337a:	2240      	movs	r2, #64	; 0x40
 800337c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 8003380:	2200      	movs	r2, #0
 8003382:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003384:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 8003386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800338a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800338c:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 800338e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003392:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 8003396:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800339a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 800339e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033a2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80033b0:	482f      	ldr	r0, [pc, #188]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 80033b2:	f001 f9e3 	bl	800477c <HAL_DMA_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80033bc:	f7ff fa18 	bl	80027f0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
 80033c6:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <HAL_TIM_Base_MspInit+0x134>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80033cc:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 80033ce:	4a2b      	ldr	r2, [pc, #172]	; (800347c <HAL_TIM_Base_MspInit+0x140>)
 80033d0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80033d2:	4b29      	ldr	r3, [pc, #164]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 80033d4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80033d8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e0:	4b25      	ldr	r3, [pc, #148]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 80033e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ec:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033ee:	4b22      	ldr	r3, [pc, #136]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 80033f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033f4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 80033f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033fc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 8003400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003404:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 8003408:	2200      	movs	r2, #0
 800340a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 800340e:	2200      	movs	r2, #0
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8003412:	4819      	ldr	r0, [pc, #100]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 8003414:	f001 f9b2 	bl	800477c <HAL_DMA_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 800341e:	f7ff f9e7 	bl	80027f0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a14      	ldr	r2, [pc, #80]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
 8003428:	4a13      	ldr	r2, [pc, #76]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <HAL_TIM_Base_MspInit+0x13c>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800343a:	e012      	b.n	8003462 <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <HAL_TIM_Base_MspInit+0x144>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10d      	bne.n	8003462 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_TIM_Base_MspInit+0x130>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	4a07      	ldr	r2, [pc, #28]	; (800346c <HAL_TIM_Base_MspInit+0x130>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_TIM_Base_MspInit+0x130>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	20009028 	.word	0x20009028
 8003474:	40026088 	.word	0x40026088
 8003478:	20009088 	.word	0x20009088
 800347c:	400260a0 	.word	0x400260a0
 8003480:	40000400 	.word	0x40000400

08003484 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 030c 	add.w	r3, r7, #12
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d11d      	bne.n	80034e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_TIM_MspPostInit+0x68>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_TIM_MspPostInit+0x68>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_TIM_MspPostInit+0x68>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80034c2:	2309      	movs	r3, #9
 80034c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4619      	mov	r1, r3
 80034dc:	4804      	ldr	r0, [pc, #16]	; (80034f0 <HAL_TIM_MspPostInit+0x6c>)
 80034de:	f001 fd5d 	bl	8004f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034e2:	bf00      	nop
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020000 	.word	0x40020000

080034f4 <WS2812B_Init>:
static uint8_t buffer[48];
static uint16_t CurrentLed;
static uint8_t ResetSignal;

void WS2812B_Init(SPI_HandleTypeDef * spi_handler)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	hspi_ws2812b = spi_handler;
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <WS2812B_Init+0x1c>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6013      	str	r3, [r2, #0]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20009178 	.word	0x20009178

08003514 <ws2812_clear>:
void ws2812_clear()
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
	for(int i=0;i<WS2812B_LEDS;i++)
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	e009      	b.n	8003534 <ws2812_clear+0x20>
	{
		WS2812B_SetDiodeRGB(i, 0, 0, 0);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	b218      	sxth	r0, r3
 8003524:	2300      	movs	r3, #0
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	f000 f80b 	bl	8003544 <WS2812B_SetDiodeRGB>
	for(int i=0;i<WS2812B_LEDS;i++)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3301      	adds	r3, #1
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b0b      	cmp	r3, #11
 8003538:	ddf2      	ble.n	8003520 <ws2812_clear+0xc>
	}
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <WS2812B_SetDiodeRGB>:
	if(diode_id >= WS2812B_LEDS || diode_id < 0) return;
	ws2812b_array[diode_id] = color;
}

void WS2812B_SetDiodeRGB(int16_t diode_id, uint8_t R, uint8_t G, uint8_t B)
{
 8003544:	b490      	push	{r4, r7}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4604      	mov	r4, r0
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4623      	mov	r3, r4
 8003554:	80fb      	strh	r3, [r7, #6]
 8003556:	4603      	mov	r3, r0
 8003558:	717b      	strb	r3, [r7, #5]
 800355a:	460b      	mov	r3, r1
 800355c:	713b      	strb	r3, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	70fb      	strb	r3, [r7, #3]
	if(diode_id >= WS2812B_LEDS || diode_id < 0) return;
 8003562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003566:	2b0b      	cmp	r3, #11
 8003568:	dc21      	bgt.n	80035ae <WS2812B_SetDiodeRGB+0x6a>
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	2b00      	cmp	r3, #0
 8003570:	db1d      	blt.n	80035ae <WS2812B_SetDiodeRGB+0x6a>
	ws2812b_array[diode_id].red = R;
 8003572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003576:	4910      	ldr	r1, [pc, #64]	; (80035b8 <WS2812B_SetDiodeRGB+0x74>)
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	440b      	add	r3, r1
 8003580:	797a      	ldrb	r2, [r7, #5]
 8003582:	701a      	strb	r2, [r3, #0]
	ws2812b_array[diode_id].green = G;
 8003584:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003588:	490b      	ldr	r1, [pc, #44]	; (80035b8 <WS2812B_SetDiodeRGB+0x74>)
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	440b      	add	r3, r1
 8003592:	3301      	adds	r3, #1
 8003594:	793a      	ldrb	r2, [r7, #4]
 8003596:	701a      	strb	r2, [r3, #0]
	ws2812b_array[diode_id].blue = B;
 8003598:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800359c:	4906      	ldr	r1, [pc, #24]	; (80035b8 <WS2812B_SetDiodeRGB+0x74>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	440b      	add	r3, r1
 80035a6:	3302      	adds	r3, #2
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e000      	b.n	80035b0 <WS2812B_SetDiodeRGB+0x6c>
	if(diode_id >= WS2812B_LEDS || diode_id < 0) return;
 80035ae:	bf00      	nop
}
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc90      	pop	{r4, r7}
 80035b6:	4770      	bx	lr
 80035b8:	2000917c 	.word	0x2000917c

080035bc <WS2812B_Refresh>:
		}
	}
}

void WS2812B_Refresh()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
	CurrentLed = 0;
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <WS2812B_Refresh+0x58>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	801a      	strh	r2, [r3, #0]
	ResetSignal = 0;
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <WS2812B_Refresh+0x5c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 48; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	e006      	b.n	80035e2 <WS2812B_Refresh+0x26>
		buffer[i] = 0x00;
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	4a11      	ldr	r2, [pc, #68]	; (800361c <WS2812B_Refresh+0x60>)
 80035d8:	2100      	movs	r1, #0
 80035da:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 48; i++)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	3301      	adds	r3, #1
 80035e0:	71fb      	strb	r3, [r7, #7]
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	2b2f      	cmp	r3, #47	; 0x2f
 80035e6:	d9f5      	bls.n	80035d4 <WS2812B_Refresh+0x18>
	HAL_SPI_Transmit_DMA(hspi_ws2812b, buffer, 48); // Additional 3 for reset signal
 80035e8:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <WS2812B_Refresh+0x64>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2230      	movs	r2, #48	; 0x30
 80035ee:	490b      	ldr	r1, [pc, #44]	; (800361c <WS2812B_Refresh+0x60>)
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 ff41 	bl	8006478 <HAL_SPI_Transmit_DMA>
	while(HAL_DMA_STATE_READY != HAL_DMA_GetState(hspi_ws2812b->hdmatx));
 80035f6:	bf00      	nop
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <WS2812B_Refresh+0x64>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fe:	4618      	mov	r0, r3
 8003600:	f001 fbde 	bl	8004dc0 <HAL_DMA_GetState>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	d1f6      	bne.n	80035f8 <WS2812B_Refresh+0x3c>

}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200000f8 	.word	0x200000f8
 8003618:	200000fa 	.word	0x200000fa
 800361c:	200000c8 	.word	0x200000c8
 8003620:	20009178 	.word	0x20009178

08003624 <HAL_SPI_TxHalfCpltCallback>:

void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	if(hspi == hspi_ws2812b)
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_SPI_TxHalfCpltCallback+0x170>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	f040 80aa 	bne.w	800378c <HAL_SPI_TxHalfCpltCallback+0x168>
	{
		if(!ResetSignal)
 8003638:	4b57      	ldr	r3, [pc, #348]	; (8003798 <HAL_SPI_TxHalfCpltCallback+0x174>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d110      	bne.n	8003662 <HAL_SPI_TxHalfCpltCallback+0x3e>
		{
			for(uint8_t k = 0; k < 24; k++) // To 72 impulses of reset
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e006      	b.n	8003654 <HAL_SPI_TxHalfCpltCallback+0x30>
			{
				buffer[k] = 0x00;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	4a54      	ldr	r2, [pc, #336]	; (800379c <HAL_SPI_TxHalfCpltCallback+0x178>)
 800364a:	2100      	movs	r1, #0
 800364c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t k = 0; k < 24; k++) // To 72 impulses of reset
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	3301      	adds	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b17      	cmp	r3, #23
 8003658:	d9f5      	bls.n	8003646 <HAL_SPI_TxHalfCpltCallback+0x22>
			}
			ResetSignal = 1; // End reset signal
 800365a:	4b4f      	ldr	r3, [pc, #316]	; (8003798 <HAL_SPI_TxHalfCpltCallback+0x174>)
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
				}
				CurrentLed++;
			}
		}
	}
}
 8003660:	e094      	b.n	800378c <HAL_SPI_TxHalfCpltCallback+0x168>
			if(CurrentLed > WS2812B_LEDS)
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <HAL_SPI_TxHalfCpltCallback+0x17c>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d905      	bls.n	8003676 <HAL_SPI_TxHalfCpltCallback+0x52>
				HAL_SPI_DMAStop(hspi_ws2812b);
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_SPI_TxHalfCpltCallback+0x170>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f002 ffb8 	bl	80065e4 <HAL_SPI_DMAStop>
}
 8003674:	e08a      	b.n	800378c <HAL_SPI_TxHalfCpltCallback+0x168>
				uint8_t j = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	73bb      	strb	r3, [r7, #14]
				for(int8_t k=7; k>=0; k--)
 800367a:	2307      	movs	r3, #7
 800367c:	737b      	strb	r3, [r7, #13]
 800367e:	e024      	b.n	80036ca <HAL_SPI_TxHalfCpltCallback+0xa6>
					if((ws2812b_array[CurrentLed].green & (1<<k)) == 0)
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_SPI_TxHalfCpltCallback+0x17c>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	4a47      	ldr	r2, [pc, #284]	; (80037a4 <HAL_SPI_TxHalfCpltCallback+0x180>)
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	4413      	add	r3, r2
 8003690:	3301      	adds	r3, #1
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800369a:	fa42 f303 	asr.w	r3, r2, r3
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <HAL_SPI_TxHalfCpltCallback+0x8c>
						buffer[j] = zero;
 80036a6:	7bbb      	ldrb	r3, [r7, #14]
 80036a8:	4a3c      	ldr	r2, [pc, #240]	; (800379c <HAL_SPI_TxHalfCpltCallback+0x178>)
 80036aa:	21c0      	movs	r1, #192	; 0xc0
 80036ac:	54d1      	strb	r1, [r2, r3]
 80036ae:	e003      	b.n	80036b8 <HAL_SPI_TxHalfCpltCallback+0x94>
						buffer[j] = one;
 80036b0:	7bbb      	ldrb	r3, [r7, #14]
 80036b2:	4a3a      	ldr	r2, [pc, #232]	; (800379c <HAL_SPI_TxHalfCpltCallback+0x178>)
 80036b4:	21f8      	movs	r1, #248	; 0xf8
 80036b6:	54d1      	strb	r1, [r2, r3]
					j++;
 80036b8:	7bbb      	ldrb	r3, [r7, #14]
 80036ba:	3301      	adds	r3, #1
 80036bc:	73bb      	strb	r3, [r7, #14]
				for(int8_t k=7; k>=0; k--)
 80036be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	737b      	strb	r3, [r7, #13]
 80036ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	dad6      	bge.n	8003680 <HAL_SPI_TxHalfCpltCallback+0x5c>
				for(int8_t k=7; k>=0; k--)
 80036d2:	2307      	movs	r3, #7
 80036d4:	733b      	strb	r3, [r7, #12]
 80036d6:	e023      	b.n	8003720 <HAL_SPI_TxHalfCpltCallback+0xfc>
					if((ws2812b_array[CurrentLed].red & (1<<k)) == 0)
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_SPI_TxHalfCpltCallback+0x17c>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	4619      	mov	r1, r3
 80036de:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <HAL_SPI_TxHalfCpltCallback+0x180>)
 80036e0:	460b      	mov	r3, r1
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	440b      	add	r3, r1
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80036f0:	fa42 f303 	asr.w	r3, r2, r3
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d104      	bne.n	8003706 <HAL_SPI_TxHalfCpltCallback+0xe2>
						buffer[j] = zero;
 80036fc:	7bbb      	ldrb	r3, [r7, #14]
 80036fe:	4a27      	ldr	r2, [pc, #156]	; (800379c <HAL_SPI_TxHalfCpltCallback+0x178>)
 8003700:	21c0      	movs	r1, #192	; 0xc0
 8003702:	54d1      	strb	r1, [r2, r3]
 8003704:	e003      	b.n	800370e <HAL_SPI_TxHalfCpltCallback+0xea>
						buffer[j] = one;
 8003706:	7bbb      	ldrb	r3, [r7, #14]
 8003708:	4a24      	ldr	r2, [pc, #144]	; (800379c <HAL_SPI_TxHalfCpltCallback+0x178>)
 800370a:	21f8      	movs	r1, #248	; 0xf8
 800370c:	54d1      	strb	r1, [r2, r3]
					j++;
 800370e:	7bbb      	ldrb	r3, [r7, #14]
 8003710:	3301      	adds	r3, #1
 8003712:	73bb      	strb	r3, [r7, #14]
				for(int8_t k=7; k>=0; k--)
 8003714:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	733b      	strb	r3, [r7, #12]
 8003720:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	dad7      	bge.n	80036d8 <HAL_SPI_TxHalfCpltCallback+0xb4>
				for(int8_t k=7; k>=0; k--)
 8003728:	2307      	movs	r3, #7
 800372a:	72fb      	strb	r3, [r7, #11]
 800372c:	e024      	b.n	8003778 <HAL_SPI_TxHalfCpltCallback+0x154>
					if((ws2812b_array[CurrentLed].blue & (1<<k)) == 0)
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <HAL_SPI_TxHalfCpltCallback+0x17c>)
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	4619      	mov	r1, r3
 8003734:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_SPI_TxHalfCpltCallback+0x180>)
 8003736:	460b      	mov	r3, r1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	440b      	add	r3, r1
 800373c:	4413      	add	r3, r2
 800373e:	3302      	adds	r3, #2
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003748:	fa42 f303 	asr.w	r3, r2, r3
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_SPI_TxHalfCpltCallback+0x13a>
						buffer[j] = zero;
 8003754:	7bbb      	ldrb	r3, [r7, #14]
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <HAL_SPI_TxHalfCpltCallback+0x178>)
 8003758:	21c0      	movs	r1, #192	; 0xc0
 800375a:	54d1      	strb	r1, [r2, r3]
 800375c:	e003      	b.n	8003766 <HAL_SPI_TxHalfCpltCallback+0x142>
						buffer[j] = one;
 800375e:	7bbb      	ldrb	r3, [r7, #14]
 8003760:	4a0e      	ldr	r2, [pc, #56]	; (800379c <HAL_SPI_TxHalfCpltCallback+0x178>)
 8003762:	21f8      	movs	r1, #248	; 0xf8
 8003764:	54d1      	strb	r1, [r2, r3]
					j++;
 8003766:	7bbb      	ldrb	r3, [r7, #14]
 8003768:	3301      	adds	r3, #1
 800376a:	73bb      	strb	r3, [r7, #14]
				for(int8_t k=7; k>=0; k--)
 800376c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	72fb      	strb	r3, [r7, #11]
 8003778:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800377c:	2b00      	cmp	r3, #0
 800377e:	dad6      	bge.n	800372e <HAL_SPI_TxHalfCpltCallback+0x10a>
				CurrentLed++;
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_SPI_TxHalfCpltCallback+0x17c>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_SPI_TxHalfCpltCallback+0x17c>)
 800378a:	801a      	strh	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20009178 	.word	0x20009178
 8003798:	200000fa 	.word	0x200000fa
 800379c:	200000c8 	.word	0x200000c8
 80037a0:	200000f8 	.word	0x200000f8
 80037a4:	2000917c 	.word	0x2000917c

080037a8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	if(hspi == hspi_ws2812b)
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_SPI_TxCpltCallback+0x148>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	f040 8095 	bne.w	80038e6 <HAL_SPI_TxCpltCallback+0x13e>
	{
		if(CurrentLed > WS2812B_LEDS)
 80037bc:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_SPI_TxCpltCallback+0x14c>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d905      	bls.n	80037d0 <HAL_SPI_TxCpltCallback+0x28>
		{
			HAL_SPI_DMAStop(hspi_ws2812b);
 80037c4:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_SPI_TxCpltCallback+0x148>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 ff0b 	bl	80065e4 <HAL_SPI_DMAStop>
			}
			CurrentLed++;
		}
	}

}
 80037ce:	e08a      	b.n	80038e6 <HAL_SPI_TxCpltCallback+0x13e>
			uint8_t j = 24;
 80037d0:	2318      	movs	r3, #24
 80037d2:	73fb      	strb	r3, [r7, #15]
			for(int8_t k=7; k>=0; k--)
 80037d4:	2307      	movs	r3, #7
 80037d6:	73bb      	strb	r3, [r7, #14]
 80037d8:	e024      	b.n	8003824 <HAL_SPI_TxCpltCallback+0x7c>
				if((ws2812b_array[CurrentLed].green & (1<<k)) == 0)
 80037da:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_SPI_TxCpltCallback+0x14c>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	4a45      	ldr	r2, [pc, #276]	; (80038f8 <HAL_SPI_TxCpltCallback+0x150>)
 80037e2:	460b      	mov	r3, r1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	440b      	add	r3, r1
 80037e8:	4413      	add	r3, r2
 80037ea:	3301      	adds	r3, #1
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f4:	fa42 f303 	asr.w	r3, r2, r3
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_SPI_TxCpltCallback+0x62>
					buffer[j] = zero;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <HAL_SPI_TxCpltCallback+0x154>)
 8003804:	21c0      	movs	r1, #192	; 0xc0
 8003806:	54d1      	strb	r1, [r2, r3]
 8003808:	e003      	b.n	8003812 <HAL_SPI_TxCpltCallback+0x6a>
					buffer[j] = one;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	4a3b      	ldr	r2, [pc, #236]	; (80038fc <HAL_SPI_TxCpltCallback+0x154>)
 800380e:	21f8      	movs	r1, #248	; 0xf8
 8003810:	54d1      	strb	r1, [r2, r3]
				j++;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3301      	adds	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
			for(int8_t k=7; k>=0; k--)
 8003818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	73bb      	strb	r3, [r7, #14]
 8003824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003828:	2b00      	cmp	r3, #0
 800382a:	dad6      	bge.n	80037da <HAL_SPI_TxCpltCallback+0x32>
			for(int8_t k=7; k>=0; k--)
 800382c:	2307      	movs	r3, #7
 800382e:	737b      	strb	r3, [r7, #13]
 8003830:	e023      	b.n	800387a <HAL_SPI_TxCpltCallback+0xd2>
				if((ws2812b_array[CurrentLed].red & (1<<k)) == 0)
 8003832:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <HAL_SPI_TxCpltCallback+0x14c>)
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	4619      	mov	r1, r3
 8003838:	4a2f      	ldr	r2, [pc, #188]	; (80038f8 <HAL_SPI_TxCpltCallback+0x150>)
 800383a:	460b      	mov	r3, r1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	440b      	add	r3, r1
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800384a:	fa42 f303 	asr.w	r3, r2, r3
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <HAL_SPI_TxCpltCallback+0xb8>
					buffer[j] = zero;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <HAL_SPI_TxCpltCallback+0x154>)
 800385a:	21c0      	movs	r1, #192	; 0xc0
 800385c:	54d1      	strb	r1, [r2, r3]
 800385e:	e003      	b.n	8003868 <HAL_SPI_TxCpltCallback+0xc0>
					buffer[j] = one;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	4a26      	ldr	r2, [pc, #152]	; (80038fc <HAL_SPI_TxCpltCallback+0x154>)
 8003864:	21f8      	movs	r1, #248	; 0xf8
 8003866:	54d1      	strb	r1, [r2, r3]
				j++;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
			for(int8_t k=7; k>=0; k--)
 800386e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	737b      	strb	r3, [r7, #13]
 800387a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800387e:	2b00      	cmp	r3, #0
 8003880:	dad7      	bge.n	8003832 <HAL_SPI_TxCpltCallback+0x8a>
			for(int8_t k=7; k>=0; k--)
 8003882:	2307      	movs	r3, #7
 8003884:	733b      	strb	r3, [r7, #12]
 8003886:	e024      	b.n	80038d2 <HAL_SPI_TxCpltCallback+0x12a>
				if((ws2812b_array[CurrentLed].blue & (1<<k)) == 0)
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_SPI_TxCpltCallback+0x14c>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	4619      	mov	r1, r3
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <HAL_SPI_TxCpltCallback+0x150>)
 8003890:	460b      	mov	r3, r1
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	440b      	add	r3, r1
 8003896:	4413      	add	r3, r2
 8003898:	3302      	adds	r3, #2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80038a2:	fa42 f303 	asr.w	r3, r2, r3
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <HAL_SPI_TxCpltCallback+0x110>
					buffer[j] = zero;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	4a12      	ldr	r2, [pc, #72]	; (80038fc <HAL_SPI_TxCpltCallback+0x154>)
 80038b2:	21c0      	movs	r1, #192	; 0xc0
 80038b4:	54d1      	strb	r1, [r2, r3]
 80038b6:	e003      	b.n	80038c0 <HAL_SPI_TxCpltCallback+0x118>
					buffer[j] = one;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <HAL_SPI_TxCpltCallback+0x154>)
 80038bc:	21f8      	movs	r1, #248	; 0xf8
 80038be:	54d1      	strb	r1, [r2, r3]
				j++;
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	3301      	adds	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
			for(int8_t k=7; k>=0; k--)
 80038c6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	733b      	strb	r3, [r7, #12]
 80038d2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	dad6      	bge.n	8003888 <HAL_SPI_TxCpltCallback+0xe0>
			CurrentLed++;
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_SPI_TxCpltCallback+0x14c>)
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_SPI_TxCpltCallback+0x14c>)
 80038e4:	801a      	strh	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20009178 	.word	0x20009178
 80038f4:	200000f8 	.word	0x200000f8
 80038f8:	2000917c 	.word	0x2000917c
 80038fc:	200000c8 	.word	0x200000c8

08003900 <sine8>:
  150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
  182,184,186,188,191,193,195,197,199,202,204,206,209,211,213,215,
  218,220,223,225,227,230,232,235,237,240,242,245,247,250,252,255};

uint8_t sine8(uint8_t x)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
	return _sineTable[x];
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4a03      	ldr	r2, [pc, #12]	; (800391c <sine8+0x1c>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	0800b5c0 	.word	0x0800b5c0

08003920 <gamma8>:

uint8_t gamma8(uint8_t x)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
	return _gammaTable[x];
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	4a03      	ldr	r2, [pc, #12]	; (800393c <gamma8+0x1c>)
 800392e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	0800b6c0 	.word	0x0800b6c0

08003940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003978 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003944:	480d      	ldr	r0, [pc, #52]	; (800397c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003946:	490e      	ldr	r1, [pc, #56]	; (8003980 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003948:	4a0e      	ldr	r2, [pc, #56]	; (8003984 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800394a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800394c:	e002      	b.n	8003954 <LoopCopyDataInit>

0800394e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800394e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003952:	3304      	adds	r3, #4

08003954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003958:	d3f9      	bcc.n	800394e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800395a:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800395c:	4c0b      	ldr	r4, [pc, #44]	; (800398c <LoopFillZerobss+0x26>)
  movs r3, #0
 800395e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003960:	e001      	b.n	8003966 <LoopFillZerobss>

08003962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003964:	3204      	adds	r2, #4

08003966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003968:	d3fb      	bcc.n	8003962 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800396a:	f7ff fc09 	bl	8003180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800396e:	f005 fb93 	bl	8009098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003972:	f7fe f81d 	bl	80019b0 <main>
  bx  lr    
 8003976:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800397c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003980:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003984:	0801ed7c 	.word	0x0801ed7c
  ldr r2, =_sbss
 8003988:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800398c:	200091b4 	.word	0x200091b4

08003990 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003990:	e7fe      	b.n	8003990 <DMA1_Stream0_IRQHandler>
	...

08003994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_Init+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <HAL_Init+0x40>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_Init+0x40>)
 80039aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_Init+0x40>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039bc:	2003      	movs	r0, #3
 80039be:	f000 fe9b 	bl	80046f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039c2:	200f      	movs	r0, #15
 80039c4:	f000 f808 	bl	80039d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c8:	f7ff fa72 	bl	8002eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00

080039d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_InitTick+0x54>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_InitTick+0x58>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 feb3 	bl	8004762 <HAL_SYSTICK_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e00e      	b.n	8003a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0f      	cmp	r3, #15
 8003a0a:	d80a      	bhi.n	8003a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	f000 fe7b 	bl	800470e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a18:	4a06      	ldr	r2, [pc, #24]	; (8003a34 <HAL_InitTick+0x5c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000028 	.word	0x20000028
 8003a30:	20000030 	.word	0x20000030
 8003a34:	2000002c 	.word	0x2000002c

08003a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_IncTick+0x20>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_IncTick+0x24>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_IncTick+0x24>)
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000030 	.word	0x20000030
 8003a5c:	200091a0 	.word	0x200091a0

08003a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return uwTick;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_GetTick+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	200091a0 	.word	0x200091a0

08003a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a80:	f7ff ffee 	bl	8003a60 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d005      	beq.n	8003a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_Delay+0x44>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a9e:	bf00      	nop
 8003aa0:	f7ff ffde 	bl	8003a60 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d8f7      	bhi.n	8003aa0 <HAL_Delay+0x28>
  {
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000030 	.word	0x20000030

08003ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e033      	b.n	8003b3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd fbf2 	bl	80012c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d118      	bne.n	8003b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b06:	f023 0302 	bic.w	r3, r3, #2
 8003b0a:	f043 0202 	orr.w	r2, r3, #2
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fb98 	bl	8004248 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f023 0303 	bic.w	r3, r3, #3
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b2e:	e001      	b.n	8003b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d049      	beq.n	8003c1c <HAL_ADC_IRQHandler+0xd6>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d046      	beq.n	8003c1c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d12b      	bne.n	8003c0c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d127      	bne.n	8003c0c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d006      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d119      	bne.n	8003c0c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0220 	bic.w	r2, r2, #32
 8003be6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fe fd2f 	bl	8002670 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f06f 0212 	mvn.w	r2, #18
 8003c1a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d057      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x1b8>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d054      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d139      	bne.n	8003cee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d12b      	bne.n	8003cee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d124      	bne.n	8003cee <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11d      	bne.n	8003cee <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d119      	bne.n	8003cee <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f043 0201 	orr.w	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fc28 	bl	8004544 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 020c 	mvn.w	r2, #12
 8003cfc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d017      	beq.n	8003d60 <HAL_ADC_IRQHandler+0x21a>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d014      	beq.n	8003d60 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10d      	bne.n	8003d60 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f933 	bl	8003fbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0201 	mvn.w	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	bf0c      	ite	eq
 8003d6e:	2301      	moveq	r3, #1
 8003d70:	2300      	movne	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_ADC_IRQHandler+0x27a>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d012      	beq.n	8003dc0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f043 0202 	orr.w	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f06f 0220 	mvn.w	r2, #32
 8003dae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f90d 	bl	8003fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f06f 0220 	mvn.w	r2, #32
 8003dbe:	601a      	str	r2, [r3, #0]
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_ADC_Start_DMA+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0ce      	b.n	8003f84 <HAL_ADC_Start_DMA+0x1bc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d018      	beq.n	8003e2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e0c:	4b5f      	ldr	r3, [pc, #380]	; (8003f8c <HAL_ADC_Start_DMA+0x1c4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a5f      	ldr	r2, [pc, #380]	; (8003f90 <HAL_ADC_Start_DMA+0x1c8>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0c9a      	lsrs	r2, r3, #18
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e20:	e002      	b.n	8003e28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f9      	bne.n	8003e22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3c:	d107      	bne.n	8003e4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 8086 	bne.w	8003f6a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9c:	d106      	bne.n	8003eac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f023 0206 	bic.w	r2, r3, #6
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
 8003eaa:	e002      	b.n	8003eb2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_ADC_Start_DMA+0x1cc>)
 8003ebc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <HAL_ADC_Start_DMA+0x1d0>)
 8003ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <HAL_ADC_Start_DMA+0x1d4>)
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	4a33      	ldr	r2, [pc, #204]	; (8003fa0 <HAL_ADC_Start_DMA+0x1d8>)
 8003ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ede:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003eee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	334c      	adds	r3, #76	; 0x4c
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f000 fce2 	bl	80048d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10f      	bne.n	8003f40 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d129      	bne.n	8003f82 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	e020      	b.n	8003f82 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_ADC_Start_DMA+0x1dc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d11b      	bne.n	8003f82 <HAL_ADC_Start_DMA+0x1ba>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d114      	bne.n	8003f82 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e00b      	b.n	8003f82 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000028 	.word	0x20000028
 8003f90:	431bde83 	.word	0x431bde83
 8003f94:	40012300 	.word	0x40012300
 8003f98:	08004441 	.word	0x08004441
 8003f9c:	080044fb 	.word	0x080044fb
 8003fa0:	08004517 	.word	0x08004517
 8003fa4:	40012000 	.word	0x40012000

08003fa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x1c>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e113      	b.n	8004228 <HAL_ADC_ConfigChannel+0x244>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b09      	cmp	r3, #9
 800400e:	d925      	bls.n	800405c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	3b1e      	subs	r3, #30
 8004026:	2207      	movs	r2, #7
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43da      	mvns	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	400a      	ands	r2, r1
 8004034:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68d9      	ldr	r1, [r3, #12]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	4618      	mov	r0, r3
 8004048:	4603      	mov	r3, r0
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4403      	add	r3, r0
 800404e:	3b1e      	subs	r3, #30
 8004050:	409a      	lsls	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	e022      	b.n	80040a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6919      	ldr	r1, [r3, #16]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	2207      	movs	r2, #7
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6919      	ldr	r1, [r3, #16]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	4618      	mov	r0, r3
 8004092:	4603      	mov	r3, r0
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4403      	add	r3, r0
 8004098:	409a      	lsls	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d824      	bhi.n	80040f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	3b05      	subs	r3, #5
 80040bc:	221f      	movs	r2, #31
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	400a      	ands	r2, r1
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	4618      	mov	r0, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	3b05      	subs	r3, #5
 80040e6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	635a      	str	r2, [r3, #52]	; 0x34
 80040f2:	e04c      	b.n	800418e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d824      	bhi.n	8004146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	3b23      	subs	r3, #35	; 0x23
 800410e:	221f      	movs	r2, #31
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43da      	mvns	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	400a      	ands	r2, r1
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	4618      	mov	r0, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	3b23      	subs	r3, #35	; 0x23
 8004138:	fa00 f203 	lsl.w	r2, r0, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
 8004144:	e023      	b.n	800418e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	3b41      	subs	r3, #65	; 0x41
 8004158:	221f      	movs	r2, #31
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	4618      	mov	r0, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	3b41      	subs	r3, #65	; 0x41
 8004182:	fa00 f203 	lsl.w	r2, r0, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_ADC_ConfigChannel+0x250>)
 8004190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a28      	ldr	r2, [pc, #160]	; (8004238 <HAL_ADC_ConfigChannel+0x254>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10f      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x1d8>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b12      	cmp	r3, #18
 80041a2:	d10b      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <HAL_ADC_ConfigChannel+0x254>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d12b      	bne.n	800421e <HAL_ADC_ConfigChannel+0x23a>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_ADC_ConfigChannel+0x258>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <HAL_ADC_ConfigChannel+0x1f4>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b11      	cmp	r3, #17
 80041d6:	d122      	bne.n	800421e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a11      	ldr	r2, [pc, #68]	; (800423c <HAL_ADC_ConfigChannel+0x258>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d111      	bne.n	800421e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_ADC_ConfigChannel+0x25c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a11      	ldr	r2, [pc, #68]	; (8004244 <HAL_ADC_ConfigChannel+0x260>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	0c9a      	lsrs	r2, r3, #18
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004210:	e002      	b.n	8004218 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3b01      	subs	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f9      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40012300 	.word	0x40012300
 8004238:	40012000 	.word	0x40012000
 800423c:	10000012 	.word	0x10000012
 8004240:	20000028 	.word	0x20000028
 8004244:	431bde83 	.word	0x431bde83

08004248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004250:	4b79      	ldr	r3, [pc, #484]	; (8004438 <ADC_Init+0x1f0>)
 8004252:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	4a58      	ldr	r2, [pc, #352]	; (800443c <ADC_Init+0x1f4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e00f      	b.n	8004346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0202 	bic.w	r2, r2, #2
 8004354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7e1b      	ldrb	r3, [r3, #24]
 8004360:	005a      	lsls	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	3b01      	subs	r3, #1
 80043a0:	035a      	lsls	r2, r3, #13
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	e007      	b.n	80043bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	051a      	lsls	r2, r3, #20
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043fe:	025a      	lsls	r2, r3, #9
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6899      	ldr	r1, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	029a      	lsls	r2, r3, #10
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40012300 	.word	0x40012300
 800443c:	0f000001 	.word	0x0f000001

08004440 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004456:	2b00      	cmp	r3, #0
 8004458:	d13c      	bne.n	80044d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12b      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004478:	2b00      	cmp	r3, #0
 800447a:	d127      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004494:	2b00      	cmp	r3, #0
 8004496:	d119      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0220 	bic.w	r2, r2, #32
 80044a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7fe f8cf 	bl	8002670 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044d2:	e00e      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fd75 	bl	8003fd0 <HAL_ADC_ErrorCallback>
}
 80044e6:	e004      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fd4d 	bl	8003fa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2240      	movs	r2, #64	; 0x40
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fd4a 	bl	8003fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <__NVIC_SetPriorityGrouping+0x44>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004574:	4013      	ands	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800458a:	4a04      	ldr	r2, [pc, #16]	; (800459c <__NVIC_SetPriorityGrouping+0x44>)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	60d3      	str	r3, [r2, #12]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <__NVIC_GetPriorityGrouping+0x18>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	0a1b      	lsrs	r3, r3, #8
 80045aa:	f003 0307 	and.w	r3, r3, #7
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	db0b      	blt.n	80045e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	f003 021f 	and.w	r2, r3, #31
 80045d4:	4907      	ldr	r1, [pc, #28]	; (80045f4 <__NVIC_EnableIRQ+0x38>)
 80045d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2001      	movs	r0, #1
 80045de:	fa00 f202 	lsl.w	r2, r0, r2
 80045e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	e000e100 	.word	0xe000e100

080045f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004608:	2b00      	cmp	r3, #0
 800460a:	db0a      	blt.n	8004622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	b2da      	uxtb	r2, r3
 8004610:	490c      	ldr	r1, [pc, #48]	; (8004644 <__NVIC_SetPriority+0x4c>)
 8004612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004616:	0112      	lsls	r2, r2, #4
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	440b      	add	r3, r1
 800461c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004620:	e00a      	b.n	8004638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	4908      	ldr	r1, [pc, #32]	; (8004648 <__NVIC_SetPriority+0x50>)
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	3b04      	subs	r3, #4
 8004630:	0112      	lsls	r2, r2, #4
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	440b      	add	r3, r1
 8004636:	761a      	strb	r2, [r3, #24]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000e100 	.word	0xe000e100
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f1c3 0307 	rsb	r3, r3, #7
 8004666:	2b04      	cmp	r3, #4
 8004668:	bf28      	it	cs
 800466a:	2304      	movcs	r3, #4
 800466c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	3304      	adds	r3, #4
 8004672:	2b06      	cmp	r3, #6
 8004674:	d902      	bls.n	800467c <NVIC_EncodePriority+0x30>
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	3b03      	subs	r3, #3
 800467a:	e000      	b.n	800467e <NVIC_EncodePriority+0x32>
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004680:	f04f 32ff 	mov.w	r2, #4294967295
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43da      	mvns	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	401a      	ands	r2, r3
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004694:	f04f 31ff 	mov.w	r1, #4294967295
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	43d9      	mvns	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a4:	4313      	orrs	r3, r2
         );
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3724      	adds	r7, #36	; 0x24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c4:	d301      	bcc.n	80046ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046c6:	2301      	movs	r3, #1
 80046c8:	e00f      	b.n	80046ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ca:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <SysTick_Config+0x40>)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046d2:	210f      	movs	r1, #15
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	f7ff ff8e 	bl	80045f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <SysTick_Config+0x40>)
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <SysTick_Config+0x40>)
 80046e4:	2207      	movs	r2, #7
 80046e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	e000e010 	.word	0xe000e010

080046f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff29 	bl	8004558 <__NVIC_SetPriorityGrouping>
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af00      	add	r7, sp, #0
 8004714:	4603      	mov	r3, r0
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004720:	f7ff ff3e 	bl	80045a0 <__NVIC_GetPriorityGrouping>
 8004724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f7ff ff8e 	bl	800464c <NVIC_EncodePriority>
 8004730:	4602      	mov	r2, r0
 8004732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff5d 	bl	80045f8 <__NVIC_SetPriority>
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff31 	bl	80045bc <__NVIC_EnableIRQ>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ffa2 	bl	80046b4 <SysTick_Config>
 8004770:	4603      	mov	r3, r0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004788:	f7ff f96a 	bl	8003a60 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e099      	b.n	80048cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b8:	e00f      	b.n	80047da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ba:	f7ff f951 	bl	8003a60 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d908      	bls.n	80047da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2203      	movs	r2, #3
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e078      	b.n	80048cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e8      	bne.n	80047ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <HAL_DMA_Init+0x158>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b04      	cmp	r3, #4
 8004832:	d107      	bne.n	8004844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	4313      	orrs	r3, r2
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0307 	bic.w	r3, r3, #7
 800485a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b04      	cmp	r3, #4
 800486c:	d117      	bne.n	800489e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00e      	beq.n	800489e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fb0f 	bl	8004ea4 <DMA_CheckFifoParam>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2240      	movs	r2, #64	; 0x40
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800489a:	2301      	movs	r3, #1
 800489c:	e016      	b.n	80048cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fac6 	bl	8004e38 <DMA_CalcBaseAndBitshift>
 80048ac:	4603      	mov	r3, r0
 80048ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	223f      	movs	r2, #63	; 0x3f
 80048b6:	409a      	lsls	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	f010803f 	.word	0xf010803f

080048d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_DMA_Start_IT+0x26>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e040      	b.n	8004980 <HAL_DMA_Start_IT+0xa8>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b01      	cmp	r3, #1
 8004910:	d12f      	bne.n	8004972 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fa58 	bl	8004ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	223f      	movs	r2, #63	; 0x3f
 8004932:	409a      	lsls	r2, r3
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0216 	orr.w	r2, r2, #22
 8004946:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0208 	orr.w	r2, r2, #8
 800495e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e005      	b.n	800497e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800497a:	2302      	movs	r3, #2
 800497c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004996:	f7ff f863 	bl	8003a60 <HAL_GetTick>
 800499a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d008      	beq.n	80049ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e052      	b.n	8004a60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0216 	bic.w	r2, r2, #22
 80049c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_DMA_Abort+0x62>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0208 	bic.w	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0a:	e013      	b.n	8004a34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a0c:	f7ff f828 	bl	8003a60 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d90c      	bls.n	8004a34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2203      	movs	r2, #3
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e015      	b.n	8004a60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e4      	bne.n	8004a0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	223f      	movs	r2, #63	; 0x3f
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d004      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2280      	movs	r2, #128	; 0x80
 8004a80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e00c      	b.n	8004aa0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2205      	movs	r2, #5
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ab8:	4b92      	ldr	r3, [pc, #584]	; (8004d04 <HAL_DMA_IRQHandler+0x258>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a92      	ldr	r2, [pc, #584]	; (8004d08 <HAL_DMA_IRQHandler+0x25c>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	0a9b      	lsrs	r3, r3, #10
 8004ac4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01a      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b04:	2208      	movs	r2, #8
 8004b06:	409a      	lsls	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f043 0201 	orr.w	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d012      	beq.n	8004b4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f043 0202 	orr.w	r2, r3, #2
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	2204      	movs	r2, #4
 8004b54:	409a      	lsls	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d012      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	2204      	movs	r2, #4
 8004b72:	409a      	lsls	r2, r3
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7c:	f043 0204 	orr.w	r2, r3, #4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b88:	2210      	movs	r2, #16
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d043      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d03c      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d018      	beq.n	8004bee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d108      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d024      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
 8004bda:	e01f      	b.n	8004c1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
 8004bec:	e016      	b.n	8004c1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d107      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0208 	bic.w	r2, r2, #8
 8004c0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	2220      	movs	r2, #32
 8004c22:	409a      	lsls	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 808e 	beq.w	8004d4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8086 	beq.w	8004d4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	2220      	movs	r2, #32
 8004c44:	409a      	lsls	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	d136      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0216 	bic.w	r2, r2, #22
 8004c64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_DMA_IRQHandler+0x1da>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0208 	bic.w	r2, r2, #8
 8004c94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9a:	223f      	movs	r2, #63	; 0x3f
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d07d      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
        }
        return;
 8004cc2:	e078      	b.n	8004db6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01c      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d108      	bne.n	8004cf2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d030      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
 8004cf0:	e02b      	b.n	8004d4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d027      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
 8004d02:	e022      	b.n	8004d4a <HAL_DMA_IRQHandler+0x29e>
 8004d04:	20000028 	.word	0x20000028
 8004d08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10f      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0210 	bic.w	r2, r2, #16
 8004d28:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d032      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2205      	movs	r2, #5
 8004d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d307      	bcc.n	8004d92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f2      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x2ca>
 8004d90:	e000      	b.n	8004d94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d92:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
 8004db4:	e000      	b.n	8004db8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004db6:	bf00      	nop
    }
  }
}
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop

08004dc0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dce:	b2db      	uxtb	r3, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d108      	bne.n	8004e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e1a:	e007      	b.n	8004e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b10      	subs	r3, #16
 8004e48:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <DMA_CalcBaseAndBitshift+0x64>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e52:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d909      	bls.n	8004e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	1d1a      	adds	r2, r3, #4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58
 8004e78:	e007      	b.n	8004e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	aaaaaaab 	.word	0xaaaaaaab
 8004ea0:	0800b7c0 	.word	0x0800b7c0

08004ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d11f      	bne.n	8004efe <DMA_CheckFifoParam+0x5a>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d856      	bhi.n	8004f72 <DMA_CheckFifoParam+0xce>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <DMA_CheckFifoParam+0x28>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004eef 	.word	0x08004eef
 8004ed4:	08004edd 	.word	0x08004edd
 8004ed8:	08004f73 	.word	0x08004f73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d046      	beq.n	8004f76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e043      	b.n	8004f76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ef6:	d140      	bne.n	8004f7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efc:	e03d      	b.n	8004f7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f06:	d121      	bne.n	8004f4c <DMA_CheckFifoParam+0xa8>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d837      	bhi.n	8004f7e <DMA_CheckFifoParam+0xda>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <DMA_CheckFifoParam+0x70>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f2b 	.word	0x08004f2b
 8004f1c:	08004f25 	.word	0x08004f25
 8004f20:	08004f3d 	.word	0x08004f3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e030      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d025      	beq.n	8004f82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f3a:	e022      	b.n	8004f82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f44:	d11f      	bne.n	8004f86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f4a:	e01c      	b.n	8004f86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d903      	bls.n	8004f5a <DMA_CheckFifoParam+0xb6>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d003      	beq.n	8004f60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f58:	e018      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5e:	e015      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00e      	beq.n	8004f8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e00b      	b.n	8004f8a <DMA_CheckFifoParam+0xe6>
      break;
 8004f72:	bf00      	nop
 8004f74:	e00a      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f76:	bf00      	nop
 8004f78:	e008      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e006      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f7e:	bf00      	nop
 8004f80:	e004      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f82:	bf00      	nop
 8004f84:	e002      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f86:	bf00      	nop
 8004f88:	e000      	b.n	8004f8c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop

08004f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b089      	sub	sp, #36	; 0x24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e159      	b.n	800526c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fb8:	2201      	movs	r2, #1
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	f040 8148 	bne.w	8005266 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d005      	beq.n	8004fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d130      	bne.n	8005050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43db      	mvns	r3, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4313      	orrs	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005024:	2201      	movs	r2, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 0201 	and.w	r2, r3, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	2b03      	cmp	r3, #3
 800505a:	d017      	beq.n	800508c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	2203      	movs	r2, #3
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d123      	bne.n	80050e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	08da      	lsrs	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3208      	adds	r2, #8
 80050a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	220f      	movs	r2, #15
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	08da      	lsrs	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3208      	adds	r2, #8
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	2203      	movs	r2, #3
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 0203 	and.w	r2, r3, #3
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80a2 	beq.w	8005266 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	4b57      	ldr	r3, [pc, #348]	; (8005284 <HAL_GPIO_Init+0x2e8>)
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	4a56      	ldr	r2, [pc, #344]	; (8005284 <HAL_GPIO_Init+0x2e8>)
 800512c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005130:	6453      	str	r3, [r2, #68]	; 0x44
 8005132:	4b54      	ldr	r3, [pc, #336]	; (8005284 <HAL_GPIO_Init+0x2e8>)
 8005134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800513e:	4a52      	ldr	r2, [pc, #328]	; (8005288 <HAL_GPIO_Init+0x2ec>)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	3302      	adds	r3, #2
 8005146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	220f      	movs	r2, #15
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a49      	ldr	r2, [pc, #292]	; (800528c <HAL_GPIO_Init+0x2f0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d019      	beq.n	800519e <HAL_GPIO_Init+0x202>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a48      	ldr	r2, [pc, #288]	; (8005290 <HAL_GPIO_Init+0x2f4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_GPIO_Init+0x1fe>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a47      	ldr	r2, [pc, #284]	; (8005294 <HAL_GPIO_Init+0x2f8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00d      	beq.n	8005196 <HAL_GPIO_Init+0x1fa>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a46      	ldr	r2, [pc, #280]	; (8005298 <HAL_GPIO_Init+0x2fc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <HAL_GPIO_Init+0x1f6>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a45      	ldr	r2, [pc, #276]	; (800529c <HAL_GPIO_Init+0x300>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <HAL_GPIO_Init+0x1f2>
 800518a:	2304      	movs	r3, #4
 800518c:	e008      	b.n	80051a0 <HAL_GPIO_Init+0x204>
 800518e:	2307      	movs	r3, #7
 8005190:	e006      	b.n	80051a0 <HAL_GPIO_Init+0x204>
 8005192:	2303      	movs	r3, #3
 8005194:	e004      	b.n	80051a0 <HAL_GPIO_Init+0x204>
 8005196:	2302      	movs	r3, #2
 8005198:	e002      	b.n	80051a0 <HAL_GPIO_Init+0x204>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <HAL_GPIO_Init+0x204>
 800519e:	2300      	movs	r3, #0
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	f002 0203 	and.w	r2, r2, #3
 80051a6:	0092      	lsls	r2, r2, #2
 80051a8:	4093      	lsls	r3, r2
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051b0:	4935      	ldr	r1, [pc, #212]	; (8005288 <HAL_GPIO_Init+0x2ec>)
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	3302      	adds	r3, #2
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051be:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <HAL_GPIO_Init+0x304>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051e2:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <HAL_GPIO_Init+0x304>)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051e8:	4b2d      	ldr	r3, [pc, #180]	; (80052a0 <HAL_GPIO_Init+0x304>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800520c:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <HAL_GPIO_Init+0x304>)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005212:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <HAL_GPIO_Init+0x304>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_GPIO_Init+0x304>)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800523c:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_GPIO_Init+0x304>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005260:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <HAL_GPIO_Init+0x304>)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3301      	adds	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b0f      	cmp	r3, #15
 8005270:	f67f aea2 	bls.w	8004fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3724      	adds	r7, #36	; 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800
 8005288:	40013800 	.word	0x40013800
 800528c:	40020000 	.word	0x40020000
 8005290:	40020400 	.word	0x40020400
 8005294:	40020800 	.word	0x40020800
 8005298:	40020c00 	.word	0x40020c00
 800529c:	40021000 	.word	0x40021000
 80052a0:	40013c00 	.word	0x40013c00

080052a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052bc:	2301      	movs	r3, #1
 80052be:	73fb      	strb	r3, [r7, #15]
 80052c0:	e001      	b.n	80052c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
 80052e0:	4613      	mov	r3, r2
 80052e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052e4:	787b      	ldrb	r3, [r7, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052f0:	e003      	b.n	80052fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	041a      	lsls	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	619a      	str	r2, [r3, #24]
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e264      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d075      	beq.n	8005412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005326:	4ba3      	ldr	r3, [pc, #652]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b04      	cmp	r3, #4
 8005330:	d00c      	beq.n	800534c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005332:	4ba0      	ldr	r3, [pc, #640]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800533a:	2b08      	cmp	r3, #8
 800533c:	d112      	bne.n	8005364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800533e:	4b9d      	ldr	r3, [pc, #628]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534a:	d10b      	bne.n	8005364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534c:	4b99      	ldr	r3, [pc, #612]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05b      	beq.n	8005410 <HAL_RCC_OscConfig+0x108>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d157      	bne.n	8005410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e23f      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536c:	d106      	bne.n	800537c <HAL_RCC_OscConfig+0x74>
 800536e:	4b91      	ldr	r3, [pc, #580]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a90      	ldr	r2, [pc, #576]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e01d      	b.n	80053b8 <HAL_RCC_OscConfig+0xb0>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x98>
 8005386:	4b8b      	ldr	r3, [pc, #556]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a8a      	ldr	r2, [pc, #552]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b88      	ldr	r3, [pc, #544]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a87      	ldr	r2, [pc, #540]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e00b      	b.n	80053b8 <HAL_RCC_OscConfig+0xb0>
 80053a0:	4b84      	ldr	r3, [pc, #528]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a83      	ldr	r2, [pc, #524]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4b81      	ldr	r3, [pc, #516]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a80      	ldr	r2, [pc, #512]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80053b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fe fb4e 	bl	8003a60 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053c8:	f7fe fb4a 	bl	8003a60 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b64      	cmp	r3, #100	; 0x64
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e204      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	4b76      	ldr	r3, [pc, #472]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0xc0>
 80053e6:	e014      	b.n	8005412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fe fb3a 	bl	8003a60 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fe fb36 	bl	8003a60 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	; 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e1f0      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	4b6c      	ldr	r3, [pc, #432]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0xe8>
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d063      	beq.n	80054e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800541e:	4b65      	ldr	r3, [pc, #404]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800542a:	4b62      	ldr	r3, [pc, #392]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005432:	2b08      	cmp	r3, #8
 8005434:	d11c      	bne.n	8005470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005436:	4b5f      	ldr	r3, [pc, #380]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d116      	bne.n	8005470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005442:	4b5c      	ldr	r3, [pc, #368]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_RCC_OscConfig+0x152>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d001      	beq.n	800545a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e1c4      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545a:	4b56      	ldr	r3, [pc, #344]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4952      	ldr	r1, [pc, #328]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800546a:	4313      	orrs	r3, r2
 800546c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800546e:	e03a      	b.n	80054e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005478:	4b4f      	ldr	r3, [pc, #316]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fe faef 	bl	8003a60 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005486:	f7fe faeb 	bl	8003a60 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e1a5      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005498:	4b46      	ldr	r3, [pc, #280]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0302 	and.w	r3, r3, #2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0f0      	beq.n	8005486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a4:	4b43      	ldr	r3, [pc, #268]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4940      	ldr	r1, [pc, #256]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]
 80054b8:	e015      	b.n	80054e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ba:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <HAL_RCC_OscConfig+0x2b0>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fe face 	bl	8003a60 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c8:	f7fe faca 	bl	8003a60 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e184      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054da:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d030      	beq.n	8005554 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d016      	beq.n	8005528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054fa:	4b30      	ldr	r3, [pc, #192]	; (80055bc <HAL_RCC_OscConfig+0x2b4>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fe faae 	bl	8003a60 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005508:	f7fe faaa 	bl	8003a60 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e164      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551a:	4b26      	ldr	r3, [pc, #152]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x200>
 8005526:	e015      	b.n	8005554 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005528:	4b24      	ldr	r3, [pc, #144]	; (80055bc <HAL_RCC_OscConfig+0x2b4>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552e:	f7fe fa97 	bl	8003a60 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005536:	f7fe fa93 	bl	8003a60 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e14d      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	4b1a      	ldr	r3, [pc, #104]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800554a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80a0 	beq.w	80056a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005566:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005580:	6413      	str	r3, [r2, #64]	; 0x40
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <HAL_RCC_OscConfig+0x2ac>)
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_OscConfig+0x2b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d121      	bne.n	80055e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800559e:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <HAL_RCC_OscConfig+0x2b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <HAL_RCC_OscConfig+0x2b8>)
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055aa:	f7fe fa59 	bl	8003a60 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b0:	e011      	b.n	80055d6 <HAL_RCC_OscConfig+0x2ce>
 80055b2:	bf00      	nop
 80055b4:	40023800 	.word	0x40023800
 80055b8:	42470000 	.word	0x42470000
 80055bc:	42470e80 	.word	0x42470e80
 80055c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c4:	f7fe fa4c 	bl	8003a60 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e106      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d6:	4b85      	ldr	r3, [pc, #532]	; (80057ec <HAL_RCC_OscConfig+0x4e4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d106      	bne.n	80055f8 <HAL_RCC_OscConfig+0x2f0>
 80055ea:	4b81      	ldr	r3, [pc, #516]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a80      	ldr	r2, [pc, #512]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70
 80055f6:	e01c      	b.n	8005632 <HAL_RCC_OscConfig+0x32a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	d10c      	bne.n	800561a <HAL_RCC_OscConfig+0x312>
 8005600:	4b7b      	ldr	r3, [pc, #492]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	4a7a      	ldr	r2, [pc, #488]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005606:	f043 0304 	orr.w	r3, r3, #4
 800560a:	6713      	str	r3, [r2, #112]	; 0x70
 800560c:	4b78      	ldr	r3, [pc, #480]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	4a77      	ldr	r2, [pc, #476]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6713      	str	r3, [r2, #112]	; 0x70
 8005618:	e00b      	b.n	8005632 <HAL_RCC_OscConfig+0x32a>
 800561a:	4b75      	ldr	r3, [pc, #468]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	4a74      	ldr	r2, [pc, #464]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6713      	str	r3, [r2, #112]	; 0x70
 8005626:	4b72      	ldr	r3, [pc, #456]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	4a71      	ldr	r2, [pc, #452]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d015      	beq.n	8005666 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563a:	f7fe fa11 	bl	8003a60 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005642:	f7fe fa0d 	bl	8003a60 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e0c5      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	4b65      	ldr	r3, [pc, #404]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ee      	beq.n	8005642 <HAL_RCC_OscConfig+0x33a>
 8005664:	e014      	b.n	8005690 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005666:	f7fe f9fb 	bl	8003a60 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fe f9f7 	bl	8003a60 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e0af      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005684:	4b5a      	ldr	r3, [pc, #360]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ee      	bne.n	800566e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d105      	bne.n	80056a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005696:	4b56      	ldr	r3, [pc, #344]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	4a55      	ldr	r2, [pc, #340]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 800569c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 809b 	beq.w	80057e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ac:	4b50      	ldr	r3, [pc, #320]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d05c      	beq.n	8005772 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d141      	bne.n	8005744 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <HAL_RCC_OscConfig+0x4ec>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c6:	f7fe f9cb 	bl	8003a60 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ce:	f7fe f9c7 	bl	8003a60 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e081      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e0:	4b43      	ldr	r3, [pc, #268]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	019b      	lsls	r3, r3, #6
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	3b01      	subs	r3, #1
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	4937      	ldr	r1, [pc, #220]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005712:	4313      	orrs	r3, r2
 8005714:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005716:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <HAL_RCC_OscConfig+0x4ec>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fe f9a0 	bl	8003a60 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005724:	f7fe f99c 	bl	8003a60 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e056      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005736:	4b2e      	ldr	r3, [pc, #184]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x41c>
 8005742:	e04e      	b.n	80057e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005744:	4b2b      	ldr	r3, [pc, #172]	; (80057f4 <HAL_RCC_OscConfig+0x4ec>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fe f989 	bl	8003a60 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005752:	f7fe f985 	bl	8003a60 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e03f      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005764:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x44a>
 8005770:	e037      	b.n	80057e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e032      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800577e:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <HAL_RCC_OscConfig+0x4e8>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d028      	beq.n	80057de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d121      	bne.n	80057de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d11a      	bne.n	80057de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d111      	bne.n	80057de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	3b01      	subs	r3, #1
 80057c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d107      	bne.n	80057de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d001      	beq.n	80057e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40007000 	.word	0x40007000
 80057f0:	40023800 	.word	0x40023800
 80057f4:	42470060 	.word	0x42470060

080057f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0cc      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800580c:	4b68      	ldr	r3, [pc, #416]	; (80059b0 <HAL_RCC_ClockConfig+0x1b8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d90c      	bls.n	8005834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b65      	ldr	r3, [pc, #404]	; (80059b0 <HAL_RCC_ClockConfig+0x1b8>)
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	4b63      	ldr	r3, [pc, #396]	; (80059b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0b8      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d020      	beq.n	8005882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800584c:	4b59      	ldr	r3, [pc, #356]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4a58      	ldr	r2, [pc, #352]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b00      	cmp	r3, #0
 8005862:	d005      	beq.n	8005870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005864:	4b53      	ldr	r3, [pc, #332]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4a52      	ldr	r2, [pc, #328]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800586e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005870:	4b50      	ldr	r3, [pc, #320]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	494d      	ldr	r1, [pc, #308]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d044      	beq.n	8005918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d107      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005896:	4b47      	ldr	r3, [pc, #284]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d119      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e07f      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d003      	beq.n	80058b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d107      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b6:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e06f      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c6:	4b3b      	ldr	r3, [pc, #236]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e067      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058d6:	4b37      	ldr	r3, [pc, #220]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f023 0203 	bic.w	r2, r3, #3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4934      	ldr	r1, [pc, #208]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058e8:	f7fe f8ba 	bl	8003a60 <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f0:	f7fe f8b6 	bl	8003a60 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e04f      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005906:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 020c 	and.w	r2, r3, #12
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	429a      	cmp	r2, r3
 8005916:	d1eb      	bne.n	80058f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005918:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <HAL_RCC_ClockConfig+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d20c      	bcs.n	8005940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005926:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b20      	ldr	r3, [pc, #128]	; (80059b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d001      	beq.n	8005940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e032      	b.n	80059a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800594c:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4916      	ldr	r1, [pc, #88]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800596a:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	490e      	ldr	r1, [pc, #56]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800597e:	f000 f821 	bl	80059c4 <HAL_RCC_GetSysClockFreq>
 8005982:	4602      	mov	r2, r0
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	091b      	lsrs	r3, r3, #4
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	490a      	ldr	r1, [pc, #40]	; (80059b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005990:	5ccb      	ldrb	r3, [r1, r3]
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	4a09      	ldr	r2, [pc, #36]	; (80059bc <HAL_RCC_ClockConfig+0x1c4>)
 8005998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCC_ClockConfig+0x1c8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe f81a 	bl	80039d8 <HAL_InitTick>

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40023c00 	.word	0x40023c00
 80059b4:	40023800 	.word	0x40023800
 80059b8:	0800b5b0 	.word	0x0800b5b0
 80059bc:	20000028 	.word	0x20000028
 80059c0:	2000002c 	.word	0x2000002c

080059c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	2300      	movs	r3, #0
 80059d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059dc:	4b67      	ldr	r3, [pc, #412]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 030c 	and.w	r3, r3, #12
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d00d      	beq.n	8005a04 <HAL_RCC_GetSysClockFreq+0x40>
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	f200 80bd 	bhi.w	8005b68 <HAL_RCC_GetSysClockFreq+0x1a4>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_RCC_GetSysClockFreq+0x34>
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d003      	beq.n	80059fe <HAL_RCC_GetSysClockFreq+0x3a>
 80059f6:	e0b7      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059f8:	4b61      	ldr	r3, [pc, #388]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80059fa:	60bb      	str	r3, [r7, #8]
       break;
 80059fc:	e0b7      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059fe:	4b61      	ldr	r3, [pc, #388]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a00:	60bb      	str	r3, [r7, #8]
      break;
 8005a02:	e0b4      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a04:	4b5d      	ldr	r3, [pc, #372]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a0e:	4b5b      	ldr	r3, [pc, #364]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04d      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a1a:	4b58      	ldr	r3, [pc, #352]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	099b      	lsrs	r3, r3, #6
 8005a20:	461a      	mov	r2, r3
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	ea02 0800 	and.w	r8, r2, r0
 8005a32:	ea03 0901 	and.w	r9, r3, r1
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	014b      	lsls	r3, r1, #5
 8005a44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a48:	0142      	lsls	r2, r0, #5
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	ebb0 0008 	subs.w	r0, r0, r8
 8005a52:	eb61 0109 	sbc.w	r1, r1, r9
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	018b      	lsls	r3, r1, #6
 8005a60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a64:	0182      	lsls	r2, r0, #6
 8005a66:	1a12      	subs	r2, r2, r0
 8005a68:	eb63 0301 	sbc.w	r3, r3, r1
 8005a6c:	f04f 0000 	mov.w	r0, #0
 8005a70:	f04f 0100 	mov.w	r1, #0
 8005a74:	00d9      	lsls	r1, r3, #3
 8005a76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a7a:	00d0      	lsls	r0, r2, #3
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	eb12 0208 	adds.w	r2, r2, r8
 8005a84:	eb43 0309 	adc.w	r3, r3, r9
 8005a88:	f04f 0000 	mov.w	r0, #0
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	0259      	lsls	r1, r3, #9
 8005a92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a96:	0250      	lsls	r0, r2, #9
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	f7fa fc4a 	bl	8000340 <__aeabi_uldivmod>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e04a      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab6:	4b31      	ldr	r3, [pc, #196]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	099b      	lsrs	r3, r3, #6
 8005abc:	461a      	mov	r2, r3
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ac6:	f04f 0100 	mov.w	r1, #0
 8005aca:	ea02 0400 	and.w	r4, r2, r0
 8005ace:	ea03 0501 	and.w	r5, r3, r1
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	014b      	lsls	r3, r1, #5
 8005ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ae4:	0142      	lsls	r2, r0, #5
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	1b00      	subs	r0, r0, r4
 8005aec:	eb61 0105 	sbc.w	r1, r1, r5
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	018b      	lsls	r3, r1, #6
 8005afa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005afe:	0182      	lsls	r2, r0, #6
 8005b00:	1a12      	subs	r2, r2, r0
 8005b02:	eb63 0301 	sbc.w	r3, r3, r1
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	00d9      	lsls	r1, r3, #3
 8005b10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b14:	00d0      	lsls	r0, r2, #3
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	1912      	adds	r2, r2, r4
 8005b1c:	eb45 0303 	adc.w	r3, r5, r3
 8005b20:	f04f 0000 	mov.w	r0, #0
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	0299      	lsls	r1, r3, #10
 8005b2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b2e:	0290      	lsls	r0, r2, #10
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4610      	mov	r0, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	f7fa fbfe 	bl	8000340 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4613      	mov	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	3301      	adds	r3, #1
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	60bb      	str	r3, [r7, #8]
      break;
 8005b66:	e002      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b6a:	60bb      	str	r3, [r7, #8]
      break;
 8005b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	00f42400 	.word	0x00f42400
 8005b84:	007a1200 	.word	0x007a1200

08005b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e07b      	b.n	8005c92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d108      	bne.n	8005bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005baa:	d009      	beq.n	8005bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	61da      	str	r2, [r3, #28]
 8005bb2:	e005      	b.n	8005bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fc feb0 	bl	8002940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c44:	ea42 0103 	orr.w	r1, r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	f003 0104 	and.w	r1, r3, #4
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	f003 0210 	and.w	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b088      	sub	sp, #32
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_SPI_Transmit+0x22>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e126      	b.n	8005f0a <HAL_SPI_Transmit+0x270>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cc4:	f7fd fecc 	bl	8003a60 <HAL_GetTick>
 8005cc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d002      	beq.n	8005ce0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cde:	e10b      	b.n	8005ef8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_SPI_Transmit+0x52>
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d102      	bne.n	8005cf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cf0:	e102      	b.n	8005ef8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d38:	d10f      	bne.n	8005d5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d007      	beq.n	8005d78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d80:	d14b      	bne.n	8005e1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_SPI_Transmit+0xf6>
 8005d8a:	8afb      	ldrh	r3, [r7, #22]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d13e      	bne.n	8005e0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	1c9a      	adds	r2, r3, #2
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005db4:	e02b      	b.n	8005e0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d112      	bne.n	8005dea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	881a      	ldrh	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	1c9a      	adds	r2, r3, #2
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005de8:	e011      	b.n	8005e0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dea:	f7fd fe39 	bl	8003a60 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d803      	bhi.n	8005e02 <HAL_SPI_Transmit+0x168>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d102      	bne.n	8005e08 <HAL_SPI_Transmit+0x16e>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e0c:	e074      	b.n	8005ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1ce      	bne.n	8005db6 <HAL_SPI_Transmit+0x11c>
 8005e18:	e04c      	b.n	8005eb4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_SPI_Transmit+0x18e>
 8005e22:	8afb      	ldrh	r3, [r7, #22]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d140      	bne.n	8005eaa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e4e:	e02c      	b.n	8005eaa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d113      	bne.n	8005e86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e84:	e011      	b.n	8005eaa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e86:	f7fd fdeb 	bl	8003a60 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d803      	bhi.n	8005e9e <HAL_SPI_Transmit+0x204>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d102      	bne.n	8005ea4 <HAL_SPI_Transmit+0x20a>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ea8:	e026      	b.n	8005ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1cd      	bne.n	8005e50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fe61 	bl	8006b80 <SPI_EndRxTxTransaction>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e000      	b.n	8005ef8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ef6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b088      	sub	sp, #32
 8005f16:	af02      	add	r7, sp, #8
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f2e:	d112      	bne.n	8005f56 <HAL_SPI_Receive+0x44>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10e      	bne.n	8005f56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f40:	88fa      	ldrh	r2, [r7, #6]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f8f1 	bl	8006134 <HAL_SPI_TransmitReceive>
 8005f52:	4603      	mov	r3, r0
 8005f54:	e0ea      	b.n	800612c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_SPI_Receive+0x52>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e0e3      	b.n	800612c <HAL_SPI_Receive+0x21a>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f6c:	f7fd fd78 	bl	8003a60 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d002      	beq.n	8005f84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f82:	e0ca      	b.n	800611a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_SPI_Receive+0x7e>
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f94:	e0c1      	b.n	800611a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	88fa      	ldrh	r2, [r7, #6]
 8005fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fdc:	d10f      	bne.n	8005ffe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ffc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d007      	beq.n	800601c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800601a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d162      	bne.n	80060ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006024:	e02e      	b.n	8006084 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d115      	bne.n	8006060 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f103 020c 	add.w	r2, r3, #12
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800605e:	e011      	b.n	8006084 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006060:	f7fd fcfe 	bl	8003a60 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d803      	bhi.n	8006078 <HAL_SPI_Receive+0x166>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d102      	bne.n	800607e <HAL_SPI_Receive+0x16c>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006082:	e04a      	b.n	800611a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1cb      	bne.n	8006026 <HAL_SPI_Receive+0x114>
 800608e:	e031      	b.n	80060f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b01      	cmp	r3, #1
 800609c:	d113      	bne.n	80060c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	b292      	uxth	r2, r2
 80060aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060c4:	e011      	b.n	80060ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c6:	f7fd fccb 	bl	8003a60 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d803      	bhi.n	80060de <HAL_SPI_Receive+0x1cc>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d102      	bne.n	80060e4 <HAL_SPI_Receive+0x1d2>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060e8:	e017      	b.n	800611a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1cd      	bne.n	8006090 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fcdb 	bl	8006ab4 <SPI_EndRxTransaction>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
 8006116:	e000      	b.n	800611a <HAL_SPI_Receive+0x208>
  }

error :
 8006118:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08c      	sub	sp, #48	; 0x30
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006142:	2301      	movs	r3, #1
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_SPI_TransmitReceive+0x26>
 8006156:	2302      	movs	r3, #2
 8006158:	e18a      	b.n	8006470 <HAL_SPI_TransmitReceive+0x33c>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006162:	f7fd fc7d 	bl	8003a60 <HAL_GetTick>
 8006166:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006178:	887b      	ldrh	r3, [r7, #2]
 800617a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800617c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006180:	2b01      	cmp	r3, #1
 8006182:	d00f      	beq.n	80061a4 <HAL_SPI_TransmitReceive+0x70>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800618a:	d107      	bne.n	800619c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <HAL_SPI_TransmitReceive+0x68>
 8006194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006198:	2b04      	cmp	r3, #4
 800619a:	d003      	beq.n	80061a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800619c:	2302      	movs	r3, #2
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061a2:	e15b      	b.n	800645c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0x82>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0x82>
 80061b0:	887b      	ldrh	r3, [r7, #2]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80061bc:	e14e      	b.n	800645c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d003      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2205      	movs	r2, #5
 80061ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	887a      	ldrh	r2, [r7, #2]
 80061e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	887a      	ldrh	r2, [r7, #2]
 80061e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	887a      	ldrh	r2, [r7, #2]
 80061f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	887a      	ldrh	r2, [r7, #2]
 80061fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d007      	beq.n	8006226 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006224:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622e:	d178      	bne.n	8006322 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_SPI_TransmitReceive+0x10a>
 8006238:	8b7b      	ldrh	r3, [r7, #26]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d166      	bne.n	800630c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	881a      	ldrh	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	1c9a      	adds	r2, r3, #2
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006262:	e053      	b.n	800630c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d11b      	bne.n	80062aa <HAL_SPI_TransmitReceive+0x176>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d016      	beq.n	80062aa <HAL_SPI_TransmitReceive+0x176>
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d113      	bne.n	80062aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	881a      	ldrh	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	1c9a      	adds	r2, r3, #2
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d119      	bne.n	80062ec <HAL_SPI_TransmitReceive+0x1b8>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d014      	beq.n	80062ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	b292      	uxth	r2, r2
 80062ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	1c9a      	adds	r2, r3, #2
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062e8:	2301      	movs	r3, #1
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062ec:	f7fd fbb8 	bl	8003a60 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d807      	bhi.n	800630c <HAL_SPI_TransmitReceive+0x1d8>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006302:	d003      	beq.n	800630c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800630a:	e0a7      	b.n	800645c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1a6      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x130>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1a1      	bne.n	8006264 <HAL_SPI_TransmitReceive+0x130>
 8006320:	e07c      	b.n	800641c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_SPI_TransmitReceive+0x1fc>
 800632a:	8b7b      	ldrh	r3, [r7, #26]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d16b      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006356:	e057      	b.n	8006408 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b02      	cmp	r3, #2
 8006364:	d11c      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x26c>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d017      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x26c>
 8006370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006372:	2b01      	cmp	r3, #1
 8006374:	d114      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d119      	bne.n	80063e2 <HAL_SPI_TransmitReceive+0x2ae>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d014      	beq.n	80063e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063de:	2301      	movs	r3, #1
 80063e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063e2:	f7fd fb3d 	bl	8003a60 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d803      	bhi.n	80063fa <HAL_SPI_TransmitReceive+0x2c6>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d102      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x2cc>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006406:	e029      	b.n	800645c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1a2      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x224>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d19d      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fbad 	bl	8006b80 <SPI_EndRxTxTransaction>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d006      	beq.n	800643a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006438:	e010      	b.n	800645c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	e000      	b.n	800645c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800645a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800646c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006470:	4618      	mov	r0, r3
 8006472:	3730      	adds	r7, #48	; 0x30
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_SPI_Transmit_DMA+0x20>
 8006494:	2302      	movs	r3, #2
 8006496:	e09b      	b.n	80065d0 <HAL_SPI_Transmit_DMA+0x158>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d002      	beq.n	80064b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064b0:	e089      	b.n	80065c6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_SPI_Transmit_DMA+0x46>
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064c2:	e080      	b.n	80065c6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2203      	movs	r2, #3
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	88fa      	ldrh	r2, [r7, #6]
 80064e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800650a:	d10f      	bne.n	800652c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800652a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006530:	4a29      	ldr	r2, [pc, #164]	; (80065d8 <HAL_SPI_Transmit_DMA+0x160>)
 8006532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006538:	4a28      	ldr	r2, [pc, #160]	; (80065dc <HAL_SPI_Transmit_DMA+0x164>)
 800653a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006540:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <HAL_SPI_Transmit_DMA+0x168>)
 8006542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006548:	2200      	movs	r2, #0
 800654a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	4619      	mov	r1, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	330c      	adds	r3, #12
 800655c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006562:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006564:	f7fe f9b8 	bl	80048d8 <HAL_DMA_Start_IT>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	f043 0210 	orr.w	r2, r3, #16
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006586:	e01e      	b.n	80065c6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b40      	cmp	r3, #64	; 0x40
 8006594:	d007      	beq.n	80065a6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f042 0220 	orr.w	r2, r2, #32
 80065b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0202 	orr.w	r2, r2, #2
 80065c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	08006921 	.word	0x08006921
 80065dc:	08006879 	.word	0x08006879
 80065e0:	0800693d 	.word	0x0800693d

080065e4 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00f      	beq.n	8006618 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe f9c3 	bl	8004988 <HAL_DMA_Abort>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	f043 0210 	orr.w	r2, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00f      	beq.n	8006640 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe f9af 	bl	8004988 <HAL_DMA_Abort>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	f043 0210 	orr.w	r2, r3, #16
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0203 	bic.w	r2, r2, #3
 800664e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	099b      	lsrs	r3, r3, #6
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10f      	bne.n	80066a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	099b      	lsrs	r3, r3, #6
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
    return;
 80066a6:	e0d7      	b.n	8006858 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <HAL_SPI_IRQHandler+0x66>
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
    return;
 80066c8:	e0c6      	b.n	8006858 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10c      	bne.n	80066f0 <HAL_SPI_IRQHandler+0x8c>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	099b      	lsrs	r3, r3, #6
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80b4 	beq.w	8006858 <HAL_SPI_IRQHandler+0x1f4>
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80ad 	beq.w	8006858 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	099b      	lsrs	r3, r3, #6
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d023      	beq.n	8006752 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d011      	beq.n	800673a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006722:	2300      	movs	r3, #0
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	e00b      	b.n	8006752 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	693b      	ldr	r3, [r7, #16]
        return;
 8006750:	e082      	b.n	8006858 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d014      	beq.n	8006788 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f043 0201 	orr.w	r2, r3, #1
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	0a1b      	lsrs	r3, r3, #8
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00c      	beq.n	80067ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006798:	f043 0208 	orr.w	r2, r3, #8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067a0:	2300      	movs	r3, #0
 80067a2:	60bb      	str	r3, [r7, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	60bb      	str	r3, [r7, #8]
 80067ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d04f      	beq.n	8006856 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <HAL_SPI_IRQHandler+0x17e>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d034      	beq.n	800684c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0203 	bic.w	r2, r2, #3
 80067f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d011      	beq.n	800681e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	4a18      	ldr	r2, [pc, #96]	; (8006860 <HAL_SPI_IRQHandler+0x1fc>)
 8006800:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe f92e 	bl	8004a68 <HAL_DMA_Abort_IT>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006822:	2b00      	cmp	r3, #0
 8006824:	d016      	beq.n	8006854 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682a:	4a0d      	ldr	r2, [pc, #52]	; (8006860 <HAL_SPI_IRQHandler+0x1fc>)
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe f918 	bl	8004a68 <HAL_DMA_Abort_IT>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800684a:	e003      	b.n	8006854 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f809 	bl	8006864 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006852:	e000      	b.n	8006856 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006854:	bf00      	nop
    return;
 8006856:	bf00      	nop
  }
}
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	0800697d 	.word	0x0800697d

08006864 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006886:	f7fd f8eb 	bl	8003a60 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689a:	d03b      	beq.n	8006914 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0220 	bic.w	r2, r2, #32
 80068aa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0202 	bic.w	r2, r2, #2
 80068ba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	2164      	movs	r1, #100	; 0x64
 80068c0:	6978      	ldr	r0, [r7, #20]
 80068c2:	f000 f95d 	bl	8006b80 <SPI_EndRxTxTransaction>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2200      	movs	r2, #0
 80068fa:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800690c:	6978      	ldr	r0, [r7, #20]
 800690e:	f7ff ffa9 	bl	8006864 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006912:	e002      	b.n	800691a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006914:	6978      	ldr	r0, [r7, #20]
 8006916:	f7fc ff47 	bl	80037a8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7fc fe78 	bl	8003624 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0203 	bic.w	r2, r2, #3
 8006958:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f043 0210 	orr.w	r2, r3, #16
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ff78 	bl	8006864 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7ff ff64 	bl	8006864 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069b4:	f7fd f854 	bl	8003a60 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	4413      	add	r3, r2
 80069c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069c4:	f7fd f84c 	bl	8003a60 <HAL_GetTick>
 80069c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069ca:	4b39      	ldr	r3, [pc, #228]	; (8006ab0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	015b      	lsls	r3, r3, #5
 80069d0:	0d1b      	lsrs	r3, r3, #20
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069da:	e054      	b.n	8006a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d050      	beq.n	8006a86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069e4:	f7fd f83c 	bl	8003a60 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d902      	bls.n	80069fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d13d      	bne.n	8006a76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a12:	d111      	bne.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1c:	d004      	beq.n	8006a28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a26:	d107      	bne.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a40:	d10f      	bne.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e017      	b.n	8006aa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	bf0c      	ite	eq
 8006a96:	2301      	moveq	r3, #1
 8006a98:	2300      	movne	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d19b      	bne.n	80069dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000028 	.word	0x20000028

08006ab4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac8:	d111      	bne.n	8006aee <SPI_EndRxTransaction+0x3a>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad2:	d004      	beq.n	8006ade <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d107      	bne.n	8006aee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af6:	d12a      	bne.n	8006b4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b00:	d012      	beq.n	8006b28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff ff49 	bl	80069a4 <SPI_WaitFlagStateUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d02d      	beq.n	8006b74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1c:	f043 0220 	orr.w	r2, r3, #32
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e026      	b.n	8006b76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2101      	movs	r1, #1
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff ff36 	bl	80069a4 <SPI_WaitFlagStateUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01a      	beq.n	8006b74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0220 	orr.w	r2, r3, #32
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e013      	b.n	8006b76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2200      	movs	r2, #0
 8006b56:	2101      	movs	r1, #1
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff ff23 	bl	80069a4 <SPI_WaitFlagStateUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e000      	b.n	8006b76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <SPI_EndRxTxTransaction+0x7c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1b      	ldr	r2, [pc, #108]	; (8006c00 <SPI_EndRxTxTransaction+0x80>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	0d5b      	lsrs	r3, r3, #21
 8006b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006baa:	d112      	bne.n	8006bd2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff fef4 	bl	80069a4 <SPI_WaitFlagStateUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	f043 0220 	orr.w	r2, r3, #32
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e00f      	b.n	8006bf2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be8:	2b80      	cmp	r3, #128	; 0x80
 8006bea:	d0f2      	beq.n	8006bd2 <SPI_EndRxTxTransaction+0x52>
 8006bec:	e000      	b.n	8006bf0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006bee:	bf00      	nop
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000028 	.word	0x20000028
 8006c00:	165e9f81 	.word	0x165e9f81

08006c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e041      	b.n	8006c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fc fb86 	bl	800333c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f000 ff00 	bl	8007a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d001      	beq.n	8006cbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e03c      	b.n	8006d36 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <HAL_TIM_Base_Start+0xa0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_TIM_Base_Start+0x5c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd6:	d013      	beq.n	8006d00 <HAL_TIM_Base_Start+0x5c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_TIM_Base_Start+0xa4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_TIM_Base_Start+0x5c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <HAL_TIM_Base_Start+0xa8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_TIM_Base_Start+0x5c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_TIM_Base_Start+0xac>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIM_Base_Start+0x5c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <HAL_TIM_Base_Start+0xb0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d111      	bne.n	8006d24 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d010      	beq.n	8006d34 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	e007      	b.n	8006d34 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40014000 	.word	0x40014000

08006d58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e041      	b.n	8006dee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f839 	bl	8006df6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f000 fe56 	bl	8007a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	bf0c      	ite	eq
 8006e30:	2301      	moveq	r3, #1
 8006e32:	2300      	movne	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	e022      	b.n	8006e7e <HAL_TIM_PWM_Start_DMA+0x72>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d109      	bne.n	8006e52 <HAL_TIM_PWM_Start_DMA+0x46>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	bf0c      	ite	eq
 8006e4a:	2301      	moveq	r3, #1
 8006e4c:	2300      	movne	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	e015      	b.n	8006e7e <HAL_TIM_PWM_Start_DMA+0x72>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d109      	bne.n	8006e6c <HAL_TIM_PWM_Start_DMA+0x60>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	e008      	b.n	8006e7e <HAL_TIM_PWM_Start_DMA+0x72>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006e82:	2302      	movs	r3, #2
 8006e84:	e15d      	b.n	8007142 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x94>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	bf0c      	ite	eq
 8006e98:	2301      	moveq	r3, #1
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	e022      	b.n	8006ee6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d109      	bne.n	8006eba <HAL_TIM_PWM_Start_DMA+0xae>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	bf0c      	ite	eq
 8006eb2:	2301      	moveq	r3, #1
 8006eb4:	2300      	movne	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	e015      	b.n	8006ee6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d109      	bne.n	8006ed4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	e008      	b.n	8006ee6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d024      	beq.n	8006f34 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <HAL_TIM_PWM_Start_DMA+0xee>
 8006ef0:	887b      	ldrh	r3, [r7, #2]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e123      	b.n	8007142 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <HAL_TIM_PWM_Start_DMA+0xfe>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f08:	e016      	b.n	8006f38 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d104      	bne.n	8006f1a <HAL_TIM_PWM_Start_DMA+0x10e>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f18:	e00e      	b.n	8006f38 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_PWM_Start_DMA+0x11e>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f28:	e006      	b.n	8006f38 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f32:	e001      	b.n	8006f38 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e104      	b.n	8007142 <HAL_TIM_PWM_Start_DMA+0x336>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b0c      	cmp	r3, #12
 8006f3c:	f200 80ae 	bhi.w	800709c <HAL_TIM_PWM_Start_DMA+0x290>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f7d 	.word	0x08006f7d
 8006f4c:	0800709d 	.word	0x0800709d
 8006f50:	0800709d 	.word	0x0800709d
 8006f54:	0800709d 	.word	0x0800709d
 8006f58:	08006fc5 	.word	0x08006fc5
 8006f5c:	0800709d 	.word	0x0800709d
 8006f60:	0800709d 	.word	0x0800709d
 8006f64:	0800709d 	.word	0x0800709d
 8006f68:	0800700d 	.word	0x0800700d
 8006f6c:	0800709d 	.word	0x0800709d
 8006f70:	0800709d 	.word	0x0800709d
 8006f74:	0800709d 	.word	0x0800709d
 8006f78:	08007055 	.word	0x08007055
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	4a72      	ldr	r2, [pc, #456]	; (800714c <HAL_TIM_PWM_Start_DMA+0x340>)
 8006f82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	4a71      	ldr	r2, [pc, #452]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	4a70      	ldr	r2, [pc, #448]	; (8007154 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006f92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3334      	adds	r3, #52	; 0x34
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	887b      	ldrh	r3, [r7, #2]
 8006fa4:	f7fd fc98 	bl	80048d8 <HAL_DMA_Start_IT>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e0c7      	b.n	8007142 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc0:	60da      	str	r2, [r3, #12]
      break;
 8006fc2:	e06e      	b.n	80070a2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	4a60      	ldr	r2, [pc, #384]	; (800714c <HAL_TIM_PWM_Start_DMA+0x340>)
 8006fca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	4a5f      	ldr	r2, [pc, #380]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	4a5e      	ldr	r2, [pc, #376]	; (8007154 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006fda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3338      	adds	r3, #56	; 0x38
 8006fe8:	461a      	mov	r2, r3
 8006fea:	887b      	ldrh	r3, [r7, #2]
 8006fec:	f7fd fc74 	bl	80048d8 <HAL_DMA_Start_IT>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0a3      	b.n	8007142 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007008:	60da      	str	r2, [r3, #12]
      break;
 800700a:	e04a      	b.n	80070a2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	4a4e      	ldr	r2, [pc, #312]	; (800714c <HAL_TIM_PWM_Start_DMA+0x340>)
 8007012:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	4a4d      	ldr	r2, [pc, #308]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x344>)
 800701a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a4c      	ldr	r2, [pc, #304]	; (8007154 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007022:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	333c      	adds	r3, #60	; 0x3c
 8007030:	461a      	mov	r2, r3
 8007032:	887b      	ldrh	r3, [r7, #2]
 8007034:	f7fd fc50 	bl	80048d8 <HAL_DMA_Start_IT>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e07f      	b.n	8007142 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007050:	60da      	str	r2, [r3, #12]
      break;
 8007052:	e026      	b.n	80070a2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	4a3c      	ldr	r2, [pc, #240]	; (800714c <HAL_TIM_PWM_Start_DMA+0x340>)
 800705a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	4a3b      	ldr	r2, [pc, #236]	; (8007150 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	4a3a      	ldr	r2, [pc, #232]	; (8007154 <HAL_TIM_PWM_Start_DMA+0x348>)
 800706a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3340      	adds	r3, #64	; 0x40
 8007078:	461a      	mov	r2, r3
 800707a:	887b      	ldrh	r3, [r7, #2]
 800707c:	f7fd fc2c 	bl	80048d8 <HAL_DMA_Start_IT>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e05b      	b.n	8007142 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007098:	60da      	str	r2, [r3, #12]
      break;
 800709a:	e002      	b.n	80070a2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
      break;
 80070a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d14b      	bne.n	8007140 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2201      	movs	r2, #1
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 ff6f 	bl	8007f94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a27      	ldr	r2, [pc, #156]	; (8007158 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d107      	bne.n	80070d0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a20      	ldr	r2, [pc, #128]	; (8007158 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d018      	beq.n	800710c <HAL_TIM_PWM_Start_DMA+0x300>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e2:	d013      	beq.n	800710c <HAL_TIM_PWM_Start_DMA+0x300>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1c      	ldr	r2, [pc, #112]	; (800715c <HAL_TIM_PWM_Start_DMA+0x350>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00e      	beq.n	800710c <HAL_TIM_PWM_Start_DMA+0x300>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_TIM_PWM_Start_DMA+0x354>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d009      	beq.n	800710c <HAL_TIM_PWM_Start_DMA+0x300>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_TIM_PWM_Start_DMA+0x358>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_TIM_PWM_Start_DMA+0x300>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a18      	ldr	r2, [pc, #96]	; (8007168 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d111      	bne.n	8007130 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2b06      	cmp	r3, #6
 800711c:	d010      	beq.n	8007140 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0201 	orr.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	e007      	b.n	8007140 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007140:	7dfb      	ldrb	r3, [r7, #23]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	08007939 	.word	0x08007939
 8007150:	080079e1 	.word	0x080079e1
 8007154:	080078a7 	.word	0x080078a7
 8007158:	40010000 	.word	0x40010000
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40014000 	.word	0x40014000

0800716c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b0c      	cmp	r3, #12
 800717e:	d855      	bhi.n	800722c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007180:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007186:	bf00      	nop
 8007188:	080071bd 	.word	0x080071bd
 800718c:	0800722d 	.word	0x0800722d
 8007190:	0800722d 	.word	0x0800722d
 8007194:	0800722d 	.word	0x0800722d
 8007198:	080071d9 	.word	0x080071d9
 800719c:	0800722d 	.word	0x0800722d
 80071a0:	0800722d 	.word	0x0800722d
 80071a4:	0800722d 	.word	0x0800722d
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	0800722d 	.word	0x0800722d
 80071b0:	0800722d 	.word	0x0800722d
 80071b4:	0800722d 	.word	0x0800722d
 80071b8:	08007211 	.word	0x08007211
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80071ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fd fc49 	bl	8004a68 <HAL_DMA_Abort_IT>
      break;
 80071d6:	e02c      	b.n	8007232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fd fc3b 	bl	8004a68 <HAL_DMA_Abort_IT>
      break;
 80071f2:	e01e      	b.n	8007232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007202:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	4618      	mov	r0, r3
 800720a:	f7fd fc2d 	bl	8004a68 <HAL_DMA_Abort_IT>
      break;
 800720e:	e010      	b.n	8007232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800721e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	4618      	mov	r0, r3
 8007226:	f7fd fc1f 	bl	8004a68 <HAL_DMA_Abort_IT>
      break;
 800722a:	e002      	b.n	8007232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
      break;
 8007230:	bf00      	nop
  }

  if (status == HAL_OK)
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d157      	bne.n	80072e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fea7 	bl	8007f94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d117      	bne.n	8007280 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6a1a      	ldr	r2, [r3, #32]
 8007256:	f241 1311 	movw	r3, #4369	; 0x1111
 800725a:	4013      	ands	r3, r2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10f      	bne.n	8007280 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6a1a      	ldr	r2, [r3, #32]
 8007266:	f240 4344 	movw	r3, #1092	; 0x444
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d107      	bne.n	8007280 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6a1a      	ldr	r2, [r3, #32]
 8007286:	f241 1311 	movw	r3, #4369	; 0x1111
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10f      	bne.n	80072b0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6a1a      	ldr	r2, [r3, #32]
 8007296:	f240 4344 	movw	r3, #1092	; 0x444
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072be:	e013      	b.n	80072e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d104      	bne.n	80072d0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072ce:	e00b      	b.n	80072e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d104      	bne.n	80072e0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072de:	e003      	b.n	80072e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000

080072f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b02      	cmp	r3, #2
 800730c:	d122      	bne.n	8007354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b02      	cmp	r3, #2
 800731a:	d11b      	bne.n	8007354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f06f 0202 	mvn.w	r2, #2
 8007324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa81 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 8007340:	e005      	b.n	800734e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa73 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa84 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b04      	cmp	r3, #4
 8007360:	d122      	bne.n	80073a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b04      	cmp	r3, #4
 800736e:	d11b      	bne.n	80073a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0204 	mvn.w	r2, #4
 8007378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa57 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 8007394:	e005      	b.n	80073a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa49 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fa5a 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b08      	cmp	r3, #8
 80073b4:	d122      	bne.n	80073fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d11b      	bne.n	80073fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f06f 0208 	mvn.w	r2, #8
 80073cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2204      	movs	r2, #4
 80073d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa2d 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 80073e8:	e005      	b.n	80073f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa1f 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa30 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b10      	cmp	r3, #16
 8007408:	d122      	bne.n	8007450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b10      	cmp	r3, #16
 8007416:	d11b      	bne.n	8007450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0210 	mvn.w	r2, #16
 8007420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2208      	movs	r2, #8
 8007426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa03 	bl	8007842 <HAL_TIM_IC_CaptureCallback>
 800743c:	e005      	b.n	800744a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9f5 	bl	800782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa06 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b01      	cmp	r3, #1
 800745c:	d10e      	bne.n	800747c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b01      	cmp	r3, #1
 800746a:	d107      	bne.n	800747c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0201 	mvn.w	r2, #1
 8007474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f9cf 	bl	800781a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b80      	cmp	r3, #128	; 0x80
 8007488:	d10e      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d107      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fe14 	bl	80080d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d10e      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d107      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f9d5 	bl	800787e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d10e      	bne.n	8007500 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d107      	bne.n	8007500 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0220 	mvn.w	r2, #32
 80074f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fdde 	bl	80080bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007522:	2302      	movs	r3, #2
 8007524:	e0ae      	b.n	8007684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b0c      	cmp	r3, #12
 8007532:	f200 809f 	bhi.w	8007674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007536:	a201      	add	r2, pc, #4	; (adr r2, 800753c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	08007571 	.word	0x08007571
 8007540:	08007675 	.word	0x08007675
 8007544:	08007675 	.word	0x08007675
 8007548:	08007675 	.word	0x08007675
 800754c:	080075b1 	.word	0x080075b1
 8007550:	08007675 	.word	0x08007675
 8007554:	08007675 	.word	0x08007675
 8007558:	08007675 	.word	0x08007675
 800755c:	080075f3 	.word	0x080075f3
 8007560:	08007675 	.word	0x08007675
 8007564:	08007675 	.word	0x08007675
 8007568:	08007675 	.word	0x08007675
 800756c:	08007633 	.word	0x08007633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68b9      	ldr	r1, [r7, #8]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fae6 	bl	8007b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0208 	orr.w	r2, r2, #8
 800758a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0204 	bic.w	r2, r2, #4
 800759a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6999      	ldr	r1, [r3, #24]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	691a      	ldr	r2, [r3, #16]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	619a      	str	r2, [r3, #24]
      break;
 80075ae:	e064      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fb2c 	bl	8007c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6999      	ldr	r1, [r3, #24]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	021a      	lsls	r2, r3, #8
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	619a      	str	r2, [r3, #24]
      break;
 80075f0:	e043      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fb77 	bl	8007cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0208 	orr.w	r2, r2, #8
 800760c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69da      	ldr	r2, [r3, #28]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0204 	bic.w	r2, r2, #4
 800761c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69d9      	ldr	r1, [r3, #28]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	61da      	str	r2, [r3, #28]
      break;
 8007630:	e023      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fbc1 	bl	8007dc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800764c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800765c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69d9      	ldr	r1, [r3, #28]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	021a      	lsls	r2, r3, #8
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	61da      	str	r2, [r3, #28]
      break;
 8007672:	e002      	b.n	800767a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_TIM_ConfigClockSource+0x1c>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e0b4      	b.n	8007812 <HAL_TIM_ConfigClockSource+0x186>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e0:	d03e      	beq.n	8007760 <HAL_TIM_ConfigClockSource+0xd4>
 80076e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076e6:	f200 8087 	bhi.w	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ee:	f000 8086 	beq.w	80077fe <HAL_TIM_ConfigClockSource+0x172>
 80076f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f6:	d87f      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b70      	cmp	r3, #112	; 0x70
 80076fa:	d01a      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0xa6>
 80076fc:	2b70      	cmp	r3, #112	; 0x70
 80076fe:	d87b      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b60      	cmp	r3, #96	; 0x60
 8007702:	d050      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007704:	2b60      	cmp	r3, #96	; 0x60
 8007706:	d877      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b50      	cmp	r3, #80	; 0x50
 800770a:	d03c      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0xfa>
 800770c:	2b50      	cmp	r3, #80	; 0x50
 800770e:	d873      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d058      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007714:	2b40      	cmp	r3, #64	; 0x40
 8007716:	d86f      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007718:	2b30      	cmp	r3, #48	; 0x30
 800771a:	d064      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 800771c:	2b30      	cmp	r3, #48	; 0x30
 800771e:	d86b      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007720:	2b20      	cmp	r3, #32
 8007722:	d060      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d867      	bhi.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007728:	2b00      	cmp	r3, #0
 800772a:	d05c      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 800772c:	2b10      	cmp	r3, #16
 800772e:	d05a      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007730:	e062      	b.n	80077f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6899      	ldr	r1, [r3, #8]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f000 fc07 	bl	8007f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	609a      	str	r2, [r3, #8]
      break;
 800775e:	e04f      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	6899      	ldr	r1, [r3, #8]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f000 fbf0 	bl	8007f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007782:	609a      	str	r2, [r3, #8]
      break;
 8007784:	e03c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6859      	ldr	r1, [r3, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	461a      	mov	r2, r3
 8007794:	f000 fb64 	bl	8007e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2150      	movs	r1, #80	; 0x50
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fbbd 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 80077a4:	e02c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f000 fb83 	bl	8007ebe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2160      	movs	r1, #96	; 0x60
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fbad 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 80077c4:	e01c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f000 fb44 	bl	8007e60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2140      	movs	r1, #64	; 0x40
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fb9d 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 80077e4:	e00c      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f000 fb94 	bl	8007f1e <TIM_ITRx_SetConfig>
      break;
 80077f6:	e003      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
      break;
 80077fc:	e000      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007810:	7bfb      	ldrb	r3, [r7, #15]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d107      	bne.n	80078ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078cc:	e02a      	b.n	8007924 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d107      	bne.n	80078e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2202      	movs	r2, #2
 80078dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e6:	e01d      	b.n	8007924 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d107      	bne.n	8007902 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2204      	movs	r2, #4
 80078f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007900:	e010      	b.n	8007924 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d107      	bne.n	800791c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2208      	movs	r2, #8
 8007910:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800791a:	e003      	b.n	8007924 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ffb4 	bl	8007892 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	771a      	strb	r2, [r3, #28]
}
 8007930:	bf00      	nop
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d10b      	bne.n	8007968 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d136      	bne.n	80079cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007966:	e031      	b.n	80079cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	429a      	cmp	r2, r3
 8007970:	d10b      	bne.n	800798a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2202      	movs	r2, #2
 8007976:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d125      	bne.n	80079cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007988:	e020      	b.n	80079cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d10b      	bne.n	80079ac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2204      	movs	r2, #4
 8007998:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d114      	bne.n	80079cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079aa:	e00f      	b.n	80079cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d10a      	bne.n	80079cc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2208      	movs	r2, #8
 80079ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d103      	bne.n	80079cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f7ff ff42 	bl	8007856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	771a      	strb	r2, [r3, #28]
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d103      	bne.n	8007a00 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	771a      	strb	r2, [r3, #28]
 80079fe:	e019      	b.n	8007a34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d103      	bne.n	8007a12 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	771a      	strb	r2, [r3, #28]
 8007a10:	e010      	b.n	8007a34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d103      	bne.n	8007a24 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	771a      	strb	r2, [r3, #28]
 8007a22:	e007      	b.n	8007a34 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d102      	bne.n	8007a34 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2208      	movs	r2, #8
 8007a32:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff ff18 	bl	800786a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a34      	ldr	r2, [pc, #208]	; (8007b2c <TIM_Base_SetConfig+0xe4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00f      	beq.n	8007a80 <TIM_Base_SetConfig+0x38>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a66:	d00b      	beq.n	8007a80 <TIM_Base_SetConfig+0x38>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a31      	ldr	r2, [pc, #196]	; (8007b30 <TIM_Base_SetConfig+0xe8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d007      	beq.n	8007a80 <TIM_Base_SetConfig+0x38>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a30      	ldr	r2, [pc, #192]	; (8007b34 <TIM_Base_SetConfig+0xec>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <TIM_Base_SetConfig+0x38>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a2f      	ldr	r2, [pc, #188]	; (8007b38 <TIM_Base_SetConfig+0xf0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d108      	bne.n	8007a92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a25      	ldr	r2, [pc, #148]	; (8007b2c <TIM_Base_SetConfig+0xe4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d01b      	beq.n	8007ad2 <TIM_Base_SetConfig+0x8a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa0:	d017      	beq.n	8007ad2 <TIM_Base_SetConfig+0x8a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a22      	ldr	r2, [pc, #136]	; (8007b30 <TIM_Base_SetConfig+0xe8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <TIM_Base_SetConfig+0x8a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a21      	ldr	r2, [pc, #132]	; (8007b34 <TIM_Base_SetConfig+0xec>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <TIM_Base_SetConfig+0x8a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a20      	ldr	r2, [pc, #128]	; (8007b38 <TIM_Base_SetConfig+0xf0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00b      	beq.n	8007ad2 <TIM_Base_SetConfig+0x8a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a1f      	ldr	r2, [pc, #124]	; (8007b3c <TIM_Base_SetConfig+0xf4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d007      	beq.n	8007ad2 <TIM_Base_SetConfig+0x8a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1e      	ldr	r2, [pc, #120]	; (8007b40 <TIM_Base_SetConfig+0xf8>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_Base_SetConfig+0x8a>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a1d      	ldr	r2, [pc, #116]	; (8007b44 <TIM_Base_SetConfig+0xfc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d108      	bne.n	8007ae4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <TIM_Base_SetConfig+0xe4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d103      	bne.n	8007b18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	691a      	ldr	r2, [r3, #16]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	615a      	str	r2, [r3, #20]
}
 8007b1e:	bf00      	nop
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40000400 	.word	0x40000400
 8007b34:	40000800 	.word	0x40000800
 8007b38:	40000c00 	.word	0x40000c00
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800

08007b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0201 	bic.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f023 0302 	bic.w	r3, r3, #2
 8007b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a1c      	ldr	r2, [pc, #112]	; (8007c10 <TIM_OC1_SetConfig+0xc8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d10c      	bne.n	8007bbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f023 0308 	bic.w	r3, r3, #8
 8007baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f023 0304 	bic.w	r3, r3, #4
 8007bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a13      	ldr	r2, [pc, #76]	; (8007c10 <TIM_OC1_SetConfig+0xc8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d111      	bne.n	8007bea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	621a      	str	r2, [r3, #32]
}
 8007c04:	bf00      	nop
 8007c06:	371c      	adds	r7, #28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	40010000 	.word	0x40010000

08007c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f023 0210 	bic.w	r2, r3, #16
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f023 0320 	bic.w	r3, r3, #32
 8007c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <TIM_OC2_SetConfig+0xd4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d10d      	bne.n	8007c90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <TIM_OC2_SetConfig+0xd4>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d113      	bne.n	8007cc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40010000 	.word	0x40010000

08007cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a1d      	ldr	r2, [pc, #116]	; (8007dbc <TIM_OC3_SetConfig+0xd0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d10d      	bne.n	8007d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a14      	ldr	r2, [pc, #80]	; (8007dbc <TIM_OC3_SetConfig+0xd0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d113      	bne.n	8007d96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	621a      	str	r2, [r3, #32]
}
 8007db0:	bf00      	nop
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	40010000 	.word	0x40010000

08007dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	031b      	lsls	r3, r3, #12
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a10      	ldr	r2, [pc, #64]	; (8007e5c <TIM_OC4_SetConfig+0x9c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d109      	bne.n	8007e34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	019b      	lsls	r3, r3, #6
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	bf00      	nop
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000

08007e60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f023 0201 	bic.w	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f023 030a 	bic.w	r3, r3, #10
 8007e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b087      	sub	sp, #28
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	60f8      	str	r0, [r7, #12]
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f023 0210 	bic.w	r2, r3, #16
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	031b      	lsls	r3, r3, #12
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007efa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	f043 0307 	orr.w	r3, r3, #7
 8007f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	609a      	str	r2, [r3, #8]
}
 8007f48:	bf00      	nop
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	021a      	lsls	r2, r3, #8
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	431a      	orrs	r2, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	609a      	str	r2, [r3, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	371c      	adds	r7, #28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f003 031f 	and.w	r3, r3, #31
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a1a      	ldr	r2, [r3, #32]
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	401a      	ands	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a1a      	ldr	r2, [r3, #32]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	621a      	str	r2, [r3, #32]
}
 8007fd2:	bf00      	nop
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e050      	b.n	800809a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1c      	ldr	r2, [pc, #112]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d018      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008044:	d013      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a18      	ldr	r2, [pc, #96]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00e      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a16      	ldr	r2, [pc, #88]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d009      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d004      	beq.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d10c      	bne.n	8008088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	4313      	orrs	r3, r2
 800807e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40014000 	.word	0x40014000

080080bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <arm_rfft_fast_init_f32>:
 80080e4:	084b      	lsrs	r3, r1, #1
 80080e6:	2b80      	cmp	r3, #128	; 0x80
 80080e8:	b410      	push	{r4}
 80080ea:	8201      	strh	r1, [r0, #16]
 80080ec:	8003      	strh	r3, [r0, #0]
 80080ee:	d047      	beq.n	8008180 <arm_rfft_fast_init_f32+0x9c>
 80080f0:	d917      	bls.n	8008122 <arm_rfft_fast_init_f32+0x3e>
 80080f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f6:	d03d      	beq.n	8008174 <arm_rfft_fast_init_f32+0x90>
 80080f8:	d929      	bls.n	800814e <arm_rfft_fast_init_f32+0x6a>
 80080fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fe:	d020      	beq.n	8008142 <arm_rfft_fast_init_f32+0x5e>
 8008100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008104:	d113      	bne.n	800812e <arm_rfft_fast_init_f32+0x4a>
 8008106:	4921      	ldr	r1, [pc, #132]	; (800818c <arm_rfft_fast_init_f32+0xa8>)
 8008108:	4a21      	ldr	r2, [pc, #132]	; (8008190 <arm_rfft_fast_init_f32+0xac>)
 800810a:	4b22      	ldr	r3, [pc, #136]	; (8008194 <arm_rfft_fast_init_f32+0xb0>)
 800810c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008110:	8184      	strh	r4, [r0, #12]
 8008112:	6081      	str	r1, [r0, #8]
 8008114:	6042      	str	r2, [r0, #4]
 8008116:	6143      	str	r3, [r0, #20]
 8008118:	2000      	movs	r0, #0
 800811a:	b240      	sxtb	r0, r0
 800811c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	2b20      	cmp	r3, #32
 8008124:	d01c      	beq.n	8008160 <arm_rfft_fast_init_f32+0x7c>
 8008126:	2b40      	cmp	r3, #64	; 0x40
 8008128:	d006      	beq.n	8008138 <arm_rfft_fast_init_f32+0x54>
 800812a:	2b10      	cmp	r3, #16
 800812c:	d01d      	beq.n	800816a <arm_rfft_fast_init_f32+0x86>
 800812e:	20ff      	movs	r0, #255	; 0xff
 8008130:	b240      	sxtb	r0, r0
 8008132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	2438      	movs	r4, #56	; 0x38
 800813a:	4917      	ldr	r1, [pc, #92]	; (8008198 <arm_rfft_fast_init_f32+0xb4>)
 800813c:	4a17      	ldr	r2, [pc, #92]	; (800819c <arm_rfft_fast_init_f32+0xb8>)
 800813e:	4b18      	ldr	r3, [pc, #96]	; (80081a0 <arm_rfft_fast_init_f32+0xbc>)
 8008140:	e7e6      	b.n	8008110 <arm_rfft_fast_init_f32+0x2c>
 8008142:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008146:	4917      	ldr	r1, [pc, #92]	; (80081a4 <arm_rfft_fast_init_f32+0xc0>)
 8008148:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <arm_rfft_fast_init_f32+0xc4>)
 800814a:	4b18      	ldr	r3, [pc, #96]	; (80081ac <arm_rfft_fast_init_f32+0xc8>)
 800814c:	e7e0      	b.n	8008110 <arm_rfft_fast_init_f32+0x2c>
 800814e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008152:	d1ec      	bne.n	800812e <arm_rfft_fast_init_f32+0x4a>
 8008154:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8008158:	4915      	ldr	r1, [pc, #84]	; (80081b0 <arm_rfft_fast_init_f32+0xcc>)
 800815a:	4a16      	ldr	r2, [pc, #88]	; (80081b4 <arm_rfft_fast_init_f32+0xd0>)
 800815c:	4b16      	ldr	r3, [pc, #88]	; (80081b8 <arm_rfft_fast_init_f32+0xd4>)
 800815e:	e7d7      	b.n	8008110 <arm_rfft_fast_init_f32+0x2c>
 8008160:	2430      	movs	r4, #48	; 0x30
 8008162:	4916      	ldr	r1, [pc, #88]	; (80081bc <arm_rfft_fast_init_f32+0xd8>)
 8008164:	4a16      	ldr	r2, [pc, #88]	; (80081c0 <arm_rfft_fast_init_f32+0xdc>)
 8008166:	4b17      	ldr	r3, [pc, #92]	; (80081c4 <arm_rfft_fast_init_f32+0xe0>)
 8008168:	e7d2      	b.n	8008110 <arm_rfft_fast_init_f32+0x2c>
 800816a:	2414      	movs	r4, #20
 800816c:	4916      	ldr	r1, [pc, #88]	; (80081c8 <arm_rfft_fast_init_f32+0xe4>)
 800816e:	4a17      	ldr	r2, [pc, #92]	; (80081cc <arm_rfft_fast_init_f32+0xe8>)
 8008170:	4b17      	ldr	r3, [pc, #92]	; (80081d0 <arm_rfft_fast_init_f32+0xec>)
 8008172:	e7cd      	b.n	8008110 <arm_rfft_fast_init_f32+0x2c>
 8008174:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8008178:	4916      	ldr	r1, [pc, #88]	; (80081d4 <arm_rfft_fast_init_f32+0xf0>)
 800817a:	4a17      	ldr	r2, [pc, #92]	; (80081d8 <arm_rfft_fast_init_f32+0xf4>)
 800817c:	4b17      	ldr	r3, [pc, #92]	; (80081dc <arm_rfft_fast_init_f32+0xf8>)
 800817e:	e7c7      	b.n	8008110 <arm_rfft_fast_init_f32+0x2c>
 8008180:	24d0      	movs	r4, #208	; 0xd0
 8008182:	4917      	ldr	r1, [pc, #92]	; (80081e0 <arm_rfft_fast_init_f32+0xfc>)
 8008184:	4a17      	ldr	r2, [pc, #92]	; (80081e4 <arm_rfft_fast_init_f32+0x100>)
 8008186:	4b18      	ldr	r3, [pc, #96]	; (80081e8 <arm_rfft_fast_init_f32+0x104>)
 8008188:	e7c2      	b.n	8008110 <arm_rfft_fast_init_f32+0x2c>
 800818a:	bf00      	nop
 800818c:	0801a5d0 	.word	0x0801a5d0
 8008190:	0800b7c8 	.word	0x0800b7c8
 8008194:	08011938 	.word	0x08011938
 8008198:	0800f8c8 	.word	0x0800f8c8
 800819c:	0801c390 	.word	0x0801c390
 80081a0:	0801e880 	.word	0x0801e880
 80081a4:	080182b8 	.word	0x080182b8
 80081a8:	080161b8 	.word	0x080161b8
 80081ac:	0800f938 	.word	0x0800f938
 80081b0:	0801e510 	.word	0x0801e510
 80081b4:	08015938 	.word	0x08015938
 80081b8:	0801c590 	.word	0x0801c590
 80081bc:	08019170 	.word	0x08019170
 80081c0:	080181b8 	.word	0x080181b8
 80081c4:	0800f7c8 	.word	0x0800f7c8
 80081c8:	080190c8 	.word	0x080190c8
 80081cc:	08016138 	.word	0x08016138
 80081d0:	080190f0 	.word	0x080190f0
 80081d4:	0801cd90 	.word	0x0801cd90
 80081d8:	080195d0 	.word	0x080195d0
 80081dc:	0801d110 	.word	0x0801d110
 80081e0:	0801ea80 	.word	0x0801ea80
 80081e4:	080191d0 	.word	0x080191d0
 80081e8:	0801e110 	.word	0x0801e110

080081ec <arm_rfft_fast_f32>:
 80081ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	8a06      	ldrh	r6, [r0, #16]
 80081f2:	0876      	lsrs	r6, r6, #1
 80081f4:	4607      	mov	r7, r0
 80081f6:	4615      	mov	r5, r2
 80081f8:	8006      	strh	r6, [r0, #0]
 80081fa:	460c      	mov	r4, r1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d15c      	bne.n	80082ba <arm_rfft_fast_f32+0xce>
 8008200:	461a      	mov	r2, r3
 8008202:	2301      	movs	r3, #1
 8008204:	f000 fbe6 	bl	80089d4 <arm_cfft_f32>
 8008208:	edd4 7a00 	vldr	s15, [r4]
 800820c:	ed94 7a01 	vldr	s14, [r4, #4]
 8008210:	883e      	ldrh	r6, [r7, #0]
 8008212:	6978      	ldr	r0, [r7, #20]
 8008214:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008218:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800821c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008220:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008228:	3e01      	subs	r6, #1
 800822a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800822e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008232:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8008236:	ed85 7a00 	vstr	s14, [r5]
 800823a:	edc5 7a01 	vstr	s15, [r5, #4]
 800823e:	3010      	adds	r0, #16
 8008240:	f105 0210 	add.w	r2, r5, #16
 8008244:	3b08      	subs	r3, #8
 8008246:	f104 0110 	add.w	r1, r4, #16
 800824a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800824e:	ed93 5a02 	vldr	s10, [r3, #8]
 8008252:	ed11 7a01 	vldr	s14, [r1, #-4]
 8008256:	ed10 6a02 	vldr	s12, [r0, #-8]
 800825a:	edd3 5a03 	vldr	s11, [r3, #12]
 800825e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8008262:	ee75 7a64 	vsub.f32	s15, s10, s9
 8008266:	ee35 4a87 	vadd.f32	s8, s11, s14
 800826a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800826e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8008272:	ee66 4a27 	vmul.f32	s9, s12, s15
 8008276:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800827a:	ee34 5a85 	vadd.f32	s10, s9, s10
 800827e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008282:	ee66 6a84 	vmul.f32	s13, s13, s8
 8008286:	ee77 7a25 	vadd.f32	s15, s14, s11
 800828a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800828e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008292:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008296:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800829a:	3e01      	subs	r6, #1
 800829c:	ed42 6a02 	vstr	s13, [r2, #-8]
 80082a0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80082a4:	f1a3 0308 	sub.w	r3, r3, #8
 80082a8:	f101 0108 	add.w	r1, r1, #8
 80082ac:	f100 0008 	add.w	r0, r0, #8
 80082b0:	f102 0208 	add.w	r2, r2, #8
 80082b4:	d1c9      	bne.n	800824a <arm_rfft_fast_f32+0x5e>
 80082b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ba:	edd1 7a00 	vldr	s15, [r1]
 80082be:	edd1 6a01 	vldr	s13, [r1, #4]
 80082c2:	6941      	ldr	r1, [r0, #20]
 80082c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80082c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082cc:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80082d0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80082d4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80082d8:	3e01      	subs	r6, #1
 80082da:	ed82 7a00 	vstr	s14, [r2]
 80082de:	edc2 7a01 	vstr	s15, [r2, #4]
 80082e2:	00f0      	lsls	r0, r6, #3
 80082e4:	b3ee      	cbz	r6, 8008362 <arm_rfft_fast_f32+0x176>
 80082e6:	3808      	subs	r0, #8
 80082e8:	f101 0e10 	add.w	lr, r1, #16
 80082ec:	4420      	add	r0, r4
 80082ee:	f104 0110 	add.w	r1, r4, #16
 80082f2:	f102 0c10 	add.w	ip, r2, #16
 80082f6:	ed90 7a02 	vldr	s14, [r0, #8]
 80082fa:	ed51 6a02 	vldr	s13, [r1, #-8]
 80082fe:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8008302:	ed90 4a03 	vldr	s8, [r0, #12]
 8008306:	ed11 5a01 	vldr	s10, [r1, #-4]
 800830a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800830e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008312:	ee74 4a05 	vadd.f32	s9, s8, s10
 8008316:	ee26 3a27 	vmul.f32	s6, s12, s15
 800831a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800831e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008322:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008326:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800832a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800832e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008332:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008336:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800833a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800833e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008342:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008346:	3e01      	subs	r6, #1
 8008348:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800834c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8008350:	f1a0 0008 	sub.w	r0, r0, #8
 8008354:	f101 0108 	add.w	r1, r1, #8
 8008358:	f10e 0e08 	add.w	lr, lr, #8
 800835c:	f10c 0c08 	add.w	ip, ip, #8
 8008360:	d1c9      	bne.n	80082f6 <arm_rfft_fast_f32+0x10a>
 8008362:	4638      	mov	r0, r7
 8008364:	4629      	mov	r1, r5
 8008366:	461a      	mov	r2, r3
 8008368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800836c:	2301      	movs	r3, #1
 800836e:	f000 bb31 	b.w	80089d4 <arm_cfft_f32>
 8008372:	bf00      	nop

08008374 <arm_cfft_radix8by2_f32>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	ed2d 8b08 	vpush	{d8-d11}
 800837c:	f8b0 e000 	ldrh.w	lr, [r0]
 8008380:	6842      	ldr	r2, [r0, #4]
 8008382:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8008386:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800838a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800838e:	4607      	mov	r7, r0
 8008390:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8008394:	f000 80af 	beq.w	80084f6 <arm_cfft_radix8by2_f32+0x182>
 8008398:	3310      	adds	r3, #16
 800839a:	18ce      	adds	r6, r1, r3
 800839c:	3210      	adds	r2, #16
 800839e:	4443      	add	r3, r8
 80083a0:	f101 0510 	add.w	r5, r1, #16
 80083a4:	f108 0410 	add.w	r4, r8, #16
 80083a8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80083ac:	ed13 4a04 	vldr	s8, [r3, #-16]
 80083b0:	ed53 3a03 	vldr	s7, [r3, #-12]
 80083b4:	ed53 5a02 	vldr	s11, [r3, #-8]
 80083b8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80083bc:	ed54 6a03 	vldr	s13, [r4, #-12]
 80083c0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80083c4:	ed16 2a04 	vldr	s4, [r6, #-16]
 80083c8:	ed56 2a03 	vldr	s5, [r6, #-12]
 80083cc:	ed15 6a03 	vldr	s12, [r5, #-12]
 80083d0:	ed15 7a01 	vldr	s14, [r5, #-4]
 80083d4:	ed15 3a04 	vldr	s6, [r5, #-16]
 80083d8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80083dc:	ed56 0a02 	vldr	s1, [r6, #-8]
 80083e0:	ed16 1a01 	vldr	s2, [r6, #-4]
 80083e4:	ed55 4a02 	vldr	s9, [r5, #-8]
 80083e8:	ee73 ba21 	vadd.f32	s23, s6, s3
 80083ec:	ee36 ba26 	vadd.f32	s22, s12, s13
 80083f0:	ee37 aa27 	vadd.f32	s20, s14, s15
 80083f4:	ee72 9a04 	vadd.f32	s19, s4, s8
 80083f8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80083fc:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008400:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008404:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008408:	ed45 ba04 	vstr	s23, [r5, #-16]
 800840c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008410:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008414:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008418:	ed06 8a01 	vstr	s16, [r6, #-4]
 800841c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008420:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008424:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008428:	ee76 6a66 	vsub.f32	s13, s12, s13
 800842c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008430:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008434:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008438:	ee33 3a61 	vsub.f32	s6, s6, s3
 800843c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008440:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008444:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008448:	ee63 1a22 	vmul.f32	s3, s6, s5
 800844c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008450:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008454:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008458:	ee23 6a86 	vmul.f32	s12, s7, s12
 800845c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008460:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008464:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008468:	ee72 3a63 	vsub.f32	s7, s4, s7
 800846c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008470:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008474:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008478:	ed43 3a04 	vstr	s7, [r3, #-16]
 800847c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008484:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008488:	ed12 7a01 	vldr	s14, [r2, #-4]
 800848c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008490:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008494:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008498:	ee67 3a87 	vmul.f32	s7, s15, s14
 800849c:	ee26 5a87 	vmul.f32	s10, s13, s14
 80084a0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80084a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80084a8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80084ac:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80084b0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80084b4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80084b8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80084bc:	ee74 5a23 	vadd.f32	s11, s8, s7
 80084c0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80084c4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80084c8:	f1be 0e01 	subs.w	lr, lr, #1
 80084cc:	ed44 5a02 	vstr	s11, [r4, #-8]
 80084d0:	f105 0510 	add.w	r5, r5, #16
 80084d4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80084d8:	f106 0610 	add.w	r6, r6, #16
 80084dc:	ed03 6a02 	vstr	s12, [r3, #-8]
 80084e0:	ed03 7a01 	vstr	s14, [r3, #-4]
 80084e4:	f102 0210 	add.w	r2, r2, #16
 80084e8:	f104 0410 	add.w	r4, r4, #16
 80084ec:	f103 0310 	add.w	r3, r3, #16
 80084f0:	f47f af5a 	bne.w	80083a8 <arm_cfft_radix8by2_f32+0x34>
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	fa1f f48c 	uxth.w	r4, ip
 80084fa:	4608      	mov	r0, r1
 80084fc:	2302      	movs	r3, #2
 80084fe:	4621      	mov	r1, r4
 8008500:	f000 fae2 	bl	8008ac8 <arm_radix8_butterfly_f32>
 8008504:	ecbd 8b08 	vpop	{d8-d11}
 8008508:	4640      	mov	r0, r8
 800850a:	4621      	mov	r1, r4
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	2302      	movs	r3, #2
 8008510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	f000 bad8 	b.w	8008ac8 <arm_radix8_butterfly_f32>

08008518 <arm_cfft_radix8by4_f32>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	ed2d 8b0a 	vpush	{d8-d12}
 8008520:	8802      	ldrh	r2, [r0, #0]
 8008522:	ed91 6a00 	vldr	s12, [r1]
 8008526:	b08f      	sub	sp, #60	; 0x3c
 8008528:	460f      	mov	r7, r1
 800852a:	0852      	lsrs	r2, r2, #1
 800852c:	0093      	lsls	r3, r2, #2
 800852e:	900c      	str	r0, [sp, #48]	; 0x30
 8008530:	9103      	str	r1, [sp, #12]
 8008532:	6841      	ldr	r1, [r0, #4]
 8008534:	ed97 7a01 	vldr	s14, [r7, #4]
 8008538:	4638      	mov	r0, r7
 800853a:	4418      	add	r0, r3
 800853c:	4606      	mov	r6, r0
 800853e:	9009      	str	r0, [sp, #36]	; 0x24
 8008540:	4418      	add	r0, r3
 8008542:	edd0 6a00 	vldr	s13, [r0]
 8008546:	edd6 3a00 	vldr	s7, [r6]
 800854a:	edd6 2a01 	vldr	s5, [r6, #4]
 800854e:	edd0 7a01 	vldr	s15, [r0, #4]
 8008552:	900a      	str	r0, [sp, #40]	; 0x28
 8008554:	ee76 5a26 	vadd.f32	s11, s12, s13
 8008558:	4604      	mov	r4, r0
 800855a:	4625      	mov	r5, r4
 800855c:	441c      	add	r4, r3
 800855e:	ed94 4a00 	vldr	s8, [r4]
 8008562:	ed94 5a01 	vldr	s10, [r4, #4]
 8008566:	9401      	str	r4, [sp, #4]
 8008568:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800856c:	4630      	mov	r0, r6
 800856e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8008572:	463e      	mov	r6, r7
 8008574:	ee14 ea90 	vmov	lr, s9
 8008578:	ee76 6a66 	vsub.f32	s13, s12, s13
 800857c:	f846 eb08 	str.w	lr, [r6], #8
 8008580:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008584:	edd0 4a01 	vldr	s9, [r0, #4]
 8008588:	9604      	str	r6, [sp, #16]
 800858a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800858e:	9e01      	ldr	r6, [sp, #4]
 8008590:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8008594:	ed96 2a01 	vldr	s4, [r6, #4]
 8008598:	ee36 7a24 	vadd.f32	s14, s12, s9
 800859c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80085a0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80085a4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80085a8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80085ac:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80085b0:	ee73 3a45 	vsub.f32	s7, s6, s10
 80085b4:	4604      	mov	r4, r0
 80085b6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80085ba:	ee75 6a26 	vadd.f32	s13, s10, s13
 80085be:	46a3      	mov	fp, r4
 80085c0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80085c4:	ee34 5a84 	vadd.f32	s10, s9, s8
 80085c8:	ee13 8a90 	vmov	r8, s7
 80085cc:	46a4      	mov	ip, r4
 80085ce:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80085d2:	ed87 7a01 	vstr	s14, [r7, #4]
 80085d6:	f84b 8b08 	str.w	r8, [fp], #8
 80085da:	f1ac 0704 	sub.w	r7, ip, #4
 80085de:	ed8c 5a01 	vstr	s10, [ip, #4]
 80085e2:	f101 0c08 	add.w	ip, r1, #8
 80085e6:	462c      	mov	r4, r5
 80085e8:	f8cd c014 	str.w	ip, [sp, #20]
 80085ec:	ee15 ca90 	vmov	ip, s11
 80085f0:	f844 cb08 	str.w	ip, [r4], #8
 80085f4:	9407      	str	r4, [sp, #28]
 80085f6:	f101 0410 	add.w	r4, r1, #16
 80085fa:	ed85 6a01 	vstr	s12, [r5, #4]
 80085fe:	0852      	lsrs	r2, r2, #1
 8008600:	9402      	str	r4, [sp, #8]
 8008602:	462c      	mov	r4, r5
 8008604:	f101 0518 	add.w	r5, r1, #24
 8008608:	920b      	str	r2, [sp, #44]	; 0x2c
 800860a:	46b2      	mov	sl, r6
 800860c:	9506      	str	r5, [sp, #24]
 800860e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008612:	3a02      	subs	r2, #2
 8008614:	ee16 5a90 	vmov	r5, s13
 8008618:	46b6      	mov	lr, r6
 800861a:	4630      	mov	r0, r6
 800861c:	0852      	lsrs	r2, r2, #1
 800861e:	f84a 5b08 	str.w	r5, [sl], #8
 8008622:	f1a0 0604 	sub.w	r6, r0, #4
 8008626:	edce 7a01 	vstr	s15, [lr, #4]
 800862a:	9208      	str	r2, [sp, #32]
 800862c:	f000 8130 	beq.w	8008890 <arm_cfft_radix8by4_f32+0x378>
 8008630:	4691      	mov	r9, r2
 8008632:	9a03      	ldr	r2, [sp, #12]
 8008634:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008638:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800863c:	3b08      	subs	r3, #8
 800863e:	f102 0510 	add.w	r5, r2, #16
 8008642:	f101 0c20 	add.w	ip, r1, #32
 8008646:	f1a4 020c 	sub.w	r2, r4, #12
 800864a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800864e:	4433      	add	r3, r6
 8008650:	3410      	adds	r4, #16
 8008652:	4650      	mov	r0, sl
 8008654:	4659      	mov	r1, fp
 8008656:	ed55 3a02 	vldr	s7, [r5, #-8]
 800865a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800865e:	ed91 7a00 	vldr	s14, [r1]
 8008662:	edd0 7a00 	vldr	s15, [r0]
 8008666:	ed15 4a01 	vldr	s8, [r5, #-4]
 800866a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800866e:	edd0 6a01 	vldr	s13, [r0, #4]
 8008672:	ed91 6a01 	vldr	s12, [r1, #4]
 8008676:	ee33 8a85 	vadd.f32	s16, s7, s10
 800867a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800867e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008682:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008686:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800868a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800868e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008692:	edd1 4a01 	vldr	s9, [r1, #4]
 8008696:	ed90 4a01 	vldr	s8, [r0, #4]
 800869a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800869e:	ee76 aa05 	vadd.f32	s21, s12, s10
 80086a2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80086a6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80086aa:	ed45 4a01 	vstr	s9, [r5, #-4]
 80086ae:	edd6 1a00 	vldr	s3, [r6]
 80086b2:	edd7 0a00 	vldr	s1, [r7]
 80086b6:	ed92 4a02 	vldr	s8, [r2, #8]
 80086ba:	edd3 3a02 	vldr	s7, [r3, #8]
 80086be:	ed93 2a01 	vldr	s4, [r3, #4]
 80086c2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80086c6:	edd2 2a01 	vldr	s5, [r2, #4]
 80086ca:	ed57 9a01 	vldr	s19, [r7, #-4]
 80086ce:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80086d2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80086d6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80086da:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80086de:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80086e2:	ee7a aae6 	vsub.f32	s21, s21, s13
 80086e6:	ee18 aa90 	vmov	sl, s17
 80086ea:	f847 a908 	str.w	sl, [r7], #-8
 80086ee:	edd2 8a01 	vldr	s17, [r2, #4]
 80086f2:	ed93 9a01 	vldr	s18, [r3, #4]
 80086f6:	ee73 8a28 	vadd.f32	s17, s6, s17
 80086fa:	ee3a aa27 	vadd.f32	s20, s20, s15
 80086fe:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008702:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008706:	edc7 8a01 	vstr	s17, [r7, #4]
 800870a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800870e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008712:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008716:	ee6a ba28 	vmul.f32	s23, s20, s17
 800871a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800871e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008722:	ee30 9a81 	vadd.f32	s18, s1, s2
 8008726:	ee79 9a82 	vadd.f32	s19, s19, s4
 800872a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800872e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008732:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008736:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800873a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800873e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008742:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008746:	ee1c aa10 	vmov	sl, s24
 800874a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800874e:	f841 ab08 	str.w	sl, [r1], #8
 8008752:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008756:	ee3b bacb 	vsub.f32	s22, s23, s22
 800875a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800875e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008762:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008766:	edc2 8a01 	vstr	s17, [r2, #4]
 800876a:	ed82 ba02 	vstr	s22, [r2, #8]
 800876e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008772:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008776:	ee38 8a47 	vsub.f32	s16, s16, s14
 800877a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800877e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008782:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008786:	ee38 8a67 	vsub.f32	s16, s16, s15
 800878a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800878e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8008792:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008796:	ee28 aa24 	vmul.f32	s20, s16, s9
 800879a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800879e:	ee28 8a04 	vmul.f32	s16, s16, s8
 80087a2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80087a6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80087aa:	ee39 4a68 	vsub.f32	s8, s18, s17
 80087ae:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80087b2:	ee14 aa10 	vmov	sl, s8
 80087b6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80087ba:	ee63 4a24 	vmul.f32	s9, s6, s9
 80087be:	ed44 9a02 	vstr	s19, [r4, #-8]
 80087c2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80087c6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80087ca:	f846 a908 	str.w	sl, [r6], #-8
 80087ce:	ee35 6a46 	vsub.f32	s12, s10, s12
 80087d2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80087d6:	edc6 3a01 	vstr	s7, [r6, #4]
 80087da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80087de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087e2:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80087e6:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80087ea:	ee67 5a86 	vmul.f32	s11, s15, s12
 80087ee:	ee26 5a87 	vmul.f32	s10, s13, s14
 80087f2:	ee72 2a62 	vsub.f32	s5, s4, s5
 80087f6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80087fa:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80087fe:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008802:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008806:	ee66 6a86 	vmul.f32	s13, s13, s12
 800880a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800880e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008812:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008816:	ee21 1a07 	vmul.f32	s2, s2, s14
 800881a:	ee15 aa90 	vmov	sl, s11
 800881e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008822:	f840 ab08 	str.w	sl, [r0], #8
 8008826:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800882a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800882e:	f1b9 0901 	subs.w	r9, r9, #1
 8008832:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008836:	f105 0508 	add.w	r5, r5, #8
 800883a:	ed83 1a02 	vstr	s2, [r3, #8]
 800883e:	edc3 2a01 	vstr	s5, [r3, #4]
 8008842:	f108 0808 	add.w	r8, r8, #8
 8008846:	f1a2 0208 	sub.w	r2, r2, #8
 800884a:	f10c 0c10 	add.w	ip, ip, #16
 800884e:	f104 0408 	add.w	r4, r4, #8
 8008852:	f10e 0e18 	add.w	lr, lr, #24
 8008856:	f1a3 0308 	sub.w	r3, r3, #8
 800885a:	f47f aefc 	bne.w	8008656 <arm_cfft_radix8by4_f32+0x13e>
 800885e:	9908      	ldr	r1, [sp, #32]
 8008860:	9802      	ldr	r0, [sp, #8]
 8008862:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008866:	00cb      	lsls	r3, r1, #3
 8008868:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800886c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008870:	9102      	str	r1, [sp, #8]
 8008872:	9904      	ldr	r1, [sp, #16]
 8008874:	4419      	add	r1, r3
 8008876:	9104      	str	r1, [sp, #16]
 8008878:	9905      	ldr	r1, [sp, #20]
 800887a:	4419      	add	r1, r3
 800887c:	9105      	str	r1, [sp, #20]
 800887e:	9907      	ldr	r1, [sp, #28]
 8008880:	449b      	add	fp, r3
 8008882:	4419      	add	r1, r3
 8008884:	449a      	add	sl, r3
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	9107      	str	r1, [sp, #28]
 800888a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800888e:	9306      	str	r3, [sp, #24]
 8008890:	9a04      	ldr	r2, [sp, #16]
 8008892:	9807      	ldr	r0, [sp, #28]
 8008894:	edd2 3a00 	vldr	s7, [r2]
 8008898:	ed90 4a00 	vldr	s8, [r0]
 800889c:	eddb 7a00 	vldr	s15, [fp]
 80088a0:	ed9a 3a00 	vldr	s6, [sl]
 80088a4:	edd2 4a01 	vldr	s9, [r2, #4]
 80088a8:	ed90 7a01 	vldr	s14, [r0, #4]
 80088ac:	ed9b 2a01 	vldr	s4, [fp, #4]
 80088b0:	edda 5a01 	vldr	s11, [sl, #4]
 80088b4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80088b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088ba:	ee73 6a84 	vadd.f32	s13, s7, s8
 80088be:	ee34 6a87 	vadd.f32	s12, s9, s14
 80088c2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80088c6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80088ca:	ee33 5a05 	vadd.f32	s10, s6, s10
 80088ce:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80088d2:	ed82 5a00 	vstr	s10, [r2]
 80088d6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80088da:	edda 4a01 	vldr	s9, [sl, #4]
 80088de:	ee36 5a05 	vadd.f32	s10, s12, s10
 80088e2:	ee72 3a04 	vadd.f32	s7, s4, s8
 80088e6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80088ea:	ee77 4a67 	vsub.f32	s9, s14, s15
 80088ee:	ed82 5a01 	vstr	s10, [r2, #4]
 80088f2:	9a05      	ldr	r2, [sp, #20]
 80088f4:	ee34 5a83 	vadd.f32	s10, s9, s6
 80088f8:	edd2 1a00 	vldr	s3, [r2]
 80088fc:	edd2 2a01 	vldr	s5, [r2, #4]
 8008900:	9a02      	ldr	r2, [sp, #8]
 8008902:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8008906:	ee36 6a42 	vsub.f32	s12, s12, s4
 800890a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800890e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008912:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008916:	ee25 5a21 	vmul.f32	s10, s10, s3
 800891a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800891e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008922:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008926:	edcb 2a00 	vstr	s5, [fp]
 800892a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800892e:	edd2 3a01 	vldr	s7, [r2, #4]
 8008932:	ed92 5a00 	vldr	s10, [r2]
 8008936:	9a06      	ldr	r2, [sp, #24]
 8008938:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800893c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008940:	ee66 4a85 	vmul.f32	s9, s13, s10
 8008944:	ee26 5a05 	vmul.f32	s10, s12, s10
 8008948:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800894c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008950:	ee75 6a66 	vsub.f32	s13, s10, s13
 8008954:	ee34 6a86 	vadd.f32	s12, s9, s12
 8008958:	ee34 4a42 	vsub.f32	s8, s8, s4
 800895c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008960:	edc0 6a01 	vstr	s13, [r0, #4]
 8008964:	ed80 6a00 	vstr	s12, [r0]
 8008968:	ed92 6a01 	vldr	s12, [r2, #4]
 800896c:	9803      	ldr	r0, [sp, #12]
 800896e:	ee77 7a43 	vsub.f32	s15, s14, s6
 8008972:	ee75 5a84 	vadd.f32	s11, s11, s8
 8008976:	ed92 7a00 	vldr	s14, [r2]
 800897a:	ee65 6a87 	vmul.f32	s13, s11, s14
 800897e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008982:	ee65 5a86 	vmul.f32	s11, s11, s12
 8008986:	ee67 7a86 	vmul.f32	s15, s15, s12
 800898a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800898e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008992:	edca 5a01 	vstr	s11, [sl, #4]
 8008996:	edca 7a00 	vstr	s15, [sl]
 800899a:	6872      	ldr	r2, [r6, #4]
 800899c:	4621      	mov	r1, r4
 800899e:	2304      	movs	r3, #4
 80089a0:	f000 f892 	bl	8008ac8 <arm_radix8_butterfly_f32>
 80089a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089a6:	6872      	ldr	r2, [r6, #4]
 80089a8:	4621      	mov	r1, r4
 80089aa:	2304      	movs	r3, #4
 80089ac:	f000 f88c 	bl	8008ac8 <arm_radix8_butterfly_f32>
 80089b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089b2:	6872      	ldr	r2, [r6, #4]
 80089b4:	4621      	mov	r1, r4
 80089b6:	2304      	movs	r3, #4
 80089b8:	f000 f886 	bl	8008ac8 <arm_radix8_butterfly_f32>
 80089bc:	9801      	ldr	r0, [sp, #4]
 80089be:	6872      	ldr	r2, [r6, #4]
 80089c0:	4621      	mov	r1, r4
 80089c2:	2304      	movs	r3, #4
 80089c4:	b00f      	add	sp, #60	; 0x3c
 80089c6:	ecbd 8b0a 	vpop	{d8-d12}
 80089ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ce:	f000 b87b 	b.w	8008ac8 <arm_radix8_butterfly_f32>
 80089d2:	bf00      	nop

080089d4 <arm_cfft_f32>:
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d8:	2a01      	cmp	r2, #1
 80089da:	4606      	mov	r6, r0
 80089dc:	4617      	mov	r7, r2
 80089de:	460c      	mov	r4, r1
 80089e0:	4698      	mov	r8, r3
 80089e2:	8805      	ldrh	r5, [r0, #0]
 80089e4:	d054      	beq.n	8008a90 <arm_cfft_f32+0xbc>
 80089e6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80089ea:	d04c      	beq.n	8008a86 <arm_cfft_f32+0xb2>
 80089ec:	d916      	bls.n	8008a1c <arm_cfft_f32+0x48>
 80089ee:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80089f2:	d01a      	beq.n	8008a2a <arm_cfft_f32+0x56>
 80089f4:	d95c      	bls.n	8008ab0 <arm_cfft_f32+0xdc>
 80089f6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80089fa:	d044      	beq.n	8008a86 <arm_cfft_f32+0xb2>
 80089fc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008a00:	d105      	bne.n	8008a0e <arm_cfft_f32+0x3a>
 8008a02:	4620      	mov	r0, r4
 8008a04:	4629      	mov	r1, r5
 8008a06:	6872      	ldr	r2, [r6, #4]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	f000 f85d 	bl	8008ac8 <arm_radix8_butterfly_f32>
 8008a0e:	f1b8 0f00 	cmp.w	r8, #0
 8008a12:	d111      	bne.n	8008a38 <arm_cfft_f32+0x64>
 8008a14:	2f01      	cmp	r7, #1
 8008a16:	d016      	beq.n	8008a46 <arm_cfft_f32+0x72>
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	2d20      	cmp	r5, #32
 8008a1e:	d032      	beq.n	8008a86 <arm_cfft_f32+0xb2>
 8008a20:	d94a      	bls.n	8008ab8 <arm_cfft_f32+0xe4>
 8008a22:	2d40      	cmp	r5, #64	; 0x40
 8008a24:	d0ed      	beq.n	8008a02 <arm_cfft_f32+0x2e>
 8008a26:	2d80      	cmp	r5, #128	; 0x80
 8008a28:	d1f1      	bne.n	8008a0e <arm_cfft_f32+0x3a>
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f7ff fca1 	bl	8008374 <arm_cfft_radix8by2_f32>
 8008a32:	f1b8 0f00 	cmp.w	r8, #0
 8008a36:	d0ed      	beq.n	8008a14 <arm_cfft_f32+0x40>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	89b1      	ldrh	r1, [r6, #12]
 8008a3c:	68b2      	ldr	r2, [r6, #8]
 8008a3e:	f7f7 fbcf 	bl	80001e0 <arm_bitreversal_32>
 8008a42:	2f01      	cmp	r7, #1
 8008a44:	d1e8      	bne.n	8008a18 <arm_cfft_f32+0x44>
 8008a46:	ee07 5a90 	vmov	s15, r5
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008a52:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	d0de      	beq.n	8008a18 <arm_cfft_f32+0x44>
 8008a5a:	f104 0108 	add.w	r1, r4, #8
 8008a5e:	2300      	movs	r3, #0
 8008a60:	3301      	adds	r3, #1
 8008a62:	429d      	cmp	r5, r3
 8008a64:	f101 0108 	add.w	r1, r1, #8
 8008a68:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008a6c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008a70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008a74:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008a78:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008a7c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008a80:	d1ee      	bne.n	8008a60 <arm_cfft_f32+0x8c>
 8008a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a86:	4630      	mov	r0, r6
 8008a88:	4621      	mov	r1, r4
 8008a8a:	f7ff fd45 	bl	8008518 <arm_cfft_radix8by4_f32>
 8008a8e:	e7be      	b.n	8008a0e <arm_cfft_f32+0x3a>
 8008a90:	b1ad      	cbz	r5, 8008abe <arm_cfft_f32+0xea>
 8008a92:	f101 030c 	add.w	r3, r1, #12
 8008a96:	2200      	movs	r2, #0
 8008a98:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008a9c:	3201      	adds	r2, #1
 8008a9e:	eef1 7a67 	vneg.f32	s15, s15
 8008aa2:	4295      	cmp	r5, r2
 8008aa4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008aa8:	f103 0308 	add.w	r3, r3, #8
 8008aac:	d1f4      	bne.n	8008a98 <arm_cfft_f32+0xc4>
 8008aae:	e79a      	b.n	80089e6 <arm_cfft_f32+0x12>
 8008ab0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008ab4:	d0a5      	beq.n	8008a02 <arm_cfft_f32+0x2e>
 8008ab6:	e7aa      	b.n	8008a0e <arm_cfft_f32+0x3a>
 8008ab8:	2d10      	cmp	r5, #16
 8008aba:	d0b6      	beq.n	8008a2a <arm_cfft_f32+0x56>
 8008abc:	e7a7      	b.n	8008a0e <arm_cfft_f32+0x3a>
 8008abe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008ac2:	d894      	bhi.n	80089ee <arm_cfft_f32+0x1a>
 8008ac4:	e7aa      	b.n	8008a1c <arm_cfft_f32+0x48>
 8008ac6:	bf00      	nop

08008ac8 <arm_radix8_butterfly_f32>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	ed2d 8b10 	vpush	{d8-d15}
 8008ad0:	b09d      	sub	sp, #116	; 0x74
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	ed9f bac8 	vldr	s22, [pc, #800]	; 8008df8 <arm_radix8_butterfly_f32+0x330>
 8008ad8:	921a      	str	r2, [sp, #104]	; 0x68
 8008ada:	1d03      	adds	r3, r0, #4
 8008adc:	4682      	mov	sl, r0
 8008ade:	4689      	mov	r9, r1
 8008ae0:	468b      	mov	fp, r1
 8008ae2:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ae4:	9400      	str	r4, [sp, #0]
 8008ae6:	469e      	mov	lr, r3
 8008ae8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008aec:	005a      	lsls	r2, r3, #1
 8008aee:	18d6      	adds	r6, r2, r3
 8008af0:	18f5      	adds	r5, r6, r3
 8008af2:	9203      	str	r2, [sp, #12]
 8008af4:	195a      	adds	r2, r3, r5
 8008af6:	18d0      	adds	r0, r2, r3
 8008af8:	00df      	lsls	r7, r3, #3
 8008afa:	1819      	adds	r1, r3, r0
 8008afc:	463c      	mov	r4, r7
 8008afe:	9701      	str	r7, [sp, #4]
 8008b00:	4457      	add	r7, sl
 8008b02:	930c      	str	r3, [sp, #48]	; 0x30
 8008b04:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8008b0e:	eb07 0c04 	add.w	ip, r7, r4
 8008b12:	9c00      	ldr	r4, [sp, #0]
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8008b1a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8008b1e:	3204      	adds	r2, #4
 8008b20:	3104      	adds	r1, #4
 8008b22:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8008b26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	eddc 7a00 	vldr	s15, [ip]
 8008b32:	edd7 6a00 	vldr	s13, [r7]
 8008b36:	edd6 3a00 	vldr	s7, [r6]
 8008b3a:	ed5e aa01 	vldr	s21, [lr, #-4]
 8008b3e:	edd5 4a00 	vldr	s9, [r5]
 8008b42:	ed90 2a00 	vldr	s4, [r0]
 8008b46:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008b4a:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008b4e:	ee77 8a82 	vadd.f32	s17, s15, s4
 8008b52:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8008b56:	ee76 1a87 	vadd.f32	s3, s13, s14
 8008b5a:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8008b5e:	ee31 6a84 	vadd.f32	s12, s3, s8
 8008b62:	ee33 5a28 	vadd.f32	s10, s6, s17
 8008b66:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008b6a:	ee75 6a06 	vadd.f32	s13, s10, s12
 8008b6e:	ee35 5a46 	vsub.f32	s10, s10, s12
 8008b72:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8008b76:	ed85 5a00 	vstr	s10, [r5]
 8008b7a:	ed96 1a01 	vldr	s2, [r6, #4]
 8008b7e:	edd7 5a01 	vldr	s11, [r7, #4]
 8008b82:	ed92 aa00 	vldr	s20, [r2]
 8008b86:	ed91 6a00 	vldr	s12, [r1]
 8008b8a:	ed9e 9a00 	vldr	s18, [lr]
 8008b8e:	ed95 5a01 	vldr	s10, [r5, #4]
 8008b92:	eddc 6a01 	vldr	s13, [ip, #4]
 8008b96:	edd0 9a01 	vldr	s19, [r0, #4]
 8008b9a:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8008b9e:	ee71 2a46 	vsub.f32	s5, s2, s12
 8008ba2:	ee75 3aca 	vsub.f32	s7, s11, s20
 8008ba6:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008baa:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8008bae:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008bb2:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8008bb6:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8008bba:	ee79 3a05 	vadd.f32	s7, s18, s10
 8008bbe:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008bc2:	ee39 5a45 	vsub.f32	s10, s18, s10
 8008bc6:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8008bca:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008bce:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8008bd2:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008bd6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008bda:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008bde:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8008be2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008be6:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008bea:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008bee:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008bf2:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008bf6:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8008bfa:	ee75 6a62 	vsub.f32	s13, s10, s5
 8008bfe:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8008c02:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008c06:	ee33 1a89 	vadd.f32	s2, s7, s18
 8008c0a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8008c0e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008c12:	ee75 4a22 	vadd.f32	s9, s10, s5
 8008c16:	ee32 5a27 	vadd.f32	s10, s4, s15
 8008c1a:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008c1e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8008c22:	ee75 2a87 	vadd.f32	s5, s11, s14
 8008c26:	ee31 9a28 	vadd.f32	s18, s2, s17
 8008c2a:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008c2e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8008c32:	ee33 2a80 	vadd.f32	s4, s7, s0
 8008c36:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008c3a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8008c3e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008c42:	ee31 1a68 	vsub.f32	s2, s2, s17
 8008c46:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008c4a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008c4e:	ee74 4a85 	vadd.f32	s9, s9, s10
 8008c52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008c56:	44d8      	add	r8, fp
 8008c58:	45c1      	cmp	r9, r8
 8008c5a:	ed8e 9a00 	vstr	s18, [lr]
 8008c5e:	ed85 1a01 	vstr	s2, [r5, #4]
 8008c62:	449e      	add	lr, r3
 8008c64:	ed8c 8a00 	vstr	s16, [ip]
 8008c68:	441d      	add	r5, r3
 8008c6a:	ed80 6a00 	vstr	s12, [r0]
 8008c6e:	edcc 0a01 	vstr	s1, [ip, #4]
 8008c72:	ed80 4a01 	vstr	s8, [r0, #4]
 8008c76:	449c      	add	ip, r3
 8008c78:	ed87 2a00 	vstr	s4, [r7]
 8008c7c:	4418      	add	r0, r3
 8008c7e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008c82:	ed42 2a01 	vstr	s5, [r2, #-4]
 8008c86:	ed86 7a00 	vstr	s14, [r6]
 8008c8a:	ed87 3a01 	vstr	s6, [r7, #4]
 8008c8e:	edc1 4a00 	vstr	s9, [r1]
 8008c92:	441f      	add	r7, r3
 8008c94:	edc2 5a00 	vstr	s11, [r2]
 8008c98:	4419      	add	r1, r3
 8008c9a:	edc6 6a01 	vstr	s13, [r6, #4]
 8008c9e:	441a      	add	r2, r3
 8008ca0:	441e      	add	r6, r3
 8008ca2:	f63f af44 	bhi.w	8008b2e <arm_radix8_butterfly_f32+0x66>
 8008ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ca8:	2907      	cmp	r1, #7
 8008caa:	4620      	mov	r0, r4
 8008cac:	f240 81e9 	bls.w	8009082 <arm_radix8_butterfly_f32+0x5ba>
 8008cb0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8008cb4:	193e      	adds	r6, r7, r4
 8008cb6:	1935      	adds	r5, r6, r4
 8008cb8:	9c03      	ldr	r4, [sp, #12]
 8008cba:	9000      	str	r0, [sp, #0]
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	3201      	adds	r2, #1
 8008cc0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008cc4:	9900      	ldr	r1, [sp, #0]
 8008cc6:	1828      	adds	r0, r5, r0
 8008cc8:	eb00 0e01 	add.w	lr, r0, r1
 8008ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cce:	440a      	add	r2, r1
 8008cd0:	eb04 0c01 	add.w	ip, r4, r1
 8008cd4:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8008cd8:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8008cdc:	9a00      	ldr	r2, [sp, #0]
 8008cde:	940f      	str	r4, [sp, #60]	; 0x3c
 8008ce0:	00ed      	lsls	r5, r5, #3
 8008ce2:	9511      	str	r5, [sp, #68]	; 0x44
 8008ce4:	00d5      	lsls	r5, r2, #3
 8008ce6:	950d      	str	r5, [sp, #52]	; 0x34
 8008ce8:	9d01      	ldr	r5, [sp, #4]
 8008cea:	3508      	adds	r5, #8
 8008cec:	9516      	str	r5, [sp, #88]	; 0x58
 8008cee:	9d02      	ldr	r5, [sp, #8]
 8008cf0:	3508      	adds	r5, #8
 8008cf2:	0114      	lsls	r4, r2, #4
 8008cf4:	9517      	str	r5, [sp, #92]	; 0x5c
 8008cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008cf8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008cfa:	940e      	str	r4, [sp, #56]	; 0x38
 8008cfc:	00c0      	lsls	r0, r0, #3
 8008cfe:	9010      	str	r0, [sp, #64]	; 0x40
 8008d00:	18aa      	adds	r2, r5, r2
 8008d02:	9207      	str	r2, [sp, #28]
 8008d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008d06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008d08:	18aa      	adds	r2, r5, r2
 8008d0a:	9208      	str	r2, [sp, #32]
 8008d0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d0e:	18aa      	adds	r2, r5, r2
 8008d10:	9209      	str	r2, [sp, #36]	; 0x24
 8008d12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008d16:	f10e 0204 	add.w	r2, lr, #4
 8008d1a:	920a      	str	r2, [sp, #40]	; 0x28
 8008d1c:	00c9      	lsls	r1, r1, #3
 8008d1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d20:	310c      	adds	r1, #12
 8008d22:	00f6      	lsls	r6, r6, #3
 8008d24:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8008d28:	9114      	str	r1, [sp, #80]	; 0x50
 8008d2a:	18a9      	adds	r1, r5, r2
 8008d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d2e:	9612      	str	r6, [sp, #72]	; 0x48
 8008d30:	00ff      	lsls	r7, r7, #3
 8008d32:	19ae      	adds	r6, r5, r6
 8008d34:	3008      	adds	r0, #8
 8008d36:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8008d3a:	9606      	str	r6, [sp, #24]
 8008d3c:	9019      	str	r0, [sp, #100]	; 0x64
 8008d3e:	18aa      	adds	r2, r5, r2
 8008d40:	0164      	lsls	r4, r4, #5
 8008d42:	19ee      	adds	r6, r5, r7
 8008d44:	f10c 000c 	add.w	r0, ip, #12
 8008d48:	9713      	str	r7, [sp, #76]	; 0x4c
 8008d4a:	9604      	str	r6, [sp, #16]
 8008d4c:	9015      	str	r0, [sp, #84]	; 0x54
 8008d4e:	9103      	str	r1, [sp, #12]
 8008d50:	9205      	str	r2, [sp, #20]
 8008d52:	f104 0208 	add.w	r2, r4, #8
 8008d56:	9218      	str	r2, [sp, #96]	; 0x60
 8008d58:	f04f 0801 	mov.w	r8, #1
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f102 0108 	add.w	r1, r2, #8
 8008d62:	460f      	mov	r7, r1
 8008d64:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d68:	188e      	adds	r6, r1, r2
 8008d6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d6c:	188d      	adds	r5, r1, r2
 8008d6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008d70:	188c      	adds	r4, r1, r2
 8008d72:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008d74:	1888      	adds	r0, r1, r2
 8008d76:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008d78:	eb01 0c02 	add.w	ip, r1, r2
 8008d7c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008d7e:	440a      	add	r2, r1
 8008d80:	9903      	ldr	r1, [sp, #12]
 8008d82:	edd1 fa00 	vldr	s31, [r1]
 8008d86:	9905      	ldr	r1, [sp, #20]
 8008d88:	ed91 fa00 	vldr	s30, [r1]
 8008d8c:	9904      	ldr	r1, [sp, #16]
 8008d8e:	edd1 ea00 	vldr	s29, [r1]
 8008d92:	9906      	ldr	r1, [sp, #24]
 8008d94:	ed91 ea00 	vldr	s28, [r1]
 8008d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d9a:	edd1 da00 	vldr	s27, [r1]
 8008d9e:	9908      	ldr	r1, [sp, #32]
 8008da0:	ed91 da00 	vldr	s26, [r1]
 8008da4:	9907      	ldr	r1, [sp, #28]
 8008da6:	edd1 ca00 	vldr	s25, [r1]
 8008daa:	9903      	ldr	r1, [sp, #12]
 8008dac:	ed91 ca01 	vldr	s24, [r1, #4]
 8008db0:	9905      	ldr	r1, [sp, #20]
 8008db2:	edd1 ba01 	vldr	s23, [r1, #4]
 8008db6:	9904      	ldr	r1, [sp, #16]
 8008db8:	edd1 aa01 	vldr	s21, [r1, #4]
 8008dbc:	9906      	ldr	r1, [sp, #24]
 8008dbe:	ed91 aa01 	vldr	s20, [r1, #4]
 8008dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dc4:	edd1 7a01 	vldr	s15, [r1, #4]
 8008dc8:	9908      	ldr	r1, [sp, #32]
 8008dca:	edcd 7a00 	vstr	s15, [sp]
 8008dce:	edd1 7a01 	vldr	s15, [r1, #4]
 8008dd2:	9907      	ldr	r1, [sp, #28]
 8008dd4:	edcd 7a01 	vstr	s15, [sp, #4]
 8008dd8:	edd1 7a01 	vldr	s15, [r1, #4]
 8008ddc:	eb0a 0e07 	add.w	lr, sl, r7
 8008de0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008de2:	edcd 7a02 	vstr	s15, [sp, #8]
 8008de6:	eb0c 010a 	add.w	r1, ip, sl
 8008dea:	4456      	add	r6, sl
 8008dec:	4455      	add	r5, sl
 8008dee:	4454      	add	r4, sl
 8008df0:	4450      	add	r0, sl
 8008df2:	4452      	add	r2, sl
 8008df4:	46c4      	mov	ip, r8
 8008df6:	e001      	b.n	8008dfc <arm_radix8_butterfly_f32+0x334>
 8008df8:	3f3504f3 	.word	0x3f3504f3
 8008dfc:	ed96 5a00 	vldr	s10, [r6]
 8008e00:	ed52 9a01 	vldr	s19, [r2, #-4]
 8008e04:	ed11 6a01 	vldr	s12, [r1, #-4]
 8008e08:	edd0 7a00 	vldr	s15, [r0]
 8008e0c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8008e10:	edde 3a00 	vldr	s7, [lr]
 8008e14:	ed94 3a00 	vldr	s6, [r4]
 8008e18:	ed95 2a00 	vldr	s4, [r5]
 8008e1c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8008e20:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008e24:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008e28:	ee33 4a29 	vadd.f32	s8, s6, s19
 8008e2c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008e30:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008e34:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008e38:	ee32 2a46 	vsub.f32	s4, s4, s12
 8008e3c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008e40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e44:	ed8e 6a00 	vstr	s12, [lr]
 8008e48:	edd0 8a01 	vldr	s17, [r0, #4]
 8008e4c:	ed95 9a01 	vldr	s18, [r5, #4]
 8008e50:	edd1 2a00 	vldr	s5, [r1]
 8008e54:	ed97 7a00 	vldr	s14, [r7]
 8008e58:	edd4 0a01 	vldr	s1, [r4, #4]
 8008e5c:	ed96 6a01 	vldr	s12, [r6, #4]
 8008e60:	edd2 5a00 	vldr	s11, [r2]
 8008e64:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008e68:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008e6c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008e70:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8008e74:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008e78:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008e7c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008e80:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008e84:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008e88:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008e8c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008e90:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008e94:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008e98:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008e9c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008ea0:	ee32 9a08 	vadd.f32	s18, s4, s16
 8008ea4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008ea8:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008eac:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008eb0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008eb4:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008eb8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008ebc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008ec0:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008ec4:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008ec8:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008ecc:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008ed0:	ee32 7a64 	vsub.f32	s14, s4, s9
 8008ed4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008ed8:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008edc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008ee0:	ee75 8a85 	vadd.f32	s17, s11, s10
 8008ee4:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008ee8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008eec:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008ef0:	ee79 1a41 	vsub.f32	s3, s18, s2
 8008ef4:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8008ef8:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008efc:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008f00:	ee72 4a24 	vadd.f32	s9, s4, s9
 8008f04:	ee30 4a60 	vsub.f32	s8, s0, s1
 8008f08:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8008f0c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8008f10:	ee77 9a85 	vadd.f32	s19, s15, s10
 8008f14:	ee36 6a03 	vadd.f32	s12, s12, s6
 8008f18:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008f1c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8008f20:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8008f24:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8008f28:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8008f2c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8008f30:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8008f34:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8008f38:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8008f3c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8008f40:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8008f44:	ee35 3a03 	vadd.f32	s6, s10, s6
 8008f48:	ee72 6a66 	vsub.f32	s13, s4, s13
 8008f4c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8008f50:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8008f54:	ed9d 4a02 	vldr	s8, [sp, #8]
 8008f58:	ed8e 1a01 	vstr	s2, [lr, #4]
 8008f5c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8008f60:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8008f64:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008f68:	ed86 3a00 	vstr	s6, [r6]
 8008f6c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008f70:	ee32 2a05 	vadd.f32	s4, s4, s10
 8008f74:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8008f78:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008f7c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008f80:	ee64 1a00 	vmul.f32	s3, s8, s0
 8008f84:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008f88:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008f8c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008f90:	ee64 8a28 	vmul.f32	s17, s8, s17
 8008f94:	ed9d 4a00 	vldr	s8, [sp]
 8008f98:	edc6 6a01 	vstr	s13, [r6, #4]
 8008f9c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008fa0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8008fa4:	ee64 9a29 	vmul.f32	s19, s8, s19
 8008fa8:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008fac:	ee30 7a87 	vadd.f32	s14, s1, s14
 8008fb0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008fb4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8008fb8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8008fbc:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8008fc0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8008fc4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008fc8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008fcc:	ee75 1a21 	vadd.f32	s3, s10, s3
 8008fd0:	ee30 0a68 	vsub.f32	s0, s0, s17
 8008fd4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8008fd8:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008fdc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008fe0:	44dc      	add	ip, fp
 8008fe2:	45e1      	cmp	r9, ip
 8008fe4:	ed84 9a00 	vstr	s18, [r4]
 8008fe8:	edc4 3a01 	vstr	s7, [r4, #4]
 8008fec:	449e      	add	lr, r3
 8008fee:	ed02 7a01 	vstr	s14, [r2, #-4]
 8008ff2:	edc2 2a00 	vstr	s5, [r2]
 8008ff6:	441e      	add	r6, r3
 8008ff8:	ed85 2a00 	vstr	s4, [r5]
 8008ffc:	ed85 8a01 	vstr	s16, [r5, #4]
 8009000:	441c      	add	r4, r3
 8009002:	ed47 1a01 	vstr	s3, [r7, #-4]
 8009006:	ed87 0a00 	vstr	s0, [r7]
 800900a:	441a      	add	r2, r3
 800900c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8009010:	edc1 9a00 	vstr	s19, [r1]
 8009014:	441d      	add	r5, r3
 8009016:	edc0 0a00 	vstr	s1, [r0]
 800901a:	441f      	add	r7, r3
 800901c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009020:	4419      	add	r1, r3
 8009022:	4418      	add	r0, r3
 8009024:	f63f aeea 	bhi.w	8008dfc <arm_radix8_butterfly_f32+0x334>
 8009028:	9a03      	ldr	r2, [sp, #12]
 800902a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800902c:	440a      	add	r2, r1
 800902e:	9203      	str	r2, [sp, #12]
 8009030:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009032:	9a05      	ldr	r2, [sp, #20]
 8009034:	440a      	add	r2, r1
 8009036:	9205      	str	r2, [sp, #20]
 8009038:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800903a:	9a04      	ldr	r2, [sp, #16]
 800903c:	440a      	add	r2, r1
 800903e:	9204      	str	r2, [sp, #16]
 8009040:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009042:	9a06      	ldr	r2, [sp, #24]
 8009044:	440a      	add	r2, r1
 8009046:	9206      	str	r2, [sp, #24]
 8009048:	9911      	ldr	r1, [sp, #68]	; 0x44
 800904a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800904c:	440a      	add	r2, r1
 800904e:	9209      	str	r2, [sp, #36]	; 0x24
 8009050:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009052:	9a08      	ldr	r2, [sp, #32]
 8009054:	440a      	add	r2, r1
 8009056:	9208      	str	r2, [sp, #32]
 8009058:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800905a:	9a07      	ldr	r2, [sp, #28]
 800905c:	440a      	add	r2, r1
 800905e:	9207      	str	r2, [sp, #28]
 8009060:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009064:	f108 0801 	add.w	r8, r8, #1
 8009068:	3208      	adds	r2, #8
 800906a:	4588      	cmp	r8, r1
 800906c:	920a      	str	r2, [sp, #40]	; 0x28
 800906e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009070:	f47f ae75 	bne.w	8008d5e <arm_radix8_butterfly_f32+0x296>
 8009074:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	46c3      	mov	fp, r8
 800907c:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8009080:	e532      	b.n	8008ae8 <arm_radix8_butterfly_f32+0x20>
 8009082:	b01d      	add	sp, #116	; 0x74
 8009084:	ecbd 8b10 	vpop	{d8-d15}
 8009088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800908c <__errno>:
 800908c:	4b01      	ldr	r3, [pc, #4]	; (8009094 <__errno+0x8>)
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000034 	.word	0x20000034

08009098 <__libc_init_array>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	4d0d      	ldr	r5, [pc, #52]	; (80090d0 <__libc_init_array+0x38>)
 800909c:	4c0d      	ldr	r4, [pc, #52]	; (80090d4 <__libc_init_array+0x3c>)
 800909e:	1b64      	subs	r4, r4, r5
 80090a0:	10a4      	asrs	r4, r4, #2
 80090a2:	2600      	movs	r6, #0
 80090a4:	42a6      	cmp	r6, r4
 80090a6:	d109      	bne.n	80090bc <__libc_init_array+0x24>
 80090a8:	4d0b      	ldr	r5, [pc, #44]	; (80090d8 <__libc_init_array+0x40>)
 80090aa:	4c0c      	ldr	r4, [pc, #48]	; (80090dc <__libc_init_array+0x44>)
 80090ac:	f001 fba2 	bl	800a7f4 <_init>
 80090b0:	1b64      	subs	r4, r4, r5
 80090b2:	10a4      	asrs	r4, r4, #2
 80090b4:	2600      	movs	r6, #0
 80090b6:	42a6      	cmp	r6, r4
 80090b8:	d105      	bne.n	80090c6 <__libc_init_array+0x2e>
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
 80090bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c0:	4798      	blx	r3
 80090c2:	3601      	adds	r6, #1
 80090c4:	e7ee      	b.n	80090a4 <__libc_init_array+0xc>
 80090c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ca:	4798      	blx	r3
 80090cc:	3601      	adds	r6, #1
 80090ce:	e7f2      	b.n	80090b6 <__libc_init_array+0x1e>
 80090d0:	0801ed74 	.word	0x0801ed74
 80090d4:	0801ed74 	.word	0x0801ed74
 80090d8:	0801ed74 	.word	0x0801ed74
 80090dc:	0801ed78 	.word	0x0801ed78

080090e0 <memset>:
 80090e0:	4402      	add	r2, r0
 80090e2:	4603      	mov	r3, r0
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d100      	bne.n	80090ea <memset+0xa>
 80090e8:	4770      	bx	lr
 80090ea:	f803 1b01 	strb.w	r1, [r3], #1
 80090ee:	e7f9      	b.n	80090e4 <memset+0x4>

080090f0 <rand>:
 80090f0:	4b17      	ldr	r3, [pc, #92]	; (8009150 <rand+0x60>)
 80090f2:	b510      	push	{r4, lr}
 80090f4:	681c      	ldr	r4, [r3, #0]
 80090f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090f8:	b9b3      	cbnz	r3, 8009128 <rand+0x38>
 80090fa:	2018      	movs	r0, #24
 80090fc:	f000 f888 	bl	8009210 <malloc>
 8009100:	63a0      	str	r0, [r4, #56]	; 0x38
 8009102:	b928      	cbnz	r0, 8009110 <rand+0x20>
 8009104:	4602      	mov	r2, r0
 8009106:	4b13      	ldr	r3, [pc, #76]	; (8009154 <rand+0x64>)
 8009108:	4813      	ldr	r0, [pc, #76]	; (8009158 <rand+0x68>)
 800910a:	214e      	movs	r1, #78	; 0x4e
 800910c:	f000 f850 	bl	80091b0 <__assert_func>
 8009110:	4a12      	ldr	r2, [pc, #72]	; (800915c <rand+0x6c>)
 8009112:	4b13      	ldr	r3, [pc, #76]	; (8009160 <rand+0x70>)
 8009114:	e9c0 2300 	strd	r2, r3, [r0]
 8009118:	4b12      	ldr	r3, [pc, #72]	; (8009164 <rand+0x74>)
 800911a:	6083      	str	r3, [r0, #8]
 800911c:	230b      	movs	r3, #11
 800911e:	8183      	strh	r3, [r0, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	2300      	movs	r3, #0
 8009124:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009128:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800912a:	480f      	ldr	r0, [pc, #60]	; (8009168 <rand+0x78>)
 800912c:	690a      	ldr	r2, [r1, #16]
 800912e:	694b      	ldr	r3, [r1, #20]
 8009130:	4c0e      	ldr	r4, [pc, #56]	; (800916c <rand+0x7c>)
 8009132:	4350      	muls	r0, r2
 8009134:	fb04 0003 	mla	r0, r4, r3, r0
 8009138:	fba2 3404 	umull	r3, r4, r2, r4
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	4404      	add	r4, r0
 8009140:	f144 0000 	adc.w	r0, r4, #0
 8009144:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009148:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800914c:	bd10      	pop	{r4, pc}
 800914e:	bf00      	nop
 8009150:	20000034 	.word	0x20000034
 8009154:	0801ec24 	.word	0x0801ec24
 8009158:	0801ec3b 	.word	0x0801ec3b
 800915c:	abcd330e 	.word	0xabcd330e
 8009160:	e66d1234 	.word	0xe66d1234
 8009164:	0005deec 	.word	0x0005deec
 8009168:	5851f42d 	.word	0x5851f42d
 800916c:	4c957f2d 	.word	0x4c957f2d

08009170 <siprintf>:
 8009170:	b40e      	push	{r1, r2, r3}
 8009172:	b500      	push	{lr}
 8009174:	b09c      	sub	sp, #112	; 0x70
 8009176:	ab1d      	add	r3, sp, #116	; 0x74
 8009178:	9002      	str	r0, [sp, #8]
 800917a:	9006      	str	r0, [sp, #24]
 800917c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009180:	4809      	ldr	r0, [pc, #36]	; (80091a8 <siprintf+0x38>)
 8009182:	9107      	str	r1, [sp, #28]
 8009184:	9104      	str	r1, [sp, #16]
 8009186:	4909      	ldr	r1, [pc, #36]	; (80091ac <siprintf+0x3c>)
 8009188:	f853 2b04 	ldr.w	r2, [r3], #4
 800918c:	9105      	str	r1, [sp, #20]
 800918e:	6800      	ldr	r0, [r0, #0]
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	a902      	add	r1, sp, #8
 8009194:	f000 f94a 	bl	800942c <_svfiprintf_r>
 8009198:	9b02      	ldr	r3, [sp, #8]
 800919a:	2200      	movs	r2, #0
 800919c:	701a      	strb	r2, [r3, #0]
 800919e:	b01c      	add	sp, #112	; 0x70
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	20000034 	.word	0x20000034
 80091ac:	ffff0208 	.word	0xffff0208

080091b0 <__assert_func>:
 80091b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091b2:	4614      	mov	r4, r2
 80091b4:	461a      	mov	r2, r3
 80091b6:	4b09      	ldr	r3, [pc, #36]	; (80091dc <__assert_func+0x2c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4605      	mov	r5, r0
 80091bc:	68d8      	ldr	r0, [r3, #12]
 80091be:	b14c      	cbz	r4, 80091d4 <__assert_func+0x24>
 80091c0:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <__assert_func+0x30>)
 80091c2:	9100      	str	r1, [sp, #0]
 80091c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091c8:	4906      	ldr	r1, [pc, #24]	; (80091e4 <__assert_func+0x34>)
 80091ca:	462b      	mov	r3, r5
 80091cc:	f000 f80e 	bl	80091ec <fiprintf>
 80091d0:	f000 fdea 	bl	8009da8 <abort>
 80091d4:	4b04      	ldr	r3, [pc, #16]	; (80091e8 <__assert_func+0x38>)
 80091d6:	461c      	mov	r4, r3
 80091d8:	e7f3      	b.n	80091c2 <__assert_func+0x12>
 80091da:	bf00      	nop
 80091dc:	20000034 	.word	0x20000034
 80091e0:	0801ec9a 	.word	0x0801ec9a
 80091e4:	0801eca7 	.word	0x0801eca7
 80091e8:	0801ecd5 	.word	0x0801ecd5

080091ec <fiprintf>:
 80091ec:	b40e      	push	{r1, r2, r3}
 80091ee:	b503      	push	{r0, r1, lr}
 80091f0:	4601      	mov	r1, r0
 80091f2:	ab03      	add	r3, sp, #12
 80091f4:	4805      	ldr	r0, [pc, #20]	; (800920c <fiprintf+0x20>)
 80091f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fa:	6800      	ldr	r0, [r0, #0]
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	f000 fa3f 	bl	8009680 <_vfiprintf_r>
 8009202:	b002      	add	sp, #8
 8009204:	f85d eb04 	ldr.w	lr, [sp], #4
 8009208:	b003      	add	sp, #12
 800920a:	4770      	bx	lr
 800920c:	20000034 	.word	0x20000034

08009210 <malloc>:
 8009210:	4b02      	ldr	r3, [pc, #8]	; (800921c <malloc+0xc>)
 8009212:	4601      	mov	r1, r0
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	f000 b853 	b.w	80092c0 <_malloc_r>
 800921a:	bf00      	nop
 800921c:	20000034 	.word	0x20000034

08009220 <_free_r>:
 8009220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009222:	2900      	cmp	r1, #0
 8009224:	d048      	beq.n	80092b8 <_free_r+0x98>
 8009226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800922a:	9001      	str	r0, [sp, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f1a1 0404 	sub.w	r4, r1, #4
 8009232:	bfb8      	it	lt
 8009234:	18e4      	addlt	r4, r4, r3
 8009236:	f001 f805 	bl	800a244 <__malloc_lock>
 800923a:	4a20      	ldr	r2, [pc, #128]	; (80092bc <_free_r+0x9c>)
 800923c:	9801      	ldr	r0, [sp, #4]
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	4615      	mov	r5, r2
 8009242:	b933      	cbnz	r3, 8009252 <_free_r+0x32>
 8009244:	6063      	str	r3, [r4, #4]
 8009246:	6014      	str	r4, [r2, #0]
 8009248:	b003      	add	sp, #12
 800924a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800924e:	f000 bfff 	b.w	800a250 <__malloc_unlock>
 8009252:	42a3      	cmp	r3, r4
 8009254:	d90b      	bls.n	800926e <_free_r+0x4e>
 8009256:	6821      	ldr	r1, [r4, #0]
 8009258:	1862      	adds	r2, r4, r1
 800925a:	4293      	cmp	r3, r2
 800925c:	bf04      	itt	eq
 800925e:	681a      	ldreq	r2, [r3, #0]
 8009260:	685b      	ldreq	r3, [r3, #4]
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	bf04      	itt	eq
 8009266:	1852      	addeq	r2, r2, r1
 8009268:	6022      	streq	r2, [r4, #0]
 800926a:	602c      	str	r4, [r5, #0]
 800926c:	e7ec      	b.n	8009248 <_free_r+0x28>
 800926e:	461a      	mov	r2, r3
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	b10b      	cbz	r3, 8009278 <_free_r+0x58>
 8009274:	42a3      	cmp	r3, r4
 8009276:	d9fa      	bls.n	800926e <_free_r+0x4e>
 8009278:	6811      	ldr	r1, [r2, #0]
 800927a:	1855      	adds	r5, r2, r1
 800927c:	42a5      	cmp	r5, r4
 800927e:	d10b      	bne.n	8009298 <_free_r+0x78>
 8009280:	6824      	ldr	r4, [r4, #0]
 8009282:	4421      	add	r1, r4
 8009284:	1854      	adds	r4, r2, r1
 8009286:	42a3      	cmp	r3, r4
 8009288:	6011      	str	r1, [r2, #0]
 800928a:	d1dd      	bne.n	8009248 <_free_r+0x28>
 800928c:	681c      	ldr	r4, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	6053      	str	r3, [r2, #4]
 8009292:	4421      	add	r1, r4
 8009294:	6011      	str	r1, [r2, #0]
 8009296:	e7d7      	b.n	8009248 <_free_r+0x28>
 8009298:	d902      	bls.n	80092a0 <_free_r+0x80>
 800929a:	230c      	movs	r3, #12
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	e7d3      	b.n	8009248 <_free_r+0x28>
 80092a0:	6825      	ldr	r5, [r4, #0]
 80092a2:	1961      	adds	r1, r4, r5
 80092a4:	428b      	cmp	r3, r1
 80092a6:	bf04      	itt	eq
 80092a8:	6819      	ldreq	r1, [r3, #0]
 80092aa:	685b      	ldreq	r3, [r3, #4]
 80092ac:	6063      	str	r3, [r4, #4]
 80092ae:	bf04      	itt	eq
 80092b0:	1949      	addeq	r1, r1, r5
 80092b2:	6021      	streq	r1, [r4, #0]
 80092b4:	6054      	str	r4, [r2, #4]
 80092b6:	e7c7      	b.n	8009248 <_free_r+0x28>
 80092b8:	b003      	add	sp, #12
 80092ba:	bd30      	pop	{r4, r5, pc}
 80092bc:	200000fc 	.word	0x200000fc

080092c0 <_malloc_r>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	1ccd      	adds	r5, r1, #3
 80092c4:	f025 0503 	bic.w	r5, r5, #3
 80092c8:	3508      	adds	r5, #8
 80092ca:	2d0c      	cmp	r5, #12
 80092cc:	bf38      	it	cc
 80092ce:	250c      	movcc	r5, #12
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	4606      	mov	r6, r0
 80092d4:	db01      	blt.n	80092da <_malloc_r+0x1a>
 80092d6:	42a9      	cmp	r1, r5
 80092d8:	d903      	bls.n	80092e2 <_malloc_r+0x22>
 80092da:	230c      	movs	r3, #12
 80092dc:	6033      	str	r3, [r6, #0]
 80092de:	2000      	movs	r0, #0
 80092e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e2:	f000 ffaf 	bl	800a244 <__malloc_lock>
 80092e6:	4921      	ldr	r1, [pc, #132]	; (800936c <_malloc_r+0xac>)
 80092e8:	680a      	ldr	r2, [r1, #0]
 80092ea:	4614      	mov	r4, r2
 80092ec:	b99c      	cbnz	r4, 8009316 <_malloc_r+0x56>
 80092ee:	4f20      	ldr	r7, [pc, #128]	; (8009370 <_malloc_r+0xb0>)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	b923      	cbnz	r3, 80092fe <_malloc_r+0x3e>
 80092f4:	4621      	mov	r1, r4
 80092f6:	4630      	mov	r0, r6
 80092f8:	f000 fc86 	bl	8009c08 <_sbrk_r>
 80092fc:	6038      	str	r0, [r7, #0]
 80092fe:	4629      	mov	r1, r5
 8009300:	4630      	mov	r0, r6
 8009302:	f000 fc81 	bl	8009c08 <_sbrk_r>
 8009306:	1c43      	adds	r3, r0, #1
 8009308:	d123      	bne.n	8009352 <_malloc_r+0x92>
 800930a:	230c      	movs	r3, #12
 800930c:	6033      	str	r3, [r6, #0]
 800930e:	4630      	mov	r0, r6
 8009310:	f000 ff9e 	bl	800a250 <__malloc_unlock>
 8009314:	e7e3      	b.n	80092de <_malloc_r+0x1e>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	1b5b      	subs	r3, r3, r5
 800931a:	d417      	bmi.n	800934c <_malloc_r+0x8c>
 800931c:	2b0b      	cmp	r3, #11
 800931e:	d903      	bls.n	8009328 <_malloc_r+0x68>
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	441c      	add	r4, r3
 8009324:	6025      	str	r5, [r4, #0]
 8009326:	e004      	b.n	8009332 <_malloc_r+0x72>
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	42a2      	cmp	r2, r4
 800932c:	bf0c      	ite	eq
 800932e:	600b      	streq	r3, [r1, #0]
 8009330:	6053      	strne	r3, [r2, #4]
 8009332:	4630      	mov	r0, r6
 8009334:	f000 ff8c 	bl	800a250 <__malloc_unlock>
 8009338:	f104 000b 	add.w	r0, r4, #11
 800933c:	1d23      	adds	r3, r4, #4
 800933e:	f020 0007 	bic.w	r0, r0, #7
 8009342:	1ac2      	subs	r2, r0, r3
 8009344:	d0cc      	beq.n	80092e0 <_malloc_r+0x20>
 8009346:	1a1b      	subs	r3, r3, r0
 8009348:	50a3      	str	r3, [r4, r2]
 800934a:	e7c9      	b.n	80092e0 <_malloc_r+0x20>
 800934c:	4622      	mov	r2, r4
 800934e:	6864      	ldr	r4, [r4, #4]
 8009350:	e7cc      	b.n	80092ec <_malloc_r+0x2c>
 8009352:	1cc4      	adds	r4, r0, #3
 8009354:	f024 0403 	bic.w	r4, r4, #3
 8009358:	42a0      	cmp	r0, r4
 800935a:	d0e3      	beq.n	8009324 <_malloc_r+0x64>
 800935c:	1a21      	subs	r1, r4, r0
 800935e:	4630      	mov	r0, r6
 8009360:	f000 fc52 	bl	8009c08 <_sbrk_r>
 8009364:	3001      	adds	r0, #1
 8009366:	d1dd      	bne.n	8009324 <_malloc_r+0x64>
 8009368:	e7cf      	b.n	800930a <_malloc_r+0x4a>
 800936a:	bf00      	nop
 800936c:	200000fc 	.word	0x200000fc
 8009370:	20000100 	.word	0x20000100

08009374 <__ssputs_r>:
 8009374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009378:	688e      	ldr	r6, [r1, #8]
 800937a:	429e      	cmp	r6, r3
 800937c:	4682      	mov	sl, r0
 800937e:	460c      	mov	r4, r1
 8009380:	4690      	mov	r8, r2
 8009382:	461f      	mov	r7, r3
 8009384:	d838      	bhi.n	80093f8 <__ssputs_r+0x84>
 8009386:	898a      	ldrh	r2, [r1, #12]
 8009388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800938c:	d032      	beq.n	80093f4 <__ssputs_r+0x80>
 800938e:	6825      	ldr	r5, [r4, #0]
 8009390:	6909      	ldr	r1, [r1, #16]
 8009392:	eba5 0901 	sub.w	r9, r5, r1
 8009396:	6965      	ldr	r5, [r4, #20]
 8009398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800939c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093a0:	3301      	adds	r3, #1
 80093a2:	444b      	add	r3, r9
 80093a4:	106d      	asrs	r5, r5, #1
 80093a6:	429d      	cmp	r5, r3
 80093a8:	bf38      	it	cc
 80093aa:	461d      	movcc	r5, r3
 80093ac:	0553      	lsls	r3, r2, #21
 80093ae:	d531      	bpl.n	8009414 <__ssputs_r+0xa0>
 80093b0:	4629      	mov	r1, r5
 80093b2:	f7ff ff85 	bl	80092c0 <_malloc_r>
 80093b6:	4606      	mov	r6, r0
 80093b8:	b950      	cbnz	r0, 80093d0 <__ssputs_r+0x5c>
 80093ba:	230c      	movs	r3, #12
 80093bc:	f8ca 3000 	str.w	r3, [sl]
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c6:	81a3      	strh	r3, [r4, #12]
 80093c8:	f04f 30ff 	mov.w	r0, #4294967295
 80093cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d0:	6921      	ldr	r1, [r4, #16]
 80093d2:	464a      	mov	r2, r9
 80093d4:	f000 ff0e 	bl	800a1f4 <memcpy>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e2:	81a3      	strh	r3, [r4, #12]
 80093e4:	6126      	str	r6, [r4, #16]
 80093e6:	6165      	str	r5, [r4, #20]
 80093e8:	444e      	add	r6, r9
 80093ea:	eba5 0509 	sub.w	r5, r5, r9
 80093ee:	6026      	str	r6, [r4, #0]
 80093f0:	60a5      	str	r5, [r4, #8]
 80093f2:	463e      	mov	r6, r7
 80093f4:	42be      	cmp	r6, r7
 80093f6:	d900      	bls.n	80093fa <__ssputs_r+0x86>
 80093f8:	463e      	mov	r6, r7
 80093fa:	4632      	mov	r2, r6
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	4641      	mov	r1, r8
 8009400:	f000 ff06 	bl	800a210 <memmove>
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	1b9b      	subs	r3, r3, r6
 800940a:	4432      	add	r2, r6
 800940c:	60a3      	str	r3, [r4, #8]
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	2000      	movs	r0, #0
 8009412:	e7db      	b.n	80093cc <__ssputs_r+0x58>
 8009414:	462a      	mov	r2, r5
 8009416:	f000 ff21 	bl	800a25c <_realloc_r>
 800941a:	4606      	mov	r6, r0
 800941c:	2800      	cmp	r0, #0
 800941e:	d1e1      	bne.n	80093e4 <__ssputs_r+0x70>
 8009420:	6921      	ldr	r1, [r4, #16]
 8009422:	4650      	mov	r0, sl
 8009424:	f7ff fefc 	bl	8009220 <_free_r>
 8009428:	e7c7      	b.n	80093ba <__ssputs_r+0x46>
	...

0800942c <_svfiprintf_r>:
 800942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	4698      	mov	r8, r3
 8009432:	898b      	ldrh	r3, [r1, #12]
 8009434:	061b      	lsls	r3, r3, #24
 8009436:	b09d      	sub	sp, #116	; 0x74
 8009438:	4607      	mov	r7, r0
 800943a:	460d      	mov	r5, r1
 800943c:	4614      	mov	r4, r2
 800943e:	d50e      	bpl.n	800945e <_svfiprintf_r+0x32>
 8009440:	690b      	ldr	r3, [r1, #16]
 8009442:	b963      	cbnz	r3, 800945e <_svfiprintf_r+0x32>
 8009444:	2140      	movs	r1, #64	; 0x40
 8009446:	f7ff ff3b 	bl	80092c0 <_malloc_r>
 800944a:	6028      	str	r0, [r5, #0]
 800944c:	6128      	str	r0, [r5, #16]
 800944e:	b920      	cbnz	r0, 800945a <_svfiprintf_r+0x2e>
 8009450:	230c      	movs	r3, #12
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	e0d1      	b.n	80095fe <_svfiprintf_r+0x1d2>
 800945a:	2340      	movs	r3, #64	; 0x40
 800945c:	616b      	str	r3, [r5, #20]
 800945e:	2300      	movs	r3, #0
 8009460:	9309      	str	r3, [sp, #36]	; 0x24
 8009462:	2320      	movs	r3, #32
 8009464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009468:	f8cd 800c 	str.w	r8, [sp, #12]
 800946c:	2330      	movs	r3, #48	; 0x30
 800946e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009618 <_svfiprintf_r+0x1ec>
 8009472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009476:	f04f 0901 	mov.w	r9, #1
 800947a:	4623      	mov	r3, r4
 800947c:	469a      	mov	sl, r3
 800947e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009482:	b10a      	cbz	r2, 8009488 <_svfiprintf_r+0x5c>
 8009484:	2a25      	cmp	r2, #37	; 0x25
 8009486:	d1f9      	bne.n	800947c <_svfiprintf_r+0x50>
 8009488:	ebba 0b04 	subs.w	fp, sl, r4
 800948c:	d00b      	beq.n	80094a6 <_svfiprintf_r+0x7a>
 800948e:	465b      	mov	r3, fp
 8009490:	4622      	mov	r2, r4
 8009492:	4629      	mov	r1, r5
 8009494:	4638      	mov	r0, r7
 8009496:	f7ff ff6d 	bl	8009374 <__ssputs_r>
 800949a:	3001      	adds	r0, #1
 800949c:	f000 80aa 	beq.w	80095f4 <_svfiprintf_r+0x1c8>
 80094a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a2:	445a      	add	r2, fp
 80094a4:	9209      	str	r2, [sp, #36]	; 0x24
 80094a6:	f89a 3000 	ldrb.w	r3, [sl]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 80a2 	beq.w	80095f4 <_svfiprintf_r+0x1c8>
 80094b0:	2300      	movs	r3, #0
 80094b2:	f04f 32ff 	mov.w	r2, #4294967295
 80094b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ba:	f10a 0a01 	add.w	sl, sl, #1
 80094be:	9304      	str	r3, [sp, #16]
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c6:	931a      	str	r3, [sp, #104]	; 0x68
 80094c8:	4654      	mov	r4, sl
 80094ca:	2205      	movs	r2, #5
 80094cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d0:	4851      	ldr	r0, [pc, #324]	; (8009618 <_svfiprintf_r+0x1ec>)
 80094d2:	f7f6 fee5 	bl	80002a0 <memchr>
 80094d6:	9a04      	ldr	r2, [sp, #16]
 80094d8:	b9d8      	cbnz	r0, 8009512 <_svfiprintf_r+0xe6>
 80094da:	06d0      	lsls	r0, r2, #27
 80094dc:	bf44      	itt	mi
 80094de:	2320      	movmi	r3, #32
 80094e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e4:	0711      	lsls	r1, r2, #28
 80094e6:	bf44      	itt	mi
 80094e8:	232b      	movmi	r3, #43	; 0x2b
 80094ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ee:	f89a 3000 	ldrb.w	r3, [sl]
 80094f2:	2b2a      	cmp	r3, #42	; 0x2a
 80094f4:	d015      	beq.n	8009522 <_svfiprintf_r+0xf6>
 80094f6:	9a07      	ldr	r2, [sp, #28]
 80094f8:	4654      	mov	r4, sl
 80094fa:	2000      	movs	r0, #0
 80094fc:	f04f 0c0a 	mov.w	ip, #10
 8009500:	4621      	mov	r1, r4
 8009502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009506:	3b30      	subs	r3, #48	; 0x30
 8009508:	2b09      	cmp	r3, #9
 800950a:	d94e      	bls.n	80095aa <_svfiprintf_r+0x17e>
 800950c:	b1b0      	cbz	r0, 800953c <_svfiprintf_r+0x110>
 800950e:	9207      	str	r2, [sp, #28]
 8009510:	e014      	b.n	800953c <_svfiprintf_r+0x110>
 8009512:	eba0 0308 	sub.w	r3, r0, r8
 8009516:	fa09 f303 	lsl.w	r3, r9, r3
 800951a:	4313      	orrs	r3, r2
 800951c:	9304      	str	r3, [sp, #16]
 800951e:	46a2      	mov	sl, r4
 8009520:	e7d2      	b.n	80094c8 <_svfiprintf_r+0x9c>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	1d19      	adds	r1, r3, #4
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	9103      	str	r1, [sp, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	bfbb      	ittet	lt
 800952e:	425b      	neglt	r3, r3
 8009530:	f042 0202 	orrlt.w	r2, r2, #2
 8009534:	9307      	strge	r3, [sp, #28]
 8009536:	9307      	strlt	r3, [sp, #28]
 8009538:	bfb8      	it	lt
 800953a:	9204      	strlt	r2, [sp, #16]
 800953c:	7823      	ldrb	r3, [r4, #0]
 800953e:	2b2e      	cmp	r3, #46	; 0x2e
 8009540:	d10c      	bne.n	800955c <_svfiprintf_r+0x130>
 8009542:	7863      	ldrb	r3, [r4, #1]
 8009544:	2b2a      	cmp	r3, #42	; 0x2a
 8009546:	d135      	bne.n	80095b4 <_svfiprintf_r+0x188>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9203      	str	r2, [sp, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfb8      	it	lt
 8009554:	f04f 33ff 	movlt.w	r3, #4294967295
 8009558:	3402      	adds	r4, #2
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009628 <_svfiprintf_r+0x1fc>
 8009560:	7821      	ldrb	r1, [r4, #0]
 8009562:	2203      	movs	r2, #3
 8009564:	4650      	mov	r0, sl
 8009566:	f7f6 fe9b 	bl	80002a0 <memchr>
 800956a:	b140      	cbz	r0, 800957e <_svfiprintf_r+0x152>
 800956c:	2340      	movs	r3, #64	; 0x40
 800956e:	eba0 000a 	sub.w	r0, r0, sl
 8009572:	fa03 f000 	lsl.w	r0, r3, r0
 8009576:	9b04      	ldr	r3, [sp, #16]
 8009578:	4303      	orrs	r3, r0
 800957a:	3401      	adds	r4, #1
 800957c:	9304      	str	r3, [sp, #16]
 800957e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009582:	4826      	ldr	r0, [pc, #152]	; (800961c <_svfiprintf_r+0x1f0>)
 8009584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009588:	2206      	movs	r2, #6
 800958a:	f7f6 fe89 	bl	80002a0 <memchr>
 800958e:	2800      	cmp	r0, #0
 8009590:	d038      	beq.n	8009604 <_svfiprintf_r+0x1d8>
 8009592:	4b23      	ldr	r3, [pc, #140]	; (8009620 <_svfiprintf_r+0x1f4>)
 8009594:	bb1b      	cbnz	r3, 80095de <_svfiprintf_r+0x1b2>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	3307      	adds	r3, #7
 800959a:	f023 0307 	bic.w	r3, r3, #7
 800959e:	3308      	adds	r3, #8
 80095a0:	9303      	str	r3, [sp, #12]
 80095a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a4:	4433      	add	r3, r6
 80095a6:	9309      	str	r3, [sp, #36]	; 0x24
 80095a8:	e767      	b.n	800947a <_svfiprintf_r+0x4e>
 80095aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ae:	460c      	mov	r4, r1
 80095b0:	2001      	movs	r0, #1
 80095b2:	e7a5      	b.n	8009500 <_svfiprintf_r+0xd4>
 80095b4:	2300      	movs	r3, #0
 80095b6:	3401      	adds	r4, #1
 80095b8:	9305      	str	r3, [sp, #20]
 80095ba:	4619      	mov	r1, r3
 80095bc:	f04f 0c0a 	mov.w	ip, #10
 80095c0:	4620      	mov	r0, r4
 80095c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c6:	3a30      	subs	r2, #48	; 0x30
 80095c8:	2a09      	cmp	r2, #9
 80095ca:	d903      	bls.n	80095d4 <_svfiprintf_r+0x1a8>
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0c5      	beq.n	800955c <_svfiprintf_r+0x130>
 80095d0:	9105      	str	r1, [sp, #20]
 80095d2:	e7c3      	b.n	800955c <_svfiprintf_r+0x130>
 80095d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d8:	4604      	mov	r4, r0
 80095da:	2301      	movs	r3, #1
 80095dc:	e7f0      	b.n	80095c0 <_svfiprintf_r+0x194>
 80095de:	ab03      	add	r3, sp, #12
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	462a      	mov	r2, r5
 80095e4:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <_svfiprintf_r+0x1f8>)
 80095e6:	a904      	add	r1, sp, #16
 80095e8:	4638      	mov	r0, r7
 80095ea:	f3af 8000 	nop.w
 80095ee:	1c42      	adds	r2, r0, #1
 80095f0:	4606      	mov	r6, r0
 80095f2:	d1d6      	bne.n	80095a2 <_svfiprintf_r+0x176>
 80095f4:	89ab      	ldrh	r3, [r5, #12]
 80095f6:	065b      	lsls	r3, r3, #25
 80095f8:	f53f af2c 	bmi.w	8009454 <_svfiprintf_r+0x28>
 80095fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095fe:	b01d      	add	sp, #116	; 0x74
 8009600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009604:	ab03      	add	r3, sp, #12
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	462a      	mov	r2, r5
 800960a:	4b06      	ldr	r3, [pc, #24]	; (8009624 <_svfiprintf_r+0x1f8>)
 800960c:	a904      	add	r1, sp, #16
 800960e:	4638      	mov	r0, r7
 8009610:	f000 f9d4 	bl	80099bc <_printf_i>
 8009614:	e7eb      	b.n	80095ee <_svfiprintf_r+0x1c2>
 8009616:	bf00      	nop
 8009618:	0801ecd6 	.word	0x0801ecd6
 800961c:	0801ece0 	.word	0x0801ece0
 8009620:	00000000 	.word	0x00000000
 8009624:	08009375 	.word	0x08009375
 8009628:	0801ecdc 	.word	0x0801ecdc

0800962c <__sfputc_r>:
 800962c:	6893      	ldr	r3, [r2, #8]
 800962e:	3b01      	subs	r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	b410      	push	{r4}
 8009634:	6093      	str	r3, [r2, #8]
 8009636:	da08      	bge.n	800964a <__sfputc_r+0x1e>
 8009638:	6994      	ldr	r4, [r2, #24]
 800963a:	42a3      	cmp	r3, r4
 800963c:	db01      	blt.n	8009642 <__sfputc_r+0x16>
 800963e:	290a      	cmp	r1, #10
 8009640:	d103      	bne.n	800964a <__sfputc_r+0x1e>
 8009642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009646:	f000 baef 	b.w	8009c28 <__swbuf_r>
 800964a:	6813      	ldr	r3, [r2, #0]
 800964c:	1c58      	adds	r0, r3, #1
 800964e:	6010      	str	r0, [r2, #0]
 8009650:	7019      	strb	r1, [r3, #0]
 8009652:	4608      	mov	r0, r1
 8009654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009658:	4770      	bx	lr

0800965a <__sfputs_r>:
 800965a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965c:	4606      	mov	r6, r0
 800965e:	460f      	mov	r7, r1
 8009660:	4614      	mov	r4, r2
 8009662:	18d5      	adds	r5, r2, r3
 8009664:	42ac      	cmp	r4, r5
 8009666:	d101      	bne.n	800966c <__sfputs_r+0x12>
 8009668:	2000      	movs	r0, #0
 800966a:	e007      	b.n	800967c <__sfputs_r+0x22>
 800966c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009670:	463a      	mov	r2, r7
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ffda 	bl	800962c <__sfputc_r>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d1f3      	bne.n	8009664 <__sfputs_r+0xa>
 800967c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009680 <_vfiprintf_r>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	460d      	mov	r5, r1
 8009686:	b09d      	sub	sp, #116	; 0x74
 8009688:	4614      	mov	r4, r2
 800968a:	4698      	mov	r8, r3
 800968c:	4606      	mov	r6, r0
 800968e:	b118      	cbz	r0, 8009698 <_vfiprintf_r+0x18>
 8009690:	6983      	ldr	r3, [r0, #24]
 8009692:	b90b      	cbnz	r3, 8009698 <_vfiprintf_r+0x18>
 8009694:	f000 fcaa 	bl	8009fec <__sinit>
 8009698:	4b89      	ldr	r3, [pc, #548]	; (80098c0 <_vfiprintf_r+0x240>)
 800969a:	429d      	cmp	r5, r3
 800969c:	d11b      	bne.n	80096d6 <_vfiprintf_r+0x56>
 800969e:	6875      	ldr	r5, [r6, #4]
 80096a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096a2:	07d9      	lsls	r1, r3, #31
 80096a4:	d405      	bmi.n	80096b2 <_vfiprintf_r+0x32>
 80096a6:	89ab      	ldrh	r3, [r5, #12]
 80096a8:	059a      	lsls	r2, r3, #22
 80096aa:	d402      	bmi.n	80096b2 <_vfiprintf_r+0x32>
 80096ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ae:	f000 fd3b 	bl	800a128 <__retarget_lock_acquire_recursive>
 80096b2:	89ab      	ldrh	r3, [r5, #12]
 80096b4:	071b      	lsls	r3, r3, #28
 80096b6:	d501      	bpl.n	80096bc <_vfiprintf_r+0x3c>
 80096b8:	692b      	ldr	r3, [r5, #16]
 80096ba:	b9eb      	cbnz	r3, 80096f8 <_vfiprintf_r+0x78>
 80096bc:	4629      	mov	r1, r5
 80096be:	4630      	mov	r0, r6
 80096c0:	f000 fb04 	bl	8009ccc <__swsetup_r>
 80096c4:	b1c0      	cbz	r0, 80096f8 <_vfiprintf_r+0x78>
 80096c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096c8:	07dc      	lsls	r4, r3, #31
 80096ca:	d50e      	bpl.n	80096ea <_vfiprintf_r+0x6a>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	b01d      	add	sp, #116	; 0x74
 80096d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d6:	4b7b      	ldr	r3, [pc, #492]	; (80098c4 <_vfiprintf_r+0x244>)
 80096d8:	429d      	cmp	r5, r3
 80096da:	d101      	bne.n	80096e0 <_vfiprintf_r+0x60>
 80096dc:	68b5      	ldr	r5, [r6, #8]
 80096de:	e7df      	b.n	80096a0 <_vfiprintf_r+0x20>
 80096e0:	4b79      	ldr	r3, [pc, #484]	; (80098c8 <_vfiprintf_r+0x248>)
 80096e2:	429d      	cmp	r5, r3
 80096e4:	bf08      	it	eq
 80096e6:	68f5      	ldreq	r5, [r6, #12]
 80096e8:	e7da      	b.n	80096a0 <_vfiprintf_r+0x20>
 80096ea:	89ab      	ldrh	r3, [r5, #12]
 80096ec:	0598      	lsls	r0, r3, #22
 80096ee:	d4ed      	bmi.n	80096cc <_vfiprintf_r+0x4c>
 80096f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096f2:	f000 fd1a 	bl	800a12a <__retarget_lock_release_recursive>
 80096f6:	e7e9      	b.n	80096cc <_vfiprintf_r+0x4c>
 80096f8:	2300      	movs	r3, #0
 80096fa:	9309      	str	r3, [sp, #36]	; 0x24
 80096fc:	2320      	movs	r3, #32
 80096fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009702:	f8cd 800c 	str.w	r8, [sp, #12]
 8009706:	2330      	movs	r3, #48	; 0x30
 8009708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098cc <_vfiprintf_r+0x24c>
 800970c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009710:	f04f 0901 	mov.w	r9, #1
 8009714:	4623      	mov	r3, r4
 8009716:	469a      	mov	sl, r3
 8009718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800971c:	b10a      	cbz	r2, 8009722 <_vfiprintf_r+0xa2>
 800971e:	2a25      	cmp	r2, #37	; 0x25
 8009720:	d1f9      	bne.n	8009716 <_vfiprintf_r+0x96>
 8009722:	ebba 0b04 	subs.w	fp, sl, r4
 8009726:	d00b      	beq.n	8009740 <_vfiprintf_r+0xc0>
 8009728:	465b      	mov	r3, fp
 800972a:	4622      	mov	r2, r4
 800972c:	4629      	mov	r1, r5
 800972e:	4630      	mov	r0, r6
 8009730:	f7ff ff93 	bl	800965a <__sfputs_r>
 8009734:	3001      	adds	r0, #1
 8009736:	f000 80aa 	beq.w	800988e <_vfiprintf_r+0x20e>
 800973a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800973c:	445a      	add	r2, fp
 800973e:	9209      	str	r2, [sp, #36]	; 0x24
 8009740:	f89a 3000 	ldrb.w	r3, [sl]
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 80a2 	beq.w	800988e <_vfiprintf_r+0x20e>
 800974a:	2300      	movs	r3, #0
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009754:	f10a 0a01 	add.w	sl, sl, #1
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	9307      	str	r3, [sp, #28]
 800975c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009760:	931a      	str	r3, [sp, #104]	; 0x68
 8009762:	4654      	mov	r4, sl
 8009764:	2205      	movs	r2, #5
 8009766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976a:	4858      	ldr	r0, [pc, #352]	; (80098cc <_vfiprintf_r+0x24c>)
 800976c:	f7f6 fd98 	bl	80002a0 <memchr>
 8009770:	9a04      	ldr	r2, [sp, #16]
 8009772:	b9d8      	cbnz	r0, 80097ac <_vfiprintf_r+0x12c>
 8009774:	06d1      	lsls	r1, r2, #27
 8009776:	bf44      	itt	mi
 8009778:	2320      	movmi	r3, #32
 800977a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800977e:	0713      	lsls	r3, r2, #28
 8009780:	bf44      	itt	mi
 8009782:	232b      	movmi	r3, #43	; 0x2b
 8009784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009788:	f89a 3000 	ldrb.w	r3, [sl]
 800978c:	2b2a      	cmp	r3, #42	; 0x2a
 800978e:	d015      	beq.n	80097bc <_vfiprintf_r+0x13c>
 8009790:	9a07      	ldr	r2, [sp, #28]
 8009792:	4654      	mov	r4, sl
 8009794:	2000      	movs	r0, #0
 8009796:	f04f 0c0a 	mov.w	ip, #10
 800979a:	4621      	mov	r1, r4
 800979c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a0:	3b30      	subs	r3, #48	; 0x30
 80097a2:	2b09      	cmp	r3, #9
 80097a4:	d94e      	bls.n	8009844 <_vfiprintf_r+0x1c4>
 80097a6:	b1b0      	cbz	r0, 80097d6 <_vfiprintf_r+0x156>
 80097a8:	9207      	str	r2, [sp, #28]
 80097aa:	e014      	b.n	80097d6 <_vfiprintf_r+0x156>
 80097ac:	eba0 0308 	sub.w	r3, r0, r8
 80097b0:	fa09 f303 	lsl.w	r3, r9, r3
 80097b4:	4313      	orrs	r3, r2
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	46a2      	mov	sl, r4
 80097ba:	e7d2      	b.n	8009762 <_vfiprintf_r+0xe2>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	1d19      	adds	r1, r3, #4
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	9103      	str	r1, [sp, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	bfbb      	ittet	lt
 80097c8:	425b      	neglt	r3, r3
 80097ca:	f042 0202 	orrlt.w	r2, r2, #2
 80097ce:	9307      	strge	r3, [sp, #28]
 80097d0:	9307      	strlt	r3, [sp, #28]
 80097d2:	bfb8      	it	lt
 80097d4:	9204      	strlt	r2, [sp, #16]
 80097d6:	7823      	ldrb	r3, [r4, #0]
 80097d8:	2b2e      	cmp	r3, #46	; 0x2e
 80097da:	d10c      	bne.n	80097f6 <_vfiprintf_r+0x176>
 80097dc:	7863      	ldrb	r3, [r4, #1]
 80097de:	2b2a      	cmp	r3, #42	; 0x2a
 80097e0:	d135      	bne.n	800984e <_vfiprintf_r+0x1ce>
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	1d1a      	adds	r2, r3, #4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	9203      	str	r2, [sp, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bfb8      	it	lt
 80097ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f2:	3402      	adds	r4, #2
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098dc <_vfiprintf_r+0x25c>
 80097fa:	7821      	ldrb	r1, [r4, #0]
 80097fc:	2203      	movs	r2, #3
 80097fe:	4650      	mov	r0, sl
 8009800:	f7f6 fd4e 	bl	80002a0 <memchr>
 8009804:	b140      	cbz	r0, 8009818 <_vfiprintf_r+0x198>
 8009806:	2340      	movs	r3, #64	; 0x40
 8009808:	eba0 000a 	sub.w	r0, r0, sl
 800980c:	fa03 f000 	lsl.w	r0, r3, r0
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	4303      	orrs	r3, r0
 8009814:	3401      	adds	r4, #1
 8009816:	9304      	str	r3, [sp, #16]
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	482c      	ldr	r0, [pc, #176]	; (80098d0 <_vfiprintf_r+0x250>)
 800981e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009822:	2206      	movs	r2, #6
 8009824:	f7f6 fd3c 	bl	80002a0 <memchr>
 8009828:	2800      	cmp	r0, #0
 800982a:	d03f      	beq.n	80098ac <_vfiprintf_r+0x22c>
 800982c:	4b29      	ldr	r3, [pc, #164]	; (80098d4 <_vfiprintf_r+0x254>)
 800982e:	bb1b      	cbnz	r3, 8009878 <_vfiprintf_r+0x1f8>
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	3307      	adds	r3, #7
 8009834:	f023 0307 	bic.w	r3, r3, #7
 8009838:	3308      	adds	r3, #8
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983e:	443b      	add	r3, r7
 8009840:	9309      	str	r3, [sp, #36]	; 0x24
 8009842:	e767      	b.n	8009714 <_vfiprintf_r+0x94>
 8009844:	fb0c 3202 	mla	r2, ip, r2, r3
 8009848:	460c      	mov	r4, r1
 800984a:	2001      	movs	r0, #1
 800984c:	e7a5      	b.n	800979a <_vfiprintf_r+0x11a>
 800984e:	2300      	movs	r3, #0
 8009850:	3401      	adds	r4, #1
 8009852:	9305      	str	r3, [sp, #20]
 8009854:	4619      	mov	r1, r3
 8009856:	f04f 0c0a 	mov.w	ip, #10
 800985a:	4620      	mov	r0, r4
 800985c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009860:	3a30      	subs	r2, #48	; 0x30
 8009862:	2a09      	cmp	r2, #9
 8009864:	d903      	bls.n	800986e <_vfiprintf_r+0x1ee>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0c5      	beq.n	80097f6 <_vfiprintf_r+0x176>
 800986a:	9105      	str	r1, [sp, #20]
 800986c:	e7c3      	b.n	80097f6 <_vfiprintf_r+0x176>
 800986e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009872:	4604      	mov	r4, r0
 8009874:	2301      	movs	r3, #1
 8009876:	e7f0      	b.n	800985a <_vfiprintf_r+0x1da>
 8009878:	ab03      	add	r3, sp, #12
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	462a      	mov	r2, r5
 800987e:	4b16      	ldr	r3, [pc, #88]	; (80098d8 <_vfiprintf_r+0x258>)
 8009880:	a904      	add	r1, sp, #16
 8009882:	4630      	mov	r0, r6
 8009884:	f3af 8000 	nop.w
 8009888:	4607      	mov	r7, r0
 800988a:	1c78      	adds	r0, r7, #1
 800988c:	d1d6      	bne.n	800983c <_vfiprintf_r+0x1bc>
 800988e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009890:	07d9      	lsls	r1, r3, #31
 8009892:	d405      	bmi.n	80098a0 <_vfiprintf_r+0x220>
 8009894:	89ab      	ldrh	r3, [r5, #12]
 8009896:	059a      	lsls	r2, r3, #22
 8009898:	d402      	bmi.n	80098a0 <_vfiprintf_r+0x220>
 800989a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800989c:	f000 fc45 	bl	800a12a <__retarget_lock_release_recursive>
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	065b      	lsls	r3, r3, #25
 80098a4:	f53f af12 	bmi.w	80096cc <_vfiprintf_r+0x4c>
 80098a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098aa:	e711      	b.n	80096d0 <_vfiprintf_r+0x50>
 80098ac:	ab03      	add	r3, sp, #12
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <_vfiprintf_r+0x258>)
 80098b4:	a904      	add	r1, sp, #16
 80098b6:	4630      	mov	r0, r6
 80098b8:	f000 f880 	bl	80099bc <_printf_i>
 80098bc:	e7e4      	b.n	8009888 <_vfiprintf_r+0x208>
 80098be:	bf00      	nop
 80098c0:	0801ed2c 	.word	0x0801ed2c
 80098c4:	0801ed4c 	.word	0x0801ed4c
 80098c8:	0801ed0c 	.word	0x0801ed0c
 80098cc:	0801ecd6 	.word	0x0801ecd6
 80098d0:	0801ece0 	.word	0x0801ece0
 80098d4:	00000000 	.word	0x00000000
 80098d8:	0800965b 	.word	0x0800965b
 80098dc:	0801ecdc 	.word	0x0801ecdc

080098e0 <_printf_common>:
 80098e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	4616      	mov	r6, r2
 80098e6:	4699      	mov	r9, r3
 80098e8:	688a      	ldr	r2, [r1, #8]
 80098ea:	690b      	ldr	r3, [r1, #16]
 80098ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bfb8      	it	lt
 80098f4:	4613      	movlt	r3, r2
 80098f6:	6033      	str	r3, [r6, #0]
 80098f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098fc:	4607      	mov	r7, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	b10a      	cbz	r2, 8009906 <_printf_common+0x26>
 8009902:	3301      	adds	r3, #1
 8009904:	6033      	str	r3, [r6, #0]
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	0699      	lsls	r1, r3, #26
 800990a:	bf42      	ittt	mi
 800990c:	6833      	ldrmi	r3, [r6, #0]
 800990e:	3302      	addmi	r3, #2
 8009910:	6033      	strmi	r3, [r6, #0]
 8009912:	6825      	ldr	r5, [r4, #0]
 8009914:	f015 0506 	ands.w	r5, r5, #6
 8009918:	d106      	bne.n	8009928 <_printf_common+0x48>
 800991a:	f104 0a19 	add.w	sl, r4, #25
 800991e:	68e3      	ldr	r3, [r4, #12]
 8009920:	6832      	ldr	r2, [r6, #0]
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	42ab      	cmp	r3, r5
 8009926:	dc26      	bgt.n	8009976 <_printf_common+0x96>
 8009928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800992c:	1e13      	subs	r3, r2, #0
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	bf18      	it	ne
 8009932:	2301      	movne	r3, #1
 8009934:	0692      	lsls	r2, r2, #26
 8009936:	d42b      	bmi.n	8009990 <_printf_common+0xb0>
 8009938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800993c:	4649      	mov	r1, r9
 800993e:	4638      	mov	r0, r7
 8009940:	47c0      	blx	r8
 8009942:	3001      	adds	r0, #1
 8009944:	d01e      	beq.n	8009984 <_printf_common+0xa4>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	68e5      	ldr	r5, [r4, #12]
 800994a:	6832      	ldr	r2, [r6, #0]
 800994c:	f003 0306 	and.w	r3, r3, #6
 8009950:	2b04      	cmp	r3, #4
 8009952:	bf08      	it	eq
 8009954:	1aad      	subeq	r5, r5, r2
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	6922      	ldr	r2, [r4, #16]
 800995a:	bf0c      	ite	eq
 800995c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009960:	2500      	movne	r5, #0
 8009962:	4293      	cmp	r3, r2
 8009964:	bfc4      	itt	gt
 8009966:	1a9b      	subgt	r3, r3, r2
 8009968:	18ed      	addgt	r5, r5, r3
 800996a:	2600      	movs	r6, #0
 800996c:	341a      	adds	r4, #26
 800996e:	42b5      	cmp	r5, r6
 8009970:	d11a      	bne.n	80099a8 <_printf_common+0xc8>
 8009972:	2000      	movs	r0, #0
 8009974:	e008      	b.n	8009988 <_printf_common+0xa8>
 8009976:	2301      	movs	r3, #1
 8009978:	4652      	mov	r2, sl
 800997a:	4649      	mov	r1, r9
 800997c:	4638      	mov	r0, r7
 800997e:	47c0      	blx	r8
 8009980:	3001      	adds	r0, #1
 8009982:	d103      	bne.n	800998c <_printf_common+0xac>
 8009984:	f04f 30ff 	mov.w	r0, #4294967295
 8009988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998c:	3501      	adds	r5, #1
 800998e:	e7c6      	b.n	800991e <_printf_common+0x3e>
 8009990:	18e1      	adds	r1, r4, r3
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	2030      	movs	r0, #48	; 0x30
 8009996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800999a:	4422      	add	r2, r4
 800999c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099a4:	3302      	adds	r3, #2
 80099a6:	e7c7      	b.n	8009938 <_printf_common+0x58>
 80099a8:	2301      	movs	r3, #1
 80099aa:	4622      	mov	r2, r4
 80099ac:	4649      	mov	r1, r9
 80099ae:	4638      	mov	r0, r7
 80099b0:	47c0      	blx	r8
 80099b2:	3001      	adds	r0, #1
 80099b4:	d0e6      	beq.n	8009984 <_printf_common+0xa4>
 80099b6:	3601      	adds	r6, #1
 80099b8:	e7d9      	b.n	800996e <_printf_common+0x8e>
	...

080099bc <_printf_i>:
 80099bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	460c      	mov	r4, r1
 80099c2:	4691      	mov	r9, r2
 80099c4:	7e27      	ldrb	r7, [r4, #24]
 80099c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099c8:	2f78      	cmp	r7, #120	; 0x78
 80099ca:	4680      	mov	r8, r0
 80099cc:	469a      	mov	sl, r3
 80099ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099d2:	d807      	bhi.n	80099e4 <_printf_i+0x28>
 80099d4:	2f62      	cmp	r7, #98	; 0x62
 80099d6:	d80a      	bhi.n	80099ee <_printf_i+0x32>
 80099d8:	2f00      	cmp	r7, #0
 80099da:	f000 80d8 	beq.w	8009b8e <_printf_i+0x1d2>
 80099de:	2f58      	cmp	r7, #88	; 0x58
 80099e0:	f000 80a3 	beq.w	8009b2a <_printf_i+0x16e>
 80099e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099ec:	e03a      	b.n	8009a64 <_printf_i+0xa8>
 80099ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099f2:	2b15      	cmp	r3, #21
 80099f4:	d8f6      	bhi.n	80099e4 <_printf_i+0x28>
 80099f6:	a001      	add	r0, pc, #4	; (adr r0, 80099fc <_printf_i+0x40>)
 80099f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80099fc:	08009a55 	.word	0x08009a55
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	080099e5 	.word	0x080099e5
 8009a08:	080099e5 	.word	0x080099e5
 8009a0c:	080099e5 	.word	0x080099e5
 8009a10:	080099e5 	.word	0x080099e5
 8009a14:	08009a69 	.word	0x08009a69
 8009a18:	080099e5 	.word	0x080099e5
 8009a1c:	080099e5 	.word	0x080099e5
 8009a20:	080099e5 	.word	0x080099e5
 8009a24:	080099e5 	.word	0x080099e5
 8009a28:	08009b75 	.word	0x08009b75
 8009a2c:	08009a99 	.word	0x08009a99
 8009a30:	08009b57 	.word	0x08009b57
 8009a34:	080099e5 	.word	0x080099e5
 8009a38:	080099e5 	.word	0x080099e5
 8009a3c:	08009b97 	.word	0x08009b97
 8009a40:	080099e5 	.word	0x080099e5
 8009a44:	08009a99 	.word	0x08009a99
 8009a48:	080099e5 	.word	0x080099e5
 8009a4c:	080099e5 	.word	0x080099e5
 8009a50:	08009b5f 	.word	0x08009b5f
 8009a54:	680b      	ldr	r3, [r1, #0]
 8009a56:	1d1a      	adds	r2, r3, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	600a      	str	r2, [r1, #0]
 8009a5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a64:	2301      	movs	r3, #1
 8009a66:	e0a3      	b.n	8009bb0 <_printf_i+0x1f4>
 8009a68:	6825      	ldr	r5, [r4, #0]
 8009a6a:	6808      	ldr	r0, [r1, #0]
 8009a6c:	062e      	lsls	r6, r5, #24
 8009a6e:	f100 0304 	add.w	r3, r0, #4
 8009a72:	d50a      	bpl.n	8009a8a <_printf_i+0xce>
 8009a74:	6805      	ldr	r5, [r0, #0]
 8009a76:	600b      	str	r3, [r1, #0]
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	da03      	bge.n	8009a84 <_printf_i+0xc8>
 8009a7c:	232d      	movs	r3, #45	; 0x2d
 8009a7e:	426d      	negs	r5, r5
 8009a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a84:	485e      	ldr	r0, [pc, #376]	; (8009c00 <_printf_i+0x244>)
 8009a86:	230a      	movs	r3, #10
 8009a88:	e019      	b.n	8009abe <_printf_i+0x102>
 8009a8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a8e:	6805      	ldr	r5, [r0, #0]
 8009a90:	600b      	str	r3, [r1, #0]
 8009a92:	bf18      	it	ne
 8009a94:	b22d      	sxthne	r5, r5
 8009a96:	e7ef      	b.n	8009a78 <_printf_i+0xbc>
 8009a98:	680b      	ldr	r3, [r1, #0]
 8009a9a:	6825      	ldr	r5, [r4, #0]
 8009a9c:	1d18      	adds	r0, r3, #4
 8009a9e:	6008      	str	r0, [r1, #0]
 8009aa0:	0628      	lsls	r0, r5, #24
 8009aa2:	d501      	bpl.n	8009aa8 <_printf_i+0xec>
 8009aa4:	681d      	ldr	r5, [r3, #0]
 8009aa6:	e002      	b.n	8009aae <_printf_i+0xf2>
 8009aa8:	0669      	lsls	r1, r5, #25
 8009aaa:	d5fb      	bpl.n	8009aa4 <_printf_i+0xe8>
 8009aac:	881d      	ldrh	r5, [r3, #0]
 8009aae:	4854      	ldr	r0, [pc, #336]	; (8009c00 <_printf_i+0x244>)
 8009ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ab2:	bf0c      	ite	eq
 8009ab4:	2308      	moveq	r3, #8
 8009ab6:	230a      	movne	r3, #10
 8009ab8:	2100      	movs	r1, #0
 8009aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009abe:	6866      	ldr	r6, [r4, #4]
 8009ac0:	60a6      	str	r6, [r4, #8]
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	bfa2      	ittt	ge
 8009ac6:	6821      	ldrge	r1, [r4, #0]
 8009ac8:	f021 0104 	bicge.w	r1, r1, #4
 8009acc:	6021      	strge	r1, [r4, #0]
 8009ace:	b90d      	cbnz	r5, 8009ad4 <_printf_i+0x118>
 8009ad0:	2e00      	cmp	r6, #0
 8009ad2:	d04d      	beq.n	8009b70 <_printf_i+0x1b4>
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ada:	fb03 5711 	mls	r7, r3, r1, r5
 8009ade:	5dc7      	ldrb	r7, [r0, r7]
 8009ae0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ae4:	462f      	mov	r7, r5
 8009ae6:	42bb      	cmp	r3, r7
 8009ae8:	460d      	mov	r5, r1
 8009aea:	d9f4      	bls.n	8009ad6 <_printf_i+0x11a>
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d10b      	bne.n	8009b08 <_printf_i+0x14c>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	07df      	lsls	r7, r3, #31
 8009af4:	d508      	bpl.n	8009b08 <_printf_i+0x14c>
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	6861      	ldr	r1, [r4, #4]
 8009afa:	4299      	cmp	r1, r3
 8009afc:	bfde      	ittt	le
 8009afe:	2330      	movle	r3, #48	; 0x30
 8009b00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b08:	1b92      	subs	r2, r2, r6
 8009b0a:	6122      	str	r2, [r4, #16]
 8009b0c:	f8cd a000 	str.w	sl, [sp]
 8009b10:	464b      	mov	r3, r9
 8009b12:	aa03      	add	r2, sp, #12
 8009b14:	4621      	mov	r1, r4
 8009b16:	4640      	mov	r0, r8
 8009b18:	f7ff fee2 	bl	80098e0 <_printf_common>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d14c      	bne.n	8009bba <_printf_i+0x1fe>
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	b004      	add	sp, #16
 8009b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b2a:	4835      	ldr	r0, [pc, #212]	; (8009c00 <_printf_i+0x244>)
 8009b2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	680e      	ldr	r6, [r1, #0]
 8009b34:	061f      	lsls	r7, r3, #24
 8009b36:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b3a:	600e      	str	r6, [r1, #0]
 8009b3c:	d514      	bpl.n	8009b68 <_printf_i+0x1ac>
 8009b3e:	07d9      	lsls	r1, r3, #31
 8009b40:	bf44      	itt	mi
 8009b42:	f043 0320 	orrmi.w	r3, r3, #32
 8009b46:	6023      	strmi	r3, [r4, #0]
 8009b48:	b91d      	cbnz	r5, 8009b52 <_printf_i+0x196>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	f023 0320 	bic.w	r3, r3, #32
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	2310      	movs	r3, #16
 8009b54:	e7b0      	b.n	8009ab8 <_printf_i+0xfc>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	f043 0320 	orr.w	r3, r3, #32
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	2378      	movs	r3, #120	; 0x78
 8009b60:	4828      	ldr	r0, [pc, #160]	; (8009c04 <_printf_i+0x248>)
 8009b62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b66:	e7e3      	b.n	8009b30 <_printf_i+0x174>
 8009b68:	065e      	lsls	r6, r3, #25
 8009b6a:	bf48      	it	mi
 8009b6c:	b2ad      	uxthmi	r5, r5
 8009b6e:	e7e6      	b.n	8009b3e <_printf_i+0x182>
 8009b70:	4616      	mov	r6, r2
 8009b72:	e7bb      	b.n	8009aec <_printf_i+0x130>
 8009b74:	680b      	ldr	r3, [r1, #0]
 8009b76:	6826      	ldr	r6, [r4, #0]
 8009b78:	6960      	ldr	r0, [r4, #20]
 8009b7a:	1d1d      	adds	r5, r3, #4
 8009b7c:	600d      	str	r5, [r1, #0]
 8009b7e:	0635      	lsls	r5, r6, #24
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	d501      	bpl.n	8009b88 <_printf_i+0x1cc>
 8009b84:	6018      	str	r0, [r3, #0]
 8009b86:	e002      	b.n	8009b8e <_printf_i+0x1d2>
 8009b88:	0671      	lsls	r1, r6, #25
 8009b8a:	d5fb      	bpl.n	8009b84 <_printf_i+0x1c8>
 8009b8c:	8018      	strh	r0, [r3, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	4616      	mov	r6, r2
 8009b94:	e7ba      	b.n	8009b0c <_printf_i+0x150>
 8009b96:	680b      	ldr	r3, [r1, #0]
 8009b98:	1d1a      	adds	r2, r3, #4
 8009b9a:	600a      	str	r2, [r1, #0]
 8009b9c:	681e      	ldr	r6, [r3, #0]
 8009b9e:	6862      	ldr	r2, [r4, #4]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7f6 fb7c 	bl	80002a0 <memchr>
 8009ba8:	b108      	cbz	r0, 8009bae <_printf_i+0x1f2>
 8009baa:	1b80      	subs	r0, r0, r6
 8009bac:	6060      	str	r0, [r4, #4]
 8009bae:	6863      	ldr	r3, [r4, #4]
 8009bb0:	6123      	str	r3, [r4, #16]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb8:	e7a8      	b.n	8009b0c <_printf_i+0x150>
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	47d0      	blx	sl
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d0ab      	beq.n	8009b20 <_printf_i+0x164>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	079b      	lsls	r3, r3, #30
 8009bcc:	d413      	bmi.n	8009bf6 <_printf_i+0x23a>
 8009bce:	68e0      	ldr	r0, [r4, #12]
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	4298      	cmp	r0, r3
 8009bd4:	bfb8      	it	lt
 8009bd6:	4618      	movlt	r0, r3
 8009bd8:	e7a4      	b.n	8009b24 <_printf_i+0x168>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4632      	mov	r2, r6
 8009bde:	4649      	mov	r1, r9
 8009be0:	4640      	mov	r0, r8
 8009be2:	47d0      	blx	sl
 8009be4:	3001      	adds	r0, #1
 8009be6:	d09b      	beq.n	8009b20 <_printf_i+0x164>
 8009be8:	3501      	adds	r5, #1
 8009bea:	68e3      	ldr	r3, [r4, #12]
 8009bec:	9903      	ldr	r1, [sp, #12]
 8009bee:	1a5b      	subs	r3, r3, r1
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dcf2      	bgt.n	8009bda <_printf_i+0x21e>
 8009bf4:	e7eb      	b.n	8009bce <_printf_i+0x212>
 8009bf6:	2500      	movs	r5, #0
 8009bf8:	f104 0619 	add.w	r6, r4, #25
 8009bfc:	e7f5      	b.n	8009bea <_printf_i+0x22e>
 8009bfe:	bf00      	nop
 8009c00:	0801ece7 	.word	0x0801ece7
 8009c04:	0801ecf8 	.word	0x0801ecf8

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d06      	ldr	r5, [pc, #24]	; (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	f7f9 fa7e 	bl	8003114 <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	200091b0 	.word	0x200091b0

08009c28 <__swbuf_r>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	460e      	mov	r6, r1
 8009c2c:	4614      	mov	r4, r2
 8009c2e:	4605      	mov	r5, r0
 8009c30:	b118      	cbz	r0, 8009c3a <__swbuf_r+0x12>
 8009c32:	6983      	ldr	r3, [r0, #24]
 8009c34:	b90b      	cbnz	r3, 8009c3a <__swbuf_r+0x12>
 8009c36:	f000 f9d9 	bl	8009fec <__sinit>
 8009c3a:	4b21      	ldr	r3, [pc, #132]	; (8009cc0 <__swbuf_r+0x98>)
 8009c3c:	429c      	cmp	r4, r3
 8009c3e:	d12b      	bne.n	8009c98 <__swbuf_r+0x70>
 8009c40:	686c      	ldr	r4, [r5, #4]
 8009c42:	69a3      	ldr	r3, [r4, #24]
 8009c44:	60a3      	str	r3, [r4, #8]
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	071a      	lsls	r2, r3, #28
 8009c4a:	d52f      	bpl.n	8009cac <__swbuf_r+0x84>
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	b36b      	cbz	r3, 8009cac <__swbuf_r+0x84>
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	6820      	ldr	r0, [r4, #0]
 8009c54:	1ac0      	subs	r0, r0, r3
 8009c56:	6963      	ldr	r3, [r4, #20]
 8009c58:	b2f6      	uxtb	r6, r6
 8009c5a:	4283      	cmp	r3, r0
 8009c5c:	4637      	mov	r7, r6
 8009c5e:	dc04      	bgt.n	8009c6a <__swbuf_r+0x42>
 8009c60:	4621      	mov	r1, r4
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 f92e 	bl	8009ec4 <_fflush_r>
 8009c68:	bb30      	cbnz	r0, 8009cb8 <__swbuf_r+0x90>
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	60a3      	str	r3, [r4, #8]
 8009c70:	6823      	ldr	r3, [r4, #0]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	6022      	str	r2, [r4, #0]
 8009c76:	701e      	strb	r6, [r3, #0]
 8009c78:	6963      	ldr	r3, [r4, #20]
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	4283      	cmp	r3, r0
 8009c7e:	d004      	beq.n	8009c8a <__swbuf_r+0x62>
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	07db      	lsls	r3, r3, #31
 8009c84:	d506      	bpl.n	8009c94 <__swbuf_r+0x6c>
 8009c86:	2e0a      	cmp	r6, #10
 8009c88:	d104      	bne.n	8009c94 <__swbuf_r+0x6c>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f000 f919 	bl	8009ec4 <_fflush_r>
 8009c92:	b988      	cbnz	r0, 8009cb8 <__swbuf_r+0x90>
 8009c94:	4638      	mov	r0, r7
 8009c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c98:	4b0a      	ldr	r3, [pc, #40]	; (8009cc4 <__swbuf_r+0x9c>)
 8009c9a:	429c      	cmp	r4, r3
 8009c9c:	d101      	bne.n	8009ca2 <__swbuf_r+0x7a>
 8009c9e:	68ac      	ldr	r4, [r5, #8]
 8009ca0:	e7cf      	b.n	8009c42 <__swbuf_r+0x1a>
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <__swbuf_r+0xa0>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	bf08      	it	eq
 8009ca8:	68ec      	ldreq	r4, [r5, #12]
 8009caa:	e7ca      	b.n	8009c42 <__swbuf_r+0x1a>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f80c 	bl	8009ccc <__swsetup_r>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d0cb      	beq.n	8009c50 <__swbuf_r+0x28>
 8009cb8:	f04f 37ff 	mov.w	r7, #4294967295
 8009cbc:	e7ea      	b.n	8009c94 <__swbuf_r+0x6c>
 8009cbe:	bf00      	nop
 8009cc0:	0801ed2c 	.word	0x0801ed2c
 8009cc4:	0801ed4c 	.word	0x0801ed4c
 8009cc8:	0801ed0c 	.word	0x0801ed0c

08009ccc <__swsetup_r>:
 8009ccc:	4b32      	ldr	r3, [pc, #200]	; (8009d98 <__swsetup_r+0xcc>)
 8009cce:	b570      	push	{r4, r5, r6, lr}
 8009cd0:	681d      	ldr	r5, [r3, #0]
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	b125      	cbz	r5, 8009ce2 <__swsetup_r+0x16>
 8009cd8:	69ab      	ldr	r3, [r5, #24]
 8009cda:	b913      	cbnz	r3, 8009ce2 <__swsetup_r+0x16>
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f000 f985 	bl	8009fec <__sinit>
 8009ce2:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <__swsetup_r+0xd0>)
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d10f      	bne.n	8009d08 <__swsetup_r+0x3c>
 8009ce8:	686c      	ldr	r4, [r5, #4]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cf0:	0719      	lsls	r1, r3, #28
 8009cf2:	d42c      	bmi.n	8009d4e <__swsetup_r+0x82>
 8009cf4:	06dd      	lsls	r5, r3, #27
 8009cf6:	d411      	bmi.n	8009d1c <__swsetup_r+0x50>
 8009cf8:	2309      	movs	r3, #9
 8009cfa:	6033      	str	r3, [r6, #0]
 8009cfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	e03e      	b.n	8009d86 <__swsetup_r+0xba>
 8009d08:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <__swsetup_r+0xd4>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	d101      	bne.n	8009d12 <__swsetup_r+0x46>
 8009d0e:	68ac      	ldr	r4, [r5, #8]
 8009d10:	e7eb      	b.n	8009cea <__swsetup_r+0x1e>
 8009d12:	4b24      	ldr	r3, [pc, #144]	; (8009da4 <__swsetup_r+0xd8>)
 8009d14:	429c      	cmp	r4, r3
 8009d16:	bf08      	it	eq
 8009d18:	68ec      	ldreq	r4, [r5, #12]
 8009d1a:	e7e6      	b.n	8009cea <__swsetup_r+0x1e>
 8009d1c:	0758      	lsls	r0, r3, #29
 8009d1e:	d512      	bpl.n	8009d46 <__swsetup_r+0x7a>
 8009d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d22:	b141      	cbz	r1, 8009d36 <__swsetup_r+0x6a>
 8009d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	d002      	beq.n	8009d32 <__swsetup_r+0x66>
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7ff fa77 	bl	8009220 <_free_r>
 8009d32:	2300      	movs	r3, #0
 8009d34:	6363      	str	r3, [r4, #52]	; 0x34
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f043 0308 	orr.w	r3, r3, #8
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	b94b      	cbnz	r3, 8009d66 <__swsetup_r+0x9a>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d5c:	d003      	beq.n	8009d66 <__swsetup_r+0x9a>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4630      	mov	r0, r6
 8009d62:	f000 fa07 	bl	800a174 <__smakebuf_r>
 8009d66:	89a0      	ldrh	r0, [r4, #12]
 8009d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d6c:	f010 0301 	ands.w	r3, r0, #1
 8009d70:	d00a      	beq.n	8009d88 <__swsetup_r+0xbc>
 8009d72:	2300      	movs	r3, #0
 8009d74:	60a3      	str	r3, [r4, #8]
 8009d76:	6963      	ldr	r3, [r4, #20]
 8009d78:	425b      	negs	r3, r3
 8009d7a:	61a3      	str	r3, [r4, #24]
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	b943      	cbnz	r3, 8009d92 <__swsetup_r+0xc6>
 8009d80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d84:	d1ba      	bne.n	8009cfc <__swsetup_r+0x30>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	0781      	lsls	r1, r0, #30
 8009d8a:	bf58      	it	pl
 8009d8c:	6963      	ldrpl	r3, [r4, #20]
 8009d8e:	60a3      	str	r3, [r4, #8]
 8009d90:	e7f4      	b.n	8009d7c <__swsetup_r+0xb0>
 8009d92:	2000      	movs	r0, #0
 8009d94:	e7f7      	b.n	8009d86 <__swsetup_r+0xba>
 8009d96:	bf00      	nop
 8009d98:	20000034 	.word	0x20000034
 8009d9c:	0801ed2c 	.word	0x0801ed2c
 8009da0:	0801ed4c 	.word	0x0801ed4c
 8009da4:	0801ed0c 	.word	0x0801ed0c

08009da8 <abort>:
 8009da8:	b508      	push	{r3, lr}
 8009daa:	2006      	movs	r0, #6
 8009dac:	f000 faa4 	bl	800a2f8 <raise>
 8009db0:	2001      	movs	r0, #1
 8009db2:	f7f9 f937 	bl	8003024 <_exit>
	...

08009db8 <__sflush_r>:
 8009db8:	898a      	ldrh	r2, [r1, #12]
 8009dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	0710      	lsls	r0, r2, #28
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	d458      	bmi.n	8009e78 <__sflush_r+0xc0>
 8009dc6:	684b      	ldr	r3, [r1, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dc05      	bgt.n	8009dd8 <__sflush_r+0x20>
 8009dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dc02      	bgt.n	8009dd8 <__sflush_r+0x20>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	d0f9      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009dde:	2300      	movs	r3, #0
 8009de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009de4:	682f      	ldr	r7, [r5, #0]
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	d032      	beq.n	8009e50 <__sflush_r+0x98>
 8009dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	075a      	lsls	r2, r3, #29
 8009df0:	d505      	bpl.n	8009dfe <__sflush_r+0x46>
 8009df2:	6863      	ldr	r3, [r4, #4]
 8009df4:	1ac0      	subs	r0, r0, r3
 8009df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009df8:	b10b      	cbz	r3, 8009dfe <__sflush_r+0x46>
 8009dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dfc:	1ac0      	subs	r0, r0, r3
 8009dfe:	2300      	movs	r3, #0
 8009e00:	4602      	mov	r2, r0
 8009e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b0      	blx	r6
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	89a3      	ldrh	r3, [r4, #12]
 8009e0e:	d106      	bne.n	8009e1e <__sflush_r+0x66>
 8009e10:	6829      	ldr	r1, [r5, #0]
 8009e12:	291d      	cmp	r1, #29
 8009e14:	d82c      	bhi.n	8009e70 <__sflush_r+0xb8>
 8009e16:	4a2a      	ldr	r2, [pc, #168]	; (8009ec0 <__sflush_r+0x108>)
 8009e18:	40ca      	lsrs	r2, r1
 8009e1a:	07d6      	lsls	r6, r2, #31
 8009e1c:	d528      	bpl.n	8009e70 <__sflush_r+0xb8>
 8009e1e:	2200      	movs	r2, #0
 8009e20:	6062      	str	r2, [r4, #4]
 8009e22:	04d9      	lsls	r1, r3, #19
 8009e24:	6922      	ldr	r2, [r4, #16]
 8009e26:	6022      	str	r2, [r4, #0]
 8009e28:	d504      	bpl.n	8009e34 <__sflush_r+0x7c>
 8009e2a:	1c42      	adds	r2, r0, #1
 8009e2c:	d101      	bne.n	8009e32 <__sflush_r+0x7a>
 8009e2e:	682b      	ldr	r3, [r5, #0]
 8009e30:	b903      	cbnz	r3, 8009e34 <__sflush_r+0x7c>
 8009e32:	6560      	str	r0, [r4, #84]	; 0x54
 8009e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e36:	602f      	str	r7, [r5, #0]
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d0ca      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e40:	4299      	cmp	r1, r3
 8009e42:	d002      	beq.n	8009e4a <__sflush_r+0x92>
 8009e44:	4628      	mov	r0, r5
 8009e46:	f7ff f9eb 	bl	8009220 <_free_r>
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e4e:	e7c1      	b.n	8009dd4 <__sflush_r+0x1c>
 8009e50:	6a21      	ldr	r1, [r4, #32]
 8009e52:	2301      	movs	r3, #1
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b0      	blx	r6
 8009e58:	1c41      	adds	r1, r0, #1
 8009e5a:	d1c7      	bne.n	8009dec <__sflush_r+0x34>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0c4      	beq.n	8009dec <__sflush_r+0x34>
 8009e62:	2b1d      	cmp	r3, #29
 8009e64:	d001      	beq.n	8009e6a <__sflush_r+0xb2>
 8009e66:	2b16      	cmp	r3, #22
 8009e68:	d101      	bne.n	8009e6e <__sflush_r+0xb6>
 8009e6a:	602f      	str	r7, [r5, #0]
 8009e6c:	e7b1      	b.n	8009dd2 <__sflush_r+0x1a>
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	e7ad      	b.n	8009dd4 <__sflush_r+0x1c>
 8009e78:	690f      	ldr	r7, [r1, #16]
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	d0a9      	beq.n	8009dd2 <__sflush_r+0x1a>
 8009e7e:	0793      	lsls	r3, r2, #30
 8009e80:	680e      	ldr	r6, [r1, #0]
 8009e82:	bf08      	it	eq
 8009e84:	694b      	ldreq	r3, [r1, #20]
 8009e86:	600f      	str	r7, [r1, #0]
 8009e88:	bf18      	it	ne
 8009e8a:	2300      	movne	r3, #0
 8009e8c:	eba6 0807 	sub.w	r8, r6, r7
 8009e90:	608b      	str	r3, [r1, #8]
 8009e92:	f1b8 0f00 	cmp.w	r8, #0
 8009e96:	dd9c      	ble.n	8009dd2 <__sflush_r+0x1a>
 8009e98:	6a21      	ldr	r1, [r4, #32]
 8009e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e9c:	4643      	mov	r3, r8
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b0      	blx	r6
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	dc06      	bgt.n	8009eb6 <__sflush_r+0xfe>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb4:	e78e      	b.n	8009dd4 <__sflush_r+0x1c>
 8009eb6:	4407      	add	r7, r0
 8009eb8:	eba8 0800 	sub.w	r8, r8, r0
 8009ebc:	e7e9      	b.n	8009e92 <__sflush_r+0xda>
 8009ebe:	bf00      	nop
 8009ec0:	20400001 	.word	0x20400001

08009ec4 <_fflush_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	4605      	mov	r5, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	b913      	cbnz	r3, 8009ed4 <_fflush_r+0x10>
 8009ece:	2500      	movs	r5, #0
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	b118      	cbz	r0, 8009ede <_fflush_r+0x1a>
 8009ed6:	6983      	ldr	r3, [r0, #24]
 8009ed8:	b90b      	cbnz	r3, 8009ede <_fflush_r+0x1a>
 8009eda:	f000 f887 	bl	8009fec <__sinit>
 8009ede:	4b14      	ldr	r3, [pc, #80]	; (8009f30 <_fflush_r+0x6c>)
 8009ee0:	429c      	cmp	r4, r3
 8009ee2:	d11b      	bne.n	8009f1c <_fflush_r+0x58>
 8009ee4:	686c      	ldr	r4, [r5, #4]
 8009ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0ef      	beq.n	8009ece <_fflush_r+0xa>
 8009eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ef0:	07d0      	lsls	r0, r2, #31
 8009ef2:	d404      	bmi.n	8009efe <_fflush_r+0x3a>
 8009ef4:	0599      	lsls	r1, r3, #22
 8009ef6:	d402      	bmi.n	8009efe <_fflush_r+0x3a>
 8009ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efa:	f000 f915 	bl	800a128 <__retarget_lock_acquire_recursive>
 8009efe:	4628      	mov	r0, r5
 8009f00:	4621      	mov	r1, r4
 8009f02:	f7ff ff59 	bl	8009db8 <__sflush_r>
 8009f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f08:	07da      	lsls	r2, r3, #31
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	d4e0      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	059b      	lsls	r3, r3, #22
 8009f12:	d4dd      	bmi.n	8009ed0 <_fflush_r+0xc>
 8009f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f16:	f000 f908 	bl	800a12a <__retarget_lock_release_recursive>
 8009f1a:	e7d9      	b.n	8009ed0 <_fflush_r+0xc>
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <_fflush_r+0x70>)
 8009f1e:	429c      	cmp	r4, r3
 8009f20:	d101      	bne.n	8009f26 <_fflush_r+0x62>
 8009f22:	68ac      	ldr	r4, [r5, #8]
 8009f24:	e7df      	b.n	8009ee6 <_fflush_r+0x22>
 8009f26:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <_fflush_r+0x74>)
 8009f28:	429c      	cmp	r4, r3
 8009f2a:	bf08      	it	eq
 8009f2c:	68ec      	ldreq	r4, [r5, #12]
 8009f2e:	e7da      	b.n	8009ee6 <_fflush_r+0x22>
 8009f30:	0801ed2c 	.word	0x0801ed2c
 8009f34:	0801ed4c 	.word	0x0801ed4c
 8009f38:	0801ed0c 	.word	0x0801ed0c

08009f3c <std>:
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	4604      	mov	r4, r0
 8009f42:	e9c0 3300 	strd	r3, r3, [r0]
 8009f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f4a:	6083      	str	r3, [r0, #8]
 8009f4c:	8181      	strh	r1, [r0, #12]
 8009f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8009f50:	81c2      	strh	r2, [r0, #14]
 8009f52:	6183      	str	r3, [r0, #24]
 8009f54:	4619      	mov	r1, r3
 8009f56:	2208      	movs	r2, #8
 8009f58:	305c      	adds	r0, #92	; 0x5c
 8009f5a:	f7ff f8c1 	bl	80090e0 <memset>
 8009f5e:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <std+0x38>)
 8009f60:	6263      	str	r3, [r4, #36]	; 0x24
 8009f62:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <std+0x3c>)
 8009f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <std+0x40>)
 8009f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <std+0x44>)
 8009f6c:	6224      	str	r4, [r4, #32]
 8009f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f70:	bd10      	pop	{r4, pc}
 8009f72:	bf00      	nop
 8009f74:	0800a331 	.word	0x0800a331
 8009f78:	0800a353 	.word	0x0800a353
 8009f7c:	0800a38b 	.word	0x0800a38b
 8009f80:	0800a3af 	.word	0x0800a3af

08009f84 <_cleanup_r>:
 8009f84:	4901      	ldr	r1, [pc, #4]	; (8009f8c <_cleanup_r+0x8>)
 8009f86:	f000 b8af 	b.w	800a0e8 <_fwalk_reent>
 8009f8a:	bf00      	nop
 8009f8c:	08009ec5 	.word	0x08009ec5

08009f90 <__sfmoreglue>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	1e4a      	subs	r2, r1, #1
 8009f94:	2568      	movs	r5, #104	; 0x68
 8009f96:	4355      	muls	r5, r2
 8009f98:	460e      	mov	r6, r1
 8009f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f9e:	f7ff f98f 	bl	80092c0 <_malloc_r>
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	b140      	cbz	r0, 8009fb8 <__sfmoreglue+0x28>
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8009fac:	300c      	adds	r0, #12
 8009fae:	60a0      	str	r0, [r4, #8]
 8009fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fb4:	f7ff f894 	bl	80090e0 <memset>
 8009fb8:	4620      	mov	r0, r4
 8009fba:	bd70      	pop	{r4, r5, r6, pc}

08009fbc <__sfp_lock_acquire>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__sfp_lock_acquire+0x8>)
 8009fbe:	f000 b8b3 	b.w	800a128 <__retarget_lock_acquire_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	200091ac 	.word	0x200091ac

08009fc8 <__sfp_lock_release>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <__sfp_lock_release+0x8>)
 8009fca:	f000 b8ae 	b.w	800a12a <__retarget_lock_release_recursive>
 8009fce:	bf00      	nop
 8009fd0:	200091ac 	.word	0x200091ac

08009fd4 <__sinit_lock_acquire>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	; (8009fdc <__sinit_lock_acquire+0x8>)
 8009fd6:	f000 b8a7 	b.w	800a128 <__retarget_lock_acquire_recursive>
 8009fda:	bf00      	nop
 8009fdc:	200091a7 	.word	0x200091a7

08009fe0 <__sinit_lock_release>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__sinit_lock_release+0x8>)
 8009fe2:	f000 b8a2 	b.w	800a12a <__retarget_lock_release_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	200091a7 	.word	0x200091a7

08009fec <__sinit>:
 8009fec:	b510      	push	{r4, lr}
 8009fee:	4604      	mov	r4, r0
 8009ff0:	f7ff fff0 	bl	8009fd4 <__sinit_lock_acquire>
 8009ff4:	69a3      	ldr	r3, [r4, #24]
 8009ff6:	b11b      	cbz	r3, 800a000 <__sinit+0x14>
 8009ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ffc:	f7ff bff0 	b.w	8009fe0 <__sinit_lock_release>
 800a000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a004:	6523      	str	r3, [r4, #80]	; 0x50
 800a006:	4b13      	ldr	r3, [pc, #76]	; (800a054 <__sinit+0x68>)
 800a008:	4a13      	ldr	r2, [pc, #76]	; (800a058 <__sinit+0x6c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a00e:	42a3      	cmp	r3, r4
 800a010:	bf04      	itt	eq
 800a012:	2301      	moveq	r3, #1
 800a014:	61a3      	streq	r3, [r4, #24]
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f820 	bl	800a05c <__sfp>
 800a01c:	6060      	str	r0, [r4, #4]
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f81c 	bl	800a05c <__sfp>
 800a024:	60a0      	str	r0, [r4, #8]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 f818 	bl	800a05c <__sfp>
 800a02c:	2200      	movs	r2, #0
 800a02e:	60e0      	str	r0, [r4, #12]
 800a030:	2104      	movs	r1, #4
 800a032:	6860      	ldr	r0, [r4, #4]
 800a034:	f7ff ff82 	bl	8009f3c <std>
 800a038:	68a0      	ldr	r0, [r4, #8]
 800a03a:	2201      	movs	r2, #1
 800a03c:	2109      	movs	r1, #9
 800a03e:	f7ff ff7d 	bl	8009f3c <std>
 800a042:	68e0      	ldr	r0, [r4, #12]
 800a044:	2202      	movs	r2, #2
 800a046:	2112      	movs	r1, #18
 800a048:	f7ff ff78 	bl	8009f3c <std>
 800a04c:	2301      	movs	r3, #1
 800a04e:	61a3      	str	r3, [r4, #24]
 800a050:	e7d2      	b.n	8009ff8 <__sinit+0xc>
 800a052:	bf00      	nop
 800a054:	0801ec20 	.word	0x0801ec20
 800a058:	08009f85 	.word	0x08009f85

0800a05c <__sfp>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	4607      	mov	r7, r0
 800a060:	f7ff ffac 	bl	8009fbc <__sfp_lock_acquire>
 800a064:	4b1e      	ldr	r3, [pc, #120]	; (800a0e0 <__sfp+0x84>)
 800a066:	681e      	ldr	r6, [r3, #0]
 800a068:	69b3      	ldr	r3, [r6, #24]
 800a06a:	b913      	cbnz	r3, 800a072 <__sfp+0x16>
 800a06c:	4630      	mov	r0, r6
 800a06e:	f7ff ffbd 	bl	8009fec <__sinit>
 800a072:	3648      	adds	r6, #72	; 0x48
 800a074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a078:	3b01      	subs	r3, #1
 800a07a:	d503      	bpl.n	800a084 <__sfp+0x28>
 800a07c:	6833      	ldr	r3, [r6, #0]
 800a07e:	b30b      	cbz	r3, 800a0c4 <__sfp+0x68>
 800a080:	6836      	ldr	r6, [r6, #0]
 800a082:	e7f7      	b.n	800a074 <__sfp+0x18>
 800a084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a088:	b9d5      	cbnz	r5, 800a0c0 <__sfp+0x64>
 800a08a:	4b16      	ldr	r3, [pc, #88]	; (800a0e4 <__sfp+0x88>)
 800a08c:	60e3      	str	r3, [r4, #12]
 800a08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a092:	6665      	str	r5, [r4, #100]	; 0x64
 800a094:	f000 f847 	bl	800a126 <__retarget_lock_init_recursive>
 800a098:	f7ff ff96 	bl	8009fc8 <__sfp_lock_release>
 800a09c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0a4:	6025      	str	r5, [r4, #0]
 800a0a6:	61a5      	str	r5, [r4, #24]
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0b0:	f7ff f816 	bl	80090e0 <memset>
 800a0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0bc:	4620      	mov	r0, r4
 800a0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c0:	3468      	adds	r4, #104	; 0x68
 800a0c2:	e7d9      	b.n	800a078 <__sfp+0x1c>
 800a0c4:	2104      	movs	r1, #4
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f7ff ff62 	bl	8009f90 <__sfmoreglue>
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	6030      	str	r0, [r6, #0]
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d1d5      	bne.n	800a080 <__sfp+0x24>
 800a0d4:	f7ff ff78 	bl	8009fc8 <__sfp_lock_release>
 800a0d8:	230c      	movs	r3, #12
 800a0da:	603b      	str	r3, [r7, #0]
 800a0dc:	e7ee      	b.n	800a0bc <__sfp+0x60>
 800a0de:	bf00      	nop
 800a0e0:	0801ec20 	.word	0x0801ec20
 800a0e4:	ffff0001 	.word	0xffff0001

0800a0e8 <_fwalk_reent>:
 800a0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	4688      	mov	r8, r1
 800a0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0f4:	2700      	movs	r7, #0
 800a0f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0fa:	f1b9 0901 	subs.w	r9, r9, #1
 800a0fe:	d505      	bpl.n	800a10c <_fwalk_reent+0x24>
 800a100:	6824      	ldr	r4, [r4, #0]
 800a102:	2c00      	cmp	r4, #0
 800a104:	d1f7      	bne.n	800a0f6 <_fwalk_reent+0xe>
 800a106:	4638      	mov	r0, r7
 800a108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a10c:	89ab      	ldrh	r3, [r5, #12]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d907      	bls.n	800a122 <_fwalk_reent+0x3a>
 800a112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a116:	3301      	adds	r3, #1
 800a118:	d003      	beq.n	800a122 <_fwalk_reent+0x3a>
 800a11a:	4629      	mov	r1, r5
 800a11c:	4630      	mov	r0, r6
 800a11e:	47c0      	blx	r8
 800a120:	4307      	orrs	r7, r0
 800a122:	3568      	adds	r5, #104	; 0x68
 800a124:	e7e9      	b.n	800a0fa <_fwalk_reent+0x12>

0800a126 <__retarget_lock_init_recursive>:
 800a126:	4770      	bx	lr

0800a128 <__retarget_lock_acquire_recursive>:
 800a128:	4770      	bx	lr

0800a12a <__retarget_lock_release_recursive>:
 800a12a:	4770      	bx	lr

0800a12c <__swhatbuf_r>:
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	460e      	mov	r6, r1
 800a130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a134:	2900      	cmp	r1, #0
 800a136:	b096      	sub	sp, #88	; 0x58
 800a138:	4614      	mov	r4, r2
 800a13a:	461d      	mov	r5, r3
 800a13c:	da07      	bge.n	800a14e <__swhatbuf_r+0x22>
 800a13e:	2300      	movs	r3, #0
 800a140:	602b      	str	r3, [r5, #0]
 800a142:	89b3      	ldrh	r3, [r6, #12]
 800a144:	061a      	lsls	r2, r3, #24
 800a146:	d410      	bmi.n	800a16a <__swhatbuf_r+0x3e>
 800a148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14c:	e00e      	b.n	800a16c <__swhatbuf_r+0x40>
 800a14e:	466a      	mov	r2, sp
 800a150:	f000 f954 	bl	800a3fc <_fstat_r>
 800a154:	2800      	cmp	r0, #0
 800a156:	dbf2      	blt.n	800a13e <__swhatbuf_r+0x12>
 800a158:	9a01      	ldr	r2, [sp, #4]
 800a15a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a15e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a162:	425a      	negs	r2, r3
 800a164:	415a      	adcs	r2, r3
 800a166:	602a      	str	r2, [r5, #0]
 800a168:	e7ee      	b.n	800a148 <__swhatbuf_r+0x1c>
 800a16a:	2340      	movs	r3, #64	; 0x40
 800a16c:	2000      	movs	r0, #0
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	b016      	add	sp, #88	; 0x58
 800a172:	bd70      	pop	{r4, r5, r6, pc}

0800a174 <__smakebuf_r>:
 800a174:	898b      	ldrh	r3, [r1, #12]
 800a176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a178:	079d      	lsls	r5, r3, #30
 800a17a:	4606      	mov	r6, r0
 800a17c:	460c      	mov	r4, r1
 800a17e:	d507      	bpl.n	800a190 <__smakebuf_r+0x1c>
 800a180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	6123      	str	r3, [r4, #16]
 800a188:	2301      	movs	r3, #1
 800a18a:	6163      	str	r3, [r4, #20]
 800a18c:	b002      	add	sp, #8
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	ab01      	add	r3, sp, #4
 800a192:	466a      	mov	r2, sp
 800a194:	f7ff ffca 	bl	800a12c <__swhatbuf_r>
 800a198:	9900      	ldr	r1, [sp, #0]
 800a19a:	4605      	mov	r5, r0
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff f88f 	bl	80092c0 <_malloc_r>
 800a1a2:	b948      	cbnz	r0, 800a1b8 <__smakebuf_r+0x44>
 800a1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a8:	059a      	lsls	r2, r3, #22
 800a1aa:	d4ef      	bmi.n	800a18c <__smakebuf_r+0x18>
 800a1ac:	f023 0303 	bic.w	r3, r3, #3
 800a1b0:	f043 0302 	orr.w	r3, r3, #2
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	e7e3      	b.n	800a180 <__smakebuf_r+0xc>
 800a1b8:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <__smakebuf_r+0x7c>)
 800a1ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	6020      	str	r0, [r4, #0]
 800a1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	6163      	str	r3, [r4, #20]
 800a1ca:	9b01      	ldr	r3, [sp, #4]
 800a1cc:	6120      	str	r0, [r4, #16]
 800a1ce:	b15b      	cbz	r3, 800a1e8 <__smakebuf_r+0x74>
 800a1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 f923 	bl	800a420 <_isatty_r>
 800a1da:	b128      	cbz	r0, 800a1e8 <__smakebuf_r+0x74>
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	f023 0303 	bic.w	r3, r3, #3
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	81a3      	strh	r3, [r4, #12]
 800a1e8:	89a0      	ldrh	r0, [r4, #12]
 800a1ea:	4305      	orrs	r5, r0
 800a1ec:	81a5      	strh	r5, [r4, #12]
 800a1ee:	e7cd      	b.n	800a18c <__smakebuf_r+0x18>
 800a1f0:	08009f85 	.word	0x08009f85

0800a1f4 <memcpy>:
 800a1f4:	440a      	add	r2, r1
 800a1f6:	4291      	cmp	r1, r2
 800a1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1fc:	d100      	bne.n	800a200 <memcpy+0xc>
 800a1fe:	4770      	bx	lr
 800a200:	b510      	push	{r4, lr}
 800a202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a20a:	4291      	cmp	r1, r2
 800a20c:	d1f9      	bne.n	800a202 <memcpy+0xe>
 800a20e:	bd10      	pop	{r4, pc}

0800a210 <memmove>:
 800a210:	4288      	cmp	r0, r1
 800a212:	b510      	push	{r4, lr}
 800a214:	eb01 0402 	add.w	r4, r1, r2
 800a218:	d902      	bls.n	800a220 <memmove+0x10>
 800a21a:	4284      	cmp	r4, r0
 800a21c:	4623      	mov	r3, r4
 800a21e:	d807      	bhi.n	800a230 <memmove+0x20>
 800a220:	1e43      	subs	r3, r0, #1
 800a222:	42a1      	cmp	r1, r4
 800a224:	d008      	beq.n	800a238 <memmove+0x28>
 800a226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a22e:	e7f8      	b.n	800a222 <memmove+0x12>
 800a230:	4402      	add	r2, r0
 800a232:	4601      	mov	r1, r0
 800a234:	428a      	cmp	r2, r1
 800a236:	d100      	bne.n	800a23a <memmove+0x2a>
 800a238:	bd10      	pop	{r4, pc}
 800a23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a242:	e7f7      	b.n	800a234 <memmove+0x24>

0800a244 <__malloc_lock>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__malloc_lock+0x8>)
 800a246:	f7ff bf6f 	b.w	800a128 <__retarget_lock_acquire_recursive>
 800a24a:	bf00      	nop
 800a24c:	200091a8 	.word	0x200091a8

0800a250 <__malloc_unlock>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__malloc_unlock+0x8>)
 800a252:	f7ff bf6a 	b.w	800a12a <__retarget_lock_release_recursive>
 800a256:	bf00      	nop
 800a258:	200091a8 	.word	0x200091a8

0800a25c <_realloc_r>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	4607      	mov	r7, r0
 800a260:	4614      	mov	r4, r2
 800a262:	460e      	mov	r6, r1
 800a264:	b921      	cbnz	r1, 800a270 <_realloc_r+0x14>
 800a266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a26a:	4611      	mov	r1, r2
 800a26c:	f7ff b828 	b.w	80092c0 <_malloc_r>
 800a270:	b922      	cbnz	r2, 800a27c <_realloc_r+0x20>
 800a272:	f7fe ffd5 	bl	8009220 <_free_r>
 800a276:	4625      	mov	r5, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a27c:	f000 f8f2 	bl	800a464 <_malloc_usable_size_r>
 800a280:	42a0      	cmp	r0, r4
 800a282:	d20f      	bcs.n	800a2a4 <_realloc_r+0x48>
 800a284:	4621      	mov	r1, r4
 800a286:	4638      	mov	r0, r7
 800a288:	f7ff f81a 	bl	80092c0 <_malloc_r>
 800a28c:	4605      	mov	r5, r0
 800a28e:	2800      	cmp	r0, #0
 800a290:	d0f2      	beq.n	800a278 <_realloc_r+0x1c>
 800a292:	4631      	mov	r1, r6
 800a294:	4622      	mov	r2, r4
 800a296:	f7ff ffad 	bl	800a1f4 <memcpy>
 800a29a:	4631      	mov	r1, r6
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7fe ffbf 	bl	8009220 <_free_r>
 800a2a2:	e7e9      	b.n	800a278 <_realloc_r+0x1c>
 800a2a4:	4635      	mov	r5, r6
 800a2a6:	e7e7      	b.n	800a278 <_realloc_r+0x1c>

0800a2a8 <_raise_r>:
 800a2a8:	291f      	cmp	r1, #31
 800a2aa:	b538      	push	{r3, r4, r5, lr}
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	d904      	bls.n	800a2bc <_raise_r+0x14>
 800a2b2:	2316      	movs	r3, #22
 800a2b4:	6003      	str	r3, [r0, #0]
 800a2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2be:	b112      	cbz	r2, 800a2c6 <_raise_r+0x1e>
 800a2c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2c4:	b94b      	cbnz	r3, 800a2da <_raise_r+0x32>
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 f830 	bl	800a32c <_getpid_r>
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2d6:	f000 b817 	b.w	800a308 <_kill_r>
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d00a      	beq.n	800a2f4 <_raise_r+0x4c>
 800a2de:	1c59      	adds	r1, r3, #1
 800a2e0:	d103      	bne.n	800a2ea <_raise_r+0x42>
 800a2e2:	2316      	movs	r3, #22
 800a2e4:	6003      	str	r3, [r0, #0]
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	e7e7      	b.n	800a2ba <_raise_r+0x12>
 800a2ea:	2400      	movs	r4, #0
 800a2ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	4798      	blx	r3
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	e7e0      	b.n	800a2ba <_raise_r+0x12>

0800a2f8 <raise>:
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <raise+0xc>)
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	f7ff bfd3 	b.w	800a2a8 <_raise_r>
 800a302:	bf00      	nop
 800a304:	20000034 	.word	0x20000034

0800a308 <_kill_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	; (800a328 <_kill_r+0x20>)
 800a30c:	2300      	movs	r3, #0
 800a30e:	4604      	mov	r4, r0
 800a310:	4608      	mov	r0, r1
 800a312:	4611      	mov	r1, r2
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	f7f8 fe75 	bl	8003004 <_kill>
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	d102      	bne.n	800a324 <_kill_r+0x1c>
 800a31e:	682b      	ldr	r3, [r5, #0]
 800a320:	b103      	cbz	r3, 800a324 <_kill_r+0x1c>
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	bd38      	pop	{r3, r4, r5, pc}
 800a326:	bf00      	nop
 800a328:	200091b0 	.word	0x200091b0

0800a32c <_getpid_r>:
 800a32c:	f7f8 be62 	b.w	8002ff4 <_getpid>

0800a330 <__sread>:
 800a330:	b510      	push	{r4, lr}
 800a332:	460c      	mov	r4, r1
 800a334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a338:	f000 f89c 	bl	800a474 <_read_r>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	bfab      	itete	ge
 800a340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a342:	89a3      	ldrhlt	r3, [r4, #12]
 800a344:	181b      	addge	r3, r3, r0
 800a346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a34a:	bfac      	ite	ge
 800a34c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a34e:	81a3      	strhlt	r3, [r4, #12]
 800a350:	bd10      	pop	{r4, pc}

0800a352 <__swrite>:
 800a352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a356:	461f      	mov	r7, r3
 800a358:	898b      	ldrh	r3, [r1, #12]
 800a35a:	05db      	lsls	r3, r3, #23
 800a35c:	4605      	mov	r5, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4616      	mov	r6, r2
 800a362:	d505      	bpl.n	800a370 <__swrite+0x1e>
 800a364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a368:	2302      	movs	r3, #2
 800a36a:	2200      	movs	r2, #0
 800a36c:	f000 f868 	bl	800a440 <_lseek_r>
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a376:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	4628      	mov	r0, r5
 800a382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	f000 b817 	b.w	800a3b8 <_write_r>

0800a38a <__sseek>:
 800a38a:	b510      	push	{r4, lr}
 800a38c:	460c      	mov	r4, r1
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	f000 f855 	bl	800a440 <_lseek_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	bf15      	itete	ne
 800a39c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a39e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3a6:	81a3      	strheq	r3, [r4, #12]
 800a3a8:	bf18      	it	ne
 800a3aa:	81a3      	strhne	r3, [r4, #12]
 800a3ac:	bd10      	pop	{r4, pc}

0800a3ae <__sclose>:
 800a3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b2:	f000 b813 	b.w	800a3dc <_close_r>
	...

0800a3b8 <_write_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d07      	ldr	r5, [pc, #28]	; (800a3d8 <_write_r+0x20>)
 800a3bc:	4604      	mov	r4, r0
 800a3be:	4608      	mov	r0, r1
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	602a      	str	r2, [r5, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f7f8 fe53 	bl	8003072 <_write>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_write_r+0x1e>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_write_r+0x1e>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	200091b0 	.word	0x200091b0

0800a3dc <_close_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d06      	ldr	r5, [pc, #24]	; (800a3f8 <_close_r+0x1c>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	f7f8 fe5f 	bl	80030aa <_close>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d102      	bne.n	800a3f6 <_close_r+0x1a>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	b103      	cbz	r3, 800a3f6 <_close_r+0x1a>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
 800a3f8:	200091b0 	.word	0x200091b0

0800a3fc <_fstat_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d07      	ldr	r5, [pc, #28]	; (800a41c <_fstat_r+0x20>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	4611      	mov	r1, r2
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	f7f8 fe5a 	bl	80030c2 <_fstat>
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	d102      	bne.n	800a418 <_fstat_r+0x1c>
 800a412:	682b      	ldr	r3, [r5, #0]
 800a414:	b103      	cbz	r3, 800a418 <_fstat_r+0x1c>
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	bd38      	pop	{r3, r4, r5, pc}
 800a41a:	bf00      	nop
 800a41c:	200091b0 	.word	0x200091b0

0800a420 <_isatty_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d06      	ldr	r5, [pc, #24]	; (800a43c <_isatty_r+0x1c>)
 800a424:	2300      	movs	r3, #0
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f8 fe59 	bl	80030e2 <_isatty>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_isatty_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_isatty_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	200091b0 	.word	0x200091b0

0800a440 <_lseek_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d07      	ldr	r5, [pc, #28]	; (800a460 <_lseek_r+0x20>)
 800a444:	4604      	mov	r4, r0
 800a446:	4608      	mov	r0, r1
 800a448:	4611      	mov	r1, r2
 800a44a:	2200      	movs	r2, #0
 800a44c:	602a      	str	r2, [r5, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	f7f8 fe52 	bl	80030f8 <_lseek>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d102      	bne.n	800a45e <_lseek_r+0x1e>
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	b103      	cbz	r3, 800a45e <_lseek_r+0x1e>
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	200091b0 	.word	0x200091b0

0800a464 <_malloc_usable_size_r>:
 800a464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a468:	1f18      	subs	r0, r3, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	bfbc      	itt	lt
 800a46e:	580b      	ldrlt	r3, [r1, r0]
 800a470:	18c0      	addlt	r0, r0, r3
 800a472:	4770      	bx	lr

0800a474 <_read_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d07      	ldr	r5, [pc, #28]	; (800a494 <_read_r+0x20>)
 800a478:	4604      	mov	r4, r0
 800a47a:	4608      	mov	r0, r1
 800a47c:	4611      	mov	r1, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	602a      	str	r2, [r5, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	f7f8 fdd8 	bl	8003038 <_read>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d102      	bne.n	800a492 <_read_r+0x1e>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	b103      	cbz	r3, 800a492 <_read_r+0x1e>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	200091b0 	.word	0x200091b0

0800a498 <log10f>:
 800a498:	b508      	push	{r3, lr}
 800a49a:	ed2d 8b02 	vpush	{d8}
 800a49e:	eeb0 8a40 	vmov.f32	s16, s0
 800a4a2:	f000 f855 	bl	800a550 <__ieee754_log10f>
 800a4a6:	4b14      	ldr	r3, [pc, #80]	; (800a4f8 <log10f+0x60>)
 800a4a8:	f993 3000 	ldrsb.w	r3, [r3]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	d014      	beq.n	800a4da <log10f+0x42>
 800a4b0:	eeb4 8a48 	vcmp.f32	s16, s16
 800a4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b8:	d60f      	bvs.n	800a4da <log10f+0x42>
 800a4ba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c2:	d80a      	bhi.n	800a4da <log10f+0x42>
 800a4c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4cc:	d108      	bne.n	800a4e0 <log10f+0x48>
 800a4ce:	f7fe fddd 	bl	800908c <__errno>
 800a4d2:	2322      	movs	r3, #34	; 0x22
 800a4d4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a4fc <log10f+0x64>
 800a4d8:	6003      	str	r3, [r0, #0]
 800a4da:	ecbd 8b02 	vpop	{d8}
 800a4de:	bd08      	pop	{r3, pc}
 800a4e0:	f7fe fdd4 	bl	800908c <__errno>
 800a4e4:	ecbd 8b02 	vpop	{d8}
 800a4e8:	2321      	movs	r3, #33	; 0x21
 800a4ea:	6003      	str	r3, [r0, #0]
 800a4ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4f0:	4803      	ldr	r0, [pc, #12]	; (800a500 <log10f+0x68>)
 800a4f2:	f000 b889 	b.w	800a608 <nanf>
 800a4f6:	bf00      	nop
 800a4f8:	20000098 	.word	0x20000098
 800a4fc:	ff800000 	.word	0xff800000
 800a500:	0801ecd5 	.word	0x0801ecd5

0800a504 <sqrtf>:
 800a504:	b508      	push	{r3, lr}
 800a506:	ed2d 8b02 	vpush	{d8}
 800a50a:	eeb0 8a40 	vmov.f32	s16, s0
 800a50e:	f000 f877 	bl	800a600 <__ieee754_sqrtf>
 800a512:	4b0d      	ldr	r3, [pc, #52]	; (800a548 <sqrtf+0x44>)
 800a514:	f993 3000 	ldrsb.w	r3, [r3]
 800a518:	3301      	adds	r3, #1
 800a51a:	d011      	beq.n	800a540 <sqrtf+0x3c>
 800a51c:	eeb4 8a48 	vcmp.f32	s16, s16
 800a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a524:	d60c      	bvs.n	800a540 <sqrtf+0x3c>
 800a526:	eddf 8a09 	vldr	s17, [pc, #36]	; 800a54c <sqrtf+0x48>
 800a52a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a532:	d505      	bpl.n	800a540 <sqrtf+0x3c>
 800a534:	f7fe fdaa 	bl	800908c <__errno>
 800a538:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a53c:	2321      	movs	r3, #33	; 0x21
 800a53e:	6003      	str	r3, [r0, #0]
 800a540:	ecbd 8b02 	vpop	{d8}
 800a544:	bd08      	pop	{r3, pc}
 800a546:	bf00      	nop
 800a548:	20000098 	.word	0x20000098
 800a54c:	00000000 	.word	0x00000000

0800a550 <__ieee754_log10f>:
 800a550:	b508      	push	{r3, lr}
 800a552:	ee10 2a10 	vmov	r2, s0
 800a556:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a55a:	ed2d 8b02 	vpush	{d8}
 800a55e:	d108      	bne.n	800a572 <__ieee754_log10f+0x22>
 800a560:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a5e8 <__ieee754_log10f+0x98>
 800a564:	eddf 7a21 	vldr	s15, [pc, #132]	; 800a5ec <__ieee754_log10f+0x9c>
 800a568:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a56c:	ecbd 8b02 	vpop	{d8}
 800a570:	bd08      	pop	{r3, pc}
 800a572:	2a00      	cmp	r2, #0
 800a574:	da02      	bge.n	800a57c <__ieee754_log10f+0x2c>
 800a576:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a57a:	e7f3      	b.n	800a564 <__ieee754_log10f+0x14>
 800a57c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a580:	db02      	blt.n	800a588 <__ieee754_log10f+0x38>
 800a582:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a586:	e7f1      	b.n	800a56c <__ieee754_log10f+0x1c>
 800a588:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800a58c:	bfbf      	itttt	lt
 800a58e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800a5f0 <__ieee754_log10f+0xa0>
 800a592:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a596:	f06f 0118 	mvnlt.w	r1, #24
 800a59a:	ee17 2a90 	vmovlt	r2, s15
 800a59e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a5a2:	bfa8      	it	ge
 800a5a4:	2100      	movge	r1, #0
 800a5a6:	3b7f      	subs	r3, #127	; 0x7f
 800a5a8:	440b      	add	r3, r1
 800a5aa:	0fd9      	lsrs	r1, r3, #31
 800a5ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a5b0:	ee07 3a90 	vmov	s15, r3
 800a5b4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a5b8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800a5bc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a5c0:	ee00 3a10 	vmov	s0, r3
 800a5c4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a5c8:	f000 f824 	bl	800a614 <__ieee754_logf>
 800a5cc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a5f4 <__ieee754_log10f+0xa4>
 800a5d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a5d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a5f8 <__ieee754_log10f+0xa8>
 800a5d8:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a5dc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a5fc <__ieee754_log10f+0xac>
 800a5e0:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a5e4:	e7c2      	b.n	800a56c <__ieee754_log10f+0x1c>
 800a5e6:	bf00      	nop
 800a5e8:	cc000000 	.word	0xcc000000
 800a5ec:	00000000 	.word	0x00000000
 800a5f0:	4c000000 	.word	0x4c000000
 800a5f4:	3ede5bd9 	.word	0x3ede5bd9
 800a5f8:	355427db 	.word	0x355427db
 800a5fc:	3e9a2080 	.word	0x3e9a2080

0800a600 <__ieee754_sqrtf>:
 800a600:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a604:	4770      	bx	lr
	...

0800a608 <nanf>:
 800a608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a610 <nanf+0x8>
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	7fc00000 	.word	0x7fc00000

0800a614 <__ieee754_logf>:
 800a614:	ee10 3a10 	vmov	r3, s0
 800a618:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a61c:	d106      	bne.n	800a62c <__ieee754_logf+0x18>
 800a61e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a7b4 <__ieee754_logf+0x1a0>
 800a622:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a7b8 <__ieee754_logf+0x1a4>
 800a626:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a62a:	4770      	bx	lr
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	da02      	bge.n	800a636 <__ieee754_logf+0x22>
 800a630:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a634:	e7f5      	b.n	800a622 <__ieee754_logf+0xe>
 800a636:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a63a:	db02      	blt.n	800a642 <__ieee754_logf+0x2e>
 800a63c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a640:	4770      	bx	lr
 800a642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a646:	bfb8      	it	lt
 800a648:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800a7bc <__ieee754_logf+0x1a8>
 800a64c:	485c      	ldr	r0, [pc, #368]	; (800a7c0 <__ieee754_logf+0x1ac>)
 800a64e:	bfbe      	ittt	lt
 800a650:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a654:	f06f 0118 	mvnlt.w	r1, #24
 800a658:	ee17 3a90 	vmovlt	r3, s15
 800a65c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800a660:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a664:	4418      	add	r0, r3
 800a666:	bfa8      	it	ge
 800a668:	2100      	movge	r1, #0
 800a66a:	3a7f      	subs	r2, #127	; 0x7f
 800a66c:	440a      	add	r2, r1
 800a66e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800a672:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800a676:	4319      	orrs	r1, r3
 800a678:	ee00 1a10 	vmov	s0, r1
 800a67c:	4951      	ldr	r1, [pc, #324]	; (800a7c4 <__ieee754_logf+0x1b0>)
 800a67e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800a682:	f103 000f 	add.w	r0, r3, #15
 800a686:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a68a:	4001      	ands	r1, r0
 800a68c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a690:	bb89      	cbnz	r1, 800a6f6 <__ieee754_logf+0xe2>
 800a692:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69a:	d10f      	bne.n	800a6bc <__ieee754_logf+0xa8>
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	f000 8085 	beq.w	800a7ac <__ieee754_logf+0x198>
 800a6a2:	ee07 2a90 	vmov	s15, r2
 800a6a6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800a7c8 <__ieee754_logf+0x1b4>
 800a6aa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a7cc <__ieee754_logf+0x1b8>
 800a6ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a6b6:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a6ba:	4770      	bx	lr
 800a6bc:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a7d0 <__ieee754_logf+0x1bc>
 800a6c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a6c4:	eee0 7a66 	vfms.f32	s15, s0, s13
 800a6c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a6cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6d0:	b912      	cbnz	r2, 800a6d8 <__ieee754_logf+0xc4>
 800a6d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a6d6:	4770      	bx	lr
 800a6d8:	ee07 2a90 	vmov	s15, r2
 800a6dc:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800a7c8 <__ieee754_logf+0x1b4>
 800a6e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6e4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a6e8:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a6ec:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a7cc <__ieee754_logf+0x1b8>
 800a6f0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800a6f4:	4770      	bx	lr
 800a6f6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a6fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a6fe:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a7d4 <__ieee754_logf+0x1c0>
 800a702:	eddf 4a35 	vldr	s9, [pc, #212]	; 800a7d8 <__ieee754_logf+0x1c4>
 800a706:	4935      	ldr	r1, [pc, #212]	; (800a7dc <__ieee754_logf+0x1c8>)
 800a708:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800a70c:	4419      	add	r1, r3
 800a70e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800a712:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a716:	430b      	orrs	r3, r1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	ee07 2a90 	vmov	s15, r2
 800a71e:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a722:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a726:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a72a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800a7e0 <__ieee754_logf+0x1cc>
 800a72e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a732:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800a7e4 <__ieee754_logf+0x1d0>
 800a736:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a73a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800a7e8 <__ieee754_logf+0x1d4>
 800a73e:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a742:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800a7ec <__ieee754_logf+0x1d8>
 800a746:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a74a:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a7f0 <__ieee754_logf+0x1dc>
 800a74e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a752:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a756:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a75a:	dd1c      	ble.n	800a796 <__ieee754_logf+0x182>
 800a75c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a760:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a764:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a76c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a770:	b922      	cbnz	r2, 800a77c <__ieee754_logf+0x168>
 800a772:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a776:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a77a:	4770      	bx	lr
 800a77c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800a7c8 <__ieee754_logf+0x1b4>
 800a780:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a784:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a788:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a78c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a7cc <__ieee754_logf+0x1b8>
 800a790:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a794:	4770      	bx	lr
 800a796:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a79a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	d0e9      	beq.n	800a776 <__ieee754_logf+0x162>
 800a7a2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800a7c8 <__ieee754_logf+0x1b4>
 800a7a6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a7aa:	e7ed      	b.n	800a788 <__ieee754_logf+0x174>
 800a7ac:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800a7b8 <__ieee754_logf+0x1a4>
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	cc000000 	.word	0xcc000000
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	4c000000 	.word	0x4c000000
 800a7c0:	004afb20 	.word	0x004afb20
 800a7c4:	007ffff0 	.word	0x007ffff0
 800a7c8:	3717f7d1 	.word	0x3717f7d1
 800a7cc:	3f317180 	.word	0x3f317180
 800a7d0:	3eaaaaab 	.word	0x3eaaaaab
 800a7d4:	3e1cd04f 	.word	0x3e1cd04f
 800a7d8:	3e178897 	.word	0x3e178897
 800a7dc:	ffcf5c30 	.word	0xffcf5c30
 800a7e0:	3e638e29 	.word	0x3e638e29
 800a7e4:	3ecccccd 	.word	0x3ecccccd
 800a7e8:	3e3a3325 	.word	0x3e3a3325
 800a7ec:	3e924925 	.word	0x3e924925
 800a7f0:	3f2aaaab 	.word	0x3f2aaaab

0800a7f4 <_init>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	bf00      	nop
 800a7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fa:	bc08      	pop	{r3}
 800a7fc:	469e      	mov	lr, r3
 800a7fe:	4770      	bx	lr

0800a800 <_fini>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr
